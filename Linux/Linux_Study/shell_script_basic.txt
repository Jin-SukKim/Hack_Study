Shell Script 기초 :

    Shell : OS의 Kernel과 사용자 사이를 이어주는 역할, shell 명령어를 통해 운영체제를 이용한다.

    종류 :
        1) bash (Bourne-Again Shell)
            - 프롬프트는 #을 사용한다.
            - 실행 파일은 /bin/bash 이다.
            - 가장 많이 사용되는 shell
            - Bourne Shell (sh)의 변종

        2) sh (Bourne Shell)
            - 프롬프트는 $를 사용한다.
            - Interactive 방식이 아니다
            - shell script를 작성하는데 이용되는 shell이다.
            - 강력한 명령 프로그래밍 언어 기능을 갖는 shell이다.
            - 가장 오랫 동안 모든 유닉스 시스템의 표준

        3) csh (C style Shell)
            - 프롬프트는 %를 사용한다.
            - 버클리 캘리포니아 대학에서 개발된 프로그래머들에게 적합한 shell.
            - C언어와 유사한 언어 사용
            - 상호 대화형 (Interactive)

Shell Script 기본문법 :
    Shell Script 파일 생성 :
        - vim, nano, gedit, vi등을 사용해 파일을 생성시 extention을 .sh로 해준다.
        ex)
            vim script1.sh

    Script 파일작성 시작 :
        - 첫번째 줄에 #!/bin/bash를 입력한다. bash shell의 실행 파일을 사용한다는 것을 의미한다.
        ex)
            #!/bin/bash
        
    데이터 출력 :
        - shell command를 사용한다.
        ex)
            echo "Hello, World"

    Script 실행 :
        - script 파일 이름을 입력시 실행된다.
        ex)
            ./script1.sh

        - 실행이 안될시 보통 실행 권한이 없어서 인데 script파일에 실행 권한을 부여해 주면 실행이 가능하다.
        ex)
            chmod +x script1.sh
            ./script1.sh

    변수선언 및 출력 :
        - name=value, 중요한 점은 변수명과 변수값 사이에 공백이 존재해서는 안된다.
        ex)
            a=1
            b=2
            c=3

        - 선언한 변수를 출력하려면 $변수명을 이용해 변수값을 불러올 수 있다.
        ex)
            echo "a=$a" # a=1
            echo "b=$b" # b=2
            echo "c=$c" # c=3

    값 입력받기 :
        - 값 입력을 위해 read를 사용한다. read는 값을 입력받을 수 있으며 해당값을 바로 변수에 대입해준다.
        ex) text1.sh
            #!/bin/bash
            echo "user input : "
            read input
            echo "input : $input"

            ./text1.sh
            user input : 123
            input : 123

    사칙연산 :
        - expr을 사용해 연산 기호를 이용한다.
        - `을 이용해야 한다.
        - 곱셈 연산자 기호 (*) 앞에는 \를 같이 사용해야한다.
        - 모든 연산자와 숫자, 변수, 기호 사이에는 공백이 있어야한다.
        ex)
            #!/bin/bash

            a=1
            b=2
            result1=`expr $a + $b`
            echo "a+b=$result1" # a+b=3   

            result2=`expr $a - $b`
            echo "a-b=$result1" # a+b=-1   

            result3=`expr $a \* $b`
            echo "a*b=$result1" # a+b=2 

            result4=`expr $a / $b`
            echo "a/b=$result1" # a+b=0

    Commnet 처리:
        - #을 이용해 주석처리한다.
        ex)
            # comment

    If Else :
        if [조건]; then
            문장
        elif [조건]; then
            문장
        else
            문장
        fi

    case :
        case 변수 in 
        경우)
        문장;;
        경우)
        문장;;
        esac

    반복문 :
        for :

        #!/bin/bash
        for 변수 in 반복조건
        do
            문장
        done

        while :
        
        #!/bin/bash
        while [값1 조건식 값2]
        do
            문장
        done

    # tips : 
        if나 반복문 사용시 if 조건; then이나 for 변수 in 조건; do 처럼 한줄에 써도 되지만
        if
        then 이나
        for 변수 in 조건
        do
        처럼 나눠서 써도된다. 단 한줄에 입력이 ;을 사용해 뒤의 명령어가 이어서 실행되게 한다.
        
    조건문 종류 :
        - == 등으로 해도 되지만 -ne, -gt등으로 하기도 한다.

        -z : 문자열의 길이가 0이면 true
        -n : 문자열의 길이가 0이 아니면 true
        -eq : 값이 같으면 true
        -ne : 값이 다르면 true
        -gt : 값1 > 값2
        -ge : 값1 >= 값2
        -lt : 값1 < 값2
        -le : 값1 <= 값2
        -a : &&연산과 동일 and 연산
        -o : ||연산과 동일 xor 연산
        -d : 파일이 디렉토리면 true
        -e : 파일이 있으면 true
        -L : 파일이 심볼릭 링크면 true
        -r : 파일이 읽기 가능하면 true
        -s : 파일의 크기가 0보다 크면 true
        -w : 파일이 쓰기 가능하면 true
        -x : 파일이 실행 가능하면 true
        file1 -nt file2 : 파일1이 파일2보다 최신파일이면 true
        file1 -ot file2 : 파일1이 파일2보다 이전파일이면 true
        file1 -ef file2 : 파일1이 파일2랑 같은 파일이면 true














