Instruction Cycle :
    어셈블리 코드는 기계 코드와 대응되므로, 기계 코드가 동작할 CPU가 어떤 역할을 하고 어떻게 동작하는지를 알아보는것이 어셈블리 코드를 이해하는데에 도움이 됩니다.
    어셈블리 코드를 이해하기에 앞서 CPU가 하는 기본적인 동작 과정에 대해 간단히 알아보겠습니다.

    CPU는 아주 복잡해보이지만, 
    기본적으로는 다음 실행할 명령어를 읽어오고(Fetch) → 읽어온 명령어를 해석한 다음(Decode) → 해석한 결과를 실행하는(Execute) 과정을 반복하는 장치입니다.
    이렇게 한 개의 명령어, 다시 말해 기계 코드가 실행되는 한 번의 과정을 Instruction Cycle이라고 합니다. 
    이러한 일련의 과정이 매우 고도화되어 있지만, 추상적인 관점에서 보자면 CPU를 구성하는 요소들은 
    이 역할을 효율적으로 수행하기 위해 필요한 것들이라고 볼 수 있습니다.


레지스터(Register)와 명령어(Instruction) :
    CPU는 Instruction Cycle을 수행하기 위해 기계 코드에 해당하는 각종 명령어를 해석하기 위한 구성 요소 외에도
    읽어온 명령어가 저장된 공간을 임시로 기억해 둘 구성 요소나, 명령어를 실행한 결과를 저장해 둘 구성 요소가 필요합니다.
    이렇게 CPU의 동작에 필수적인 저장 공간의 역할을 하는 CPU의 구성 요소를 레지스터(Register) 라고 합니다.

    한편, CPU가 실행할 명령어(Instruction) 들은 수행하는 동작에 따라 조금씩 형태가 다릅니다.
    다양한 명령어의 종류와 각각의 문법에 대해 이어서 자세히 알아보겠습니다.

    



























