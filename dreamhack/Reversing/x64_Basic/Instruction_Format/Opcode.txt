명령 코드,Opcode (Operation Code) :
    명령 코드(Opcode, Operation Code) 는 명령어에서 실제로 어떤 동작을 할지를 나타내는 부분입니다.
    자료를 옮기거나, 산술 연산을 하거나, 자료를 제어하는 등 다양한 종류의 명령 코드가 있습니다.

    명령 코드(Opcode), 기계 코드(Machine Code), 어셈블리 코드(Assembly Code) 등 비슷한 용어가 계속해서 등장하니 혼란을 줄이기 위해 각각에 대해 간단히 용어를 정리하고 다음 단계로 넘어갑시다.

기계 코드(Machine Code) 또는 명령 코드(Opcode) :
    컴파일러가 만드는 결과물인 바이너리를 구성하고 있으며, CPU가 실제로 수행할 작업을 나타내는 숫자입니다.
    디버거를 사용해 프로그램을 살펴보면, 밑에 보이는 결과와 같이 왼쪽의 숫자들처럼 생긴 명령 코드를 확인할 수 있습니다.
    이 명령 코드는 CPU의 종류별로 다른 값일 수 있으며, 명령 코드에 따라 피연산자(Operand)가 필요하기도 합니다.
    뒤에서 자세히 다뤄보겠습니다.
    ex)
        55                   push  rbp
        48 89 e5             mov   rbp,rsp
        48 8d 3d 9f 00 00 00 lea   rdi,[rip+0x9f]
        e8 c6 fe ff ff       call  510 <puts@plt>
        b8 00 00 00 00       mov   eax,0x0
        5d                   pop   rbp
        c3                   ret


어셈블리 코드 (Assembly Code) :
    숫자로 이뤄져 있는 명령 코드는 사람이 구분하고 이해하기 쉽지 않습니다.
    따라서 이것이 어떤 의미를 갖는지 알아보기 쉽도록 문자로 작성된(Mnemonic) 코드입니다. 
    명령 코드를 알아보기 쉽도록 문자로 치환한 것이므로, 앞서 말한 것처럼 명령 코드와 1:1로 대응됩니다.
    뿐만 아니라 명령 코드가 연산할때 사용할 피연산자도 알아보기 쉽습니다.
    명령 코드와 피연산자를 묶어 하나의 명령어(Instruction)가 됩니다.

    어셈블리 코드는 CPU의 동작을 그대로 옮겨놓은 것에 가깝기 때문에 매우 직관적이고 단순한 반면, 
    실제 소스코드와 달리 고차원적인 전체 흐름을 파악하기는 어렵습니다.

    































