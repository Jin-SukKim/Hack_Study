Instructions - jmp, jcc :
    jmp, jcc

    jmp 및 jcc는 피연산자가 가리키는 곳으로 점프한다는 점은 같지만,
    무조건 점프하는 것과(jmp) 조건에 따라 점프의 수행 여부가 달라진다는(jcc) 점에서 중요한 차이가 있습니다.

    특히 jcc가 사용하는 조건은 FLAGS 레지스터의 플래그와 밀접한 관련이 있습니다.
    이 경우 점프 명령어를 수행하기 전에 어떤 산술 연산을 하거나, test, cmp 등의 연산을 수행한 결과로 바뀐 플래그를 바탕으로 점프의 수행 여부를 결정합니다.
    jcc는 명령어의 이름이 아니라, 조건부 jmp를 묶어서 이르는 이름입니다(Jump if condition is met).
    밑에 정리한 바와 같이 특정한 결과에 따라 점프의 수행 여부가 정해집니다.
    ex) // j = jump
        jmp    location

        je     location      ; equal (ZF=1)
        jne    location      ; not equal (ZF=0)

        jg     location      ; >   signed
        jge    location      ; >=  signed
        jl     location      ; <   signed
        jle    location      ; <=  signed
        ja     location      ; >   unsigned
        jb     location      ; <   unsigned

        js     location      ; negative (SF=1)
        jns    location      ; not negative (SF=0)
    
    위의 예시 중 첫번째는 cmp 명령어의 결과를 바탕으로 jle 명령어를 수행하는 내용입니다.
    rbp 레지스터가 가리키는 주소에서 -0x2c만큼 떨어진 곳에 들어있는 값과 0x47을 비교하여,
    이 값이 0x47보다 작거나 같으면(less or equal) 0x400a31로 점프합니다.

    ex)
        cmp   dword ptr [rbp-0x2c], 0x47
        jle   400a31
        
        test  rax,rax
        je    4006c5

    두번째 예제는 test 명령어를 수행한 결과로 je의 수행 여부가 정해지는 내용입니다.
    만약 rax가 0이면 test 명령어를 수행한 뒤 ZF=1이 되므로, je 명령어에 의해 0x4006c5로 점프하게 됩니다.
    주어진 조건을 만족하지 않을 경우에는 jcc를 수행하지 않고 다음으로 넘어갑니다.


Instruction - Stack Operations :
    이어서 알아볼 명령어는 스택과 관련된 명령어들입니다.
    프로그램이 동작하는 동안 함수 안에서 지역 변수(Local Variables)를 사용할 때가 많습니다. 
    지역 변수는 함수가 종료되고 나면 더 이상 참조되거나 사용되지 않기 때문에, 
    함수 안에서는 마치 연습장과 같은 역할을 합니다. 
    
    지역 변수들은 스택(Stack)에 저장됩니다.
    지역 변수를 사용하기 위한 '연습장’인 스택은 레지스터가 아닌 메모리에 준비됩니다.
    새로운 함수가 시작될 때 스택이 준비되고(Function Prologue), 함수가 종료될 때 스택이 정리됩니다(Function Epilogue). 
    이 과정은 레지스터들 중 스택의 가장 윗부분을 가리키는 rsp 레지스터와 밀접한 관련이 있습니다.

    rsp revisit :
        레지스터들에 대해 공부할 때 잠깐 다뤘던 rsp 레지스터를 먼저 살펴봅시다.
        rsp는 스택 포인터(Stack Pointer)로, 스택의 가장 위쪽 주소를 가리킵니다.
        스택에 새로운 데이터를 담을수록 스택은 점점 길어집니다.
        이 때, 스택Stack이라는 이름에서 알 수 있는 것처럼 마지막으로 담은 데이터 위에 새로운 데이터를 쌓아가는 방식으로 길어지게 됩니다.
        따라서 스택의 가장 위쪽은 마지막으로 데이터가 담긴 메모리 주소입니다.
        다시 말해 rsp는 스택의 가장 위쪽을 가리키므로, 마지막으로 데이터가 추가된 위치를 저장하는 레지스터입니다.

        스택이 자라는 방향은 아키텍처에 따라 다릅니다.
        아키텍처에 따라 새로운 데이터가 추가될 때 더 높은 메모리 주소에 쌓이는 경우도 있고, 그 반대의 경우도 있습니다.
        우리가 강좌에서 다루는 Intel x86-64 아키텍처의 경우는 그 반대의 경우에 해당됩니다.

        즉 Intel x86-64 아키텍처에서 스택은 낮은 주소(=더 작은 숫자)를 향해 자라기 때문에 스택이 자랄수록 rsp에 저장된 메모리 주소는 점점 낮아집니다.


Function Prologue/Epilogue :
    함수가 시작될 때(Function Prologue) 에는 rsp 레지스터에 들어있는 주소에서 충분한 값을 빼줍니다.
    이렇게 하면 rsp가 가리키는 곳을 낮은 주소로 당겨오는 효과가 있기 때문에, 
    함수 안에서 지역 변수를 사용하기 위한 공간을 확보하는 효과가 생깁니다. 
    이 때 rsp를 얼마나 내릴 것인지, 즉 스택을 어느 정도의 크기로 확보할 것인지는 컴파일러가 최적화를 통해 결정합니다.

    반대로 함수가 끝날 때(Function Epilogue) 에는 프롤로그에서 빼준 값 만큼 다시 rsp에 더해줍니다. 
    이렇게 스택 포인터를 복원하면 함수에서 사용했던 스택을 정리하는 효과를 볼 수 있습니다.

    이 점을 기억하면서 Stack Operation인 push와 pop에 대해 알아봅시다.


push, pop :
    push와 pop 명령어는 스택에 새로운 데이터를 추가하거나 뺄 때 사용합니다.

    스택에 새로운 데이터를 넣는 명령어는 push입니다.
    새로운 데이터가 들어가면 rsp 레지스터도 새로운 데이터가 들어간 주소를 가리켜야 하므로,
    밑의 예시에서와 같이 push는 1) rsp가 가리키는 주소에서 들어갈 데이터의 사이즈만큼 빼서 데이터가 들어갈 크기를 확보한 뒤 
    2)데이터를 복사하는 과정과 동일한 효과를 냅니다.

    pop은 push와 반대로 스택의 최상단에 있는 데이터를 빼내는 명령어이므로, 그 반대 순서로 진행하는 것과 동일한 효과를 냅니다.
    ex)
        push   rdi           ; sub  rsp,8
                             ; mov  [rsp],rdi

        pop    rdi           ; mov  rdi,[rsp]
                             ; add  rsp,8


Instruction - Procedure Call Instructions :
    마지막으로 알아볼 명령어는 함수를 호출하는 명령어와 함수를 종료하는 명령어입니다.

call :
    함수를 실행할 때에는 call 명령어가 쓰입니다. 
    call은 피연산자로 실행할 함수의 주소를 받습니다.

    한편, call로 호출한 함수가 종료되고 나면 다음 명령어를 실행할 장소로 돌아와야 합니다. 
    즉 call을 사용한 이후에 실행되어야 하는 명령어의 주소가 어디인지 기억해둬야 함수가 종료된 다음에도 프로그램의 실행을 이어갈 수 있습니다. 
    이렇게 함수의 종료 이후에 돌아와야 하는 주소, 즉 리턴할 때 참조해야 할 주소를 Return Address라고 부릅니다. 
    call의 수행은 Return Address를 스택에 push해 둔 다음, 호출할 함수의 주소로 jmp하는 것과 동일한 원리로 실행됩니다.

ret :
    호출된 함수가 마지막으로 사용하는 명령어는 ret입니다.
    이 명령어는 함수를 종료한 뒤 Return Address로 돌아가는 역할을 합니다.
    따라서 스택에 들어있는 Return Address를 pop하여 명령어 포인터인 rip레지스터에 넣은 다음, 그 주소로 jmp하는 것과 동일한 효과를 냅니다.

    ret 명령어를 사용하기 전까지는 함수에서 스택을 모두 정리한 상태입니다. 
    따라서 Function Epilogue까지 마무리되어 있으므로 rsp는 함수가 시작하기 직전에 스택에 넣은 값을 가리키고 있습니다. 
    이 값은 call할때 스택에 넣었던 Return Address이므로, pop을 하면 스택에서 Return Address를 가져오게 됩니다.
    ex)
        call   location      ; push retaddr
                             ; jmp  location

        ret                  ; pop  rip
                             ; jmp  rip


더 많은 명령어 : https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html

