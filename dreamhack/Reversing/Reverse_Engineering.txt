리버싱 : 
    리버스 엔지니어링(Reverse Engineering)은 이미 만들어진 시스템이나 장치에 대한 해체나 분석을 거쳐 그 대상 물체의 구조와 기능, 디자인 등을 알아내는 일련의 과정을 말합니다.
    간단히 정리하면 '완성품의 설계도 없이 구조와 동작 과정을 알아내는' 모든 단계를 말합니다. 자료나 책에 따라 '역공학'이라고 지칭하기도 하지만, 이 강의 자료에서는 편의상 '리버스 엔지니어링'을 짧게 줄여 널리 통용하는 말인 '리버싱'으로 용어를 통일하겠습니다.

    Static Analysis (정적 분석 방법) :
        프로그램을 실행시키지 않고 분석
        정적 분석을 위해서는 실행 파일을 구성하는 모든 요소, 대상 실행 파일이 실제로 동작할 CPU 아키텍처에 해당하는 어셈블리 코드를 이해하는 것이 필요합니다.

    Dynamic Analysis (동적 분석 방법) :
        프로그램을 실행시켜서 입출력과 내부 동작 단계를 살피며 분석
        동적 분석을 하기 위해서는 실행 단계별로 자세한 동작 과정을 살펴봐야 하므로, 환경에 맞는 디버거를 이용해 단계별로 분석하는 기술을 익혀야 합니다.


Compiling Process :
    Source Code → Binary Code

    사람이 이해할 수 있는 소스 코드를 컴퓨터가 이해할 수 있는 형태인 프로그램(이하 바이너리)로 바꾸려면 컴파일을 거쳐야 합니다.
    이러한 과정에 사용되는 프로그램을 '컴파일러’라고 부릅니다.

    컴파일러가 소스 코드를 바이너리로 변환하기 위해서는 몇 가지 단계를 거칩니다.

    Source Code → Intermediate Language → Assembly Code → Binary Code

    먼저 원본 소스 코드는 사람이 알아보기 쉽도록 각종 주석이나 매크로 등을 포함하고 있습니다. 
    또는 참조할 헤더 파일을 포함하고 있기도 합니다. 이와 같은 정보는 실제로는 코드가 아니라 참조를 위해 붙여둔 정보이므로,
    컴파일러는 이를 모두 미리 처리해서 다음 단계에서 변환할 준비를 마칩니다.

    이렇게 준비된 '중간 언어’를 컴파일러가 분석하고 최적화하여 어셈블리 코드로 만들어 줍니다.

    어셈블리 코드는 컴퓨터가 이해할 수 있는 기계 코드를 사람이 알아보기 쉽게 명령어(Instruction) 단위로 표현한 것입니다.
    즉 어셈블리 코드와 기계 코드는 1:1 대응이 가능하므로, 최종적으로 어셈블리 코드가 기계 코드로 번역되는 과정을(어셈블, Assemble) 거쳐 실행 가능한 바이너리가 완성됩니다.

    Source Code ← ??? ← Binary Code

    바이너리를 분석해서 어떤 방식으로 동작하는지, 나아가 어떤 소스 코드를 바탕으로 만들어졌는지를 알아내려면 분석가는 컴파일러가 수행하는 과정을 역으로 진행해야 합니다.
    따라서 주어진 바이너리를 어셈블리 코드로 변환하고, 변환된 어셈블리 코드를 분석하면 대상 바이너리가 어떤 식으로 동작하는지 알 수 있게 됩니다. 
    이렇게 바이너리 코드를 어셈블리 코드로 변환하는 과정을 Disassemble(디스어셈블) 이라고 합니다.

    Source Code ← Reverse Engineering ← Assembly Code ← Binary Code




























