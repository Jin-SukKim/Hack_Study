hello world - 디스어셈블리 결과 살펴보기 :
    ex)
        7FF6ED801000 | 48:83EC 28       | sub rsp,28                          |
        7FF6ED801004 | 48:8D0D 15120000 | lea rcx,qword ptr ds:[7FF6ED802220] | 00007FF6ED802220:"hello world!\n"
        7FF6ED80100B | FF15 5F110000    | call qword ptr ds:[<&puts>]         |
        7FF6ED801011 | 33C0             | xor eax,eax                         |
        7FF6ED801013 | 48:83C4 28       | add rsp,28                          |
        7FF6ED801017 | C3               | ret                                 |

sub rsp, 28 :
    해당 명령어는 rsp에서 0x28만큼 빼 함수 내부에서 사용할 스택의 용량을 확보하는 명령어입니다.
    보통 함수에서 지역변수로 선언한 값들이 스택에 위치하게 되는데, 
    이 지역변수들이 저장될 공간을 컴파일러가 미리 계산하여 함수 시작부분에 확보를 해두는 것입니다.

    잘 생각해보면 이상한 점이 있는데 소스코드와 디스어셈블 결과를 살펴보면 지역변수를 사용하는곳이 전혀 없습니다. 
    그런데도 0x28만큼 스택을 확보한 이유는 shadow space 또는 home space 라 불리는 공간을 확보하고 성능향상을 위한 메모리 사용 최적화가 적용되었기 때문입니다.
    해당 내용에 관해서는 다른 강좌에서 다루도록 하겠습니다.

lea rcx,qword ptr ds:[7FF6ED802220] :
    해당 명령어는 rcx에 0x7FF6ED802220 값을 저장합니다.
    0x7FF6ED802220는 주소값이며 x64dbg가 생성한 디스어셈블 결과의 코멘트 부분을 확인해보면 puts의 첫번째 인자인 hello world!\n 가 위치한 주소인 것을 알 수 있습니다.

    x64에는 많은 레지스터들이 존재하는데, puts의 첫번째 인자를 rcx에 넣은 이유는 사람들이 정해둔 규칙이 있기 때문입니다. 
    이를 calling convention, 한국어로 함수 호출 규약이라 합니다.

    함수 호출 규약은 한 가지가 아니며 여러 종류가 있는데 이 강좌에서는 보편적으로 사용되며 아래 예제에서도 사용된 64비트 Windows의 함수 호출 규약에 대해 설명합니다.

    
64비트 windows의 함수 호출 규약 :
    windows의 함수 호출 규약은 다음과 같은 순서로 첫 4개의 인자를 받습니다.

        1) rcx(ecx, cx, …)
        2) rdx(edx, dx, …)
        3) r8(r8d, r8w, …)
        4) r9(r9d, r9w, …)

    이후 5번째 인자부터는 스택에 넣게 됩니다. 
    함수의 리턴값은 rax(eax, ax, …)에 저장됩니다.

    8개의 인자를 받는 함수의 디스어셈블 결과를 살펴보면 하단과 같이 나오게 됩니다.
    살펴보면 rcx(ecx), rdx(edx), r8(r8d), r9(r9d)에 4번째 인자까지 넣고 5~8번째 인자는 미리 확보해둔 스택 영역에 저장하는것을 확인할 수 있습니다.

    ex)
        7FF611801040 | sub rsp,48                            |
        7FF611801044 | mov dword ptr ss:[rsp+38],8           |
        7FF61180104C | mov dword ptr ss:[rsp+30],7           |
        7FF611801054 | mov dword ptr ss:[rsp+28],6           |
        7FF61180105C | mov dword ptr ss:[rsp+20],5           |
        7FF611801064 | mov r9d,4                             |
        7FF61180106A | mov r8d,3                             |
        7FF611801070 | mov edx,2                             |
        7FF611801075 | mov ecx,1                             |
        7FF61180107A | call consoleapplication1.7FF611801000 |
        7FF61180107F | xor eax,eax                           |
        7FF611801081 | add rsp,48                            |
        7FF611801085 | ret                                   |


call qword ptr ds:[<&puts>] :
    해당 명령어는 puts를 호출하는 명령어 입니다.

xor eax,eax : // ax는 주로 함수의 return 값을 저장하기 위해 사용
    해당 명령어는 eax를 0으로 만들어주는 명령어입니다. 
    main함수의 리턴값을 0으로 설정해놨기 때문에 함수의 리턴값을 의미하는 eax 레지스터를 0으로 설정하는 것입니다.
    이때 mov eax, 0 를 쓰지않고 xor을 통해서 하는 이유는 명령어의 길이가 짧고(5 bytes vs 2 bytes) CPU에서 좀더 빠르게 실행시키기 때문입니다.

    짧아서 사용하는 이유 :
        mov eax, 0와 xor eax, eax 명령어를 x86 16진수 기계어로 나타내면 다음과 같습니다.

        mov eax, 0	;	B8 00 00 00 00
        xor eax, eax	;	31 C0
        
        보시듯이 B8 00 00 00 00는 총 5바이트 31 C0는 2바이트입니다.

add rsp,28 :
    해당 명령어는 함수 시작시 확보해두었던 스택을 정리하는 명령어입니다.

ret :
    해당 명령어는 함수의 실행을 마치고 리턴하기 위해 사용하는 명령어입니다.
    call 명령어를 통해 스택에 저장된 리턴 어드레스로 돌아갑니다.


ex)
    7FF6ED801000 | 48:83EC 28       | sub rsp,28                          |
    7FF6ED801004 | 48:8D0D 15120000 | lea rcx,qword ptr ds:[7FF6ED802220] | 00007FF6ED802220:"hello world!\n"
    7FF6ED80100B | FF15 5F110000    | call qword ptr ds:[<&puts>]         |
    7FF6ED801011 | 33C0             | xor eax,eax                         |
    7FF6ED801013 | 48:83C4 28       | add rsp,28                          |
    7FF6ED801017 | C3               | ret                                 |

    





















