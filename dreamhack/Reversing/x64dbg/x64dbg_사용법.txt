x64dbg :
    x64dbg는 윈도우 디버거입니다.
    UI나 기능등 많은 면에서 ollydbg를 닮았으며, ollydbg는 소스 코드가 공개되어 있지 않고 32비트만 지원하는데
    반해 x64dbg는 오픈소스이고 32비트와 64비트 둘 다 지원합니다.

    x64dbg는 강력한 디스어셈블 엔진을 가지고 있으며 그래프 뷰, 플러그인 등 리버싱에 있어서 편리한 여러가지 기능들이 내장되어 있습니다.


x64dbg의 실행 :
    x64dbg는 https://x64dbg.com/ 에서 다운받을 수 있습니다.
    스냅샷의 형태로 항상 가장 최신 버전의 프로그램을 제공합니다.
    다운받아 압축을 푼 후 release 폴더에 들어가면 x96dbg.exe 가 있습니다. 
    해당 파일을 실행시키면 우측 하단과 같은 프로그램 창이 뜨는데 자신이 분석할 프로그램이 32비트냐 64비트냐에 따라 각각 x32dbg와 x64dbg를 선택하면 됩니다.
    드림핵 강의에서는 대부분 64비트 프로그램에 대한 리버싱을 다루기 때문에 대부분의 상황에서는 x64dbg를 선택하여 진행하면 됩니다.


x64dbg의 시작화면 :
    x64dbg에 분석할 실행파일을 드래그 앤 드랍하면 오른쪽과 비슷한 화면을 볼 수 있습니다.
    이번 강의에서는 x64dbg의 기본적인 설정, 사용 방법에 대해 알아봅니다.


x64dbg의 사용법 - 기본적인 UI :
    x64dbg의 상단바는 아래와 같습니다. 
    그중 필수적인 기능은 다음과 같습니다.

    1) 분석할 프로그램을 엽니다.
    2) 프로그램을 재시작합니다.
    3) 프로그램을 완전히 정지합니다.
    4) 프로그램을 실행(재개)합니다.
    5) 프로그램을 일시정지 시킵니다. 실행중인 상태에서 임의로 중단시키고 싶을 때 사용합니다.
    6) 어셈블리 코드를 한 줄 실행합니다. 만약 call을 실행하려 하면 call한 함수 내부로 진입합니다. (Step Into)
    7) 어셈블리 코드를 한 줄 실행합니다. 만약 call을 실행하려 하면 call한 함수가 ret 명령어를 실행할 때까지(리턴할 때까지) 실행한 다음 멈춥니다. (Step Over)

    x64dbg에서 가장 자주 보게 될 CPU 탭의 구성은 사진과 같습니다.

    1) 주소와 어셈블리 코드와 x64dbg나 사용자가 단 주석이 여기에 표시됩니다.
        a) 주소
        b) 옵코드
        c) 기계어 코드
        d) 주석

        의 순서로 표시됩니다.
        주소 부분에는 함수명을 알고 있을경우 함수명이 표시됩니다.
        현재 rip(instruction pointer)가 가리키는 부분은 검은색 배경으로 표시해주며 브레이크 포인트가 걸려있는 경우 빨간색 배경으로 표시됩니다.

        주석 부분에 x64dbg가 주석을 다는 경우로는 여러 가지가 있습니다.
        가장 흔한 경우는 어셈블리 코드에서 가리키는 주소가 문자열이거나 익스포트된 함수일 경우입니다.
        해당 경우에는 주석에 문자열이나 함수의 이름을 표시해줍니다.

        이곳에서 jmp나 call같은 실행 흐름을 바꾸는 어셈블리 코드를 선택하고 enter 키를 누르면 해당 부분으로 이동합니다.
        되돌아올땐 -키를 사용합니다.

        상당히 편리한 기능이니 이 두 단축키는 외우는게 좋습니다.

    2) 현재 CPU의 레지스터 상태가 여기에 표시됩니다.
        아래로 스크롤하면 xmm과 같은 부동소수점 관련 레지스터의 상태도 볼 수 있습니다.

    3) 1번창에서 선택한 부분에 대한 정보가 여기에 표시됩니다.
        이 부분에는 1번창 주석에 표시되지 않는 내용까지 상세히 표시됩니다.

    4) 현재 레지스터 상태중 rcx, rdx, r8, r9값을 보여줍니다.
        2번창과 별도로 보여주는 이유는 해당 레지스터 순서가 Windows 64비트 운영체제에서 
        기본적으로 사용하는 함수 호출 규약(Calling Convention)의 인자 순서이기 때문입니다.
        이를 통해 call 명령어에서 쉽게 인자로 어떤값들이 넘어가는지 확인할 수 있습니다.

    5) 핵스값을 보여줍니다.
        프로그램 실행에 따라 자동으로 보여주지는 않으며 다른 창에서 헥스값을 보는 명령을 내리면 이 창에서 보여지게 됩니다.

    6) 스택값을 보여줍니다.
        기본적으로 rsp값을 따라서 보여주게 됩니다.
        가운데 부분의 파란색 선은 한 함수의 스택 영역을 나타냅니다.
         다만 휴리스틱한 방법을 통해 x64dbg가 추측하여 보여주는 것이기 때문에 부정확할때도 있습니다.


x64dbg의 사용법- 브레이크 포인트 :
    브레이크 포인트란 리버싱에 있어서 필수적인 도구 중 하나로, 
    프로그램 실행 중 원하는 지점이나 특정 조건을 만족할 경우 프로그램을 멈추게 할 수 있는 기능입니다.
    이를 통해 리버서는 프로그램의 시작지점부터가 아닌 분석을 원하는 특정 지점부터 분석을 하는게 가능합니다.

    브레이크 포인트는 크게 종류를 3개로 나눌 수 있습니다.
        1) 소프트웨어 브레이크 포인트
        2) 하드웨어 브레이크 포인트
        3) 메모리 브레이크 포인트

    해당 브레이크 포인트는 종류별로 특징을 가지는데 이에 대해서는 나중에 다른 강의에서 설명하겠습니다.

    x64dbg는 3가지 종류의 브레이크 포인트 모두를 지원하며 브레이크 포인트에 조건을 설정하는 것 또한 가능합니다.
    디스어셈블창, 헥스덤프창, 스택창에서 오른쪽 클릭을 했을때 나오는 메뉴를 통해 브레이크 포인트를 걸 수 있습니다.
    
    대부분의 경우에서는 소프트웨어 브레이크 포인트를 걸게 되는데, 보통 F2 단축키를 통해 브레이크 포인트를 걸게 됩니다.
    F2 단축키는 굉장히 많이 쓰게 되는 단축키이기 때문에 외우는 것을 추천합니다.

    x64dbg에서 설정한 브레이크포인트는 종류에 상관없이 중단점탭에서 확인할 수 있습니다.
    오른쪽 클릭시 나오는 메뉴를 통해 브레이크 포인트를 비활성화 하거나 삭제하거나 조건을 편집할 수 있습니다.


x64dbg의 사용법 - 필수 단축키 :
    x64dbg에 있는 여러 가지 기능들을 편하게 쓰기 위해서는 단축키를 외우는 것이 중요합니다.
    여러가지 단축키 중 외워서 사용할 경우 매우 편리한 몇몇 단축키들을 소개합니다.

    1) F2
        소프트웨어 브레이크 포인트를 걸 때 사용하는 단축키입니다.
        이미 브레이크 포인트가 걸려있는 주소에서 누를 경우 브레이크 포인트를 삭제합니다.

    2) F7
        어셈블리 코드를 한 줄 실행합니다.
        만약 call을 실행하려 하면 call한 함수 내부로 진입합니다.

    3) F8
        어셈블리 코드를 한 줄 실행합니다.
        만약 call을 실행하려 하면 call한 함수가 ret 명령어를 실행할 때까지(리턴할 때까지) 실행한 다음 멈춥니다.

    4) F9
        프로그램의 실행을 재개합니다.

    5) ctrl + g
        현재 창이 보여주는 주소를 바꿉니다.
        디스어셈블 창에서 사용하면 디스어셈블 창이 해당 주소로 가고, 헥스덤프 창에서 사용하면 헥스덤프 창이 해당 주소로 가는 식입니다.
        주소값 말고도 간단한 사칙 연산이나 함수명도 인식합니다.
    
    6) -, +
        이전 또는 다음 주소로 이동합니다.
        call 이나 jmp 명령어의 주소로 이동했을 때, 이전 주소로 돌아가거나 다시 이동할 때 자주 쓰입니다.

    7) <enter> 키
        call이나 jcc와 같은 PC(program counter)를 변경시키는 명령어를 선택한 상태에서 누르면 해당되는 주소로 이동합니다.
        ex) call 0x11223344 → 0x11223344로 이동

    8) <space> 키
        선택한 어셈블리어를 수정합니다.
        잔존 바이트를 NOP로 채우기를 선택하면 수정된 코드 길이가 기존 코드의 길이보다 작을 때 남는 공간을 NOP으로 자동으로 채워줍니다.

        // NOP : 특별한 경우, 그 부분을 공백처리하기 위해 사용. 그 명령어 수행부분을 CPU에서 쉬어가도록 지정한 것.
        // CPU가 쉬어간다는 말은 곧 명령어 처리부분을 쓸데없이 낭비한다는 의미이기 때문에 nop은 사용하지 않는 편이 좋다.
















