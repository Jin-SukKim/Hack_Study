Bypassing SSP - 2 :
    ssp_fork1.c는 fork 함수를 사용하여 자식 프로세스를 생성하는 코드입니다.
    ex)
        // gcc -o ssp_fork1 ssp_fork1.c -m32
        #include <stdio.h>
        #include <sys/types.h>
        #include <unistd.h>
        int main()
        {
                pid_t pid;
                
                pid = fork(); //fork
                if(pid == -1) { //fork error
                        printf("error\n");
                }
                
                if(pid == 0) { // child
                        printf("Im child!\n");
                        printf("Process ID : %d\n", getpid());
                }
                
                else{ //parent
                        printf("Im parent!\n");
                        printf("Process ID : %d\n", getpid());
                }
        }

    fork 함수는 부모 프로세스의 TLS 영역과 스택 메모리 등을 복제해 자식 프로세스를 생성합니다.
    따라서 부모와 자식 프로세스의 스택 카나리 값은 동일합니다.

    다음은 gdb를 이용해 ssp_fork1의 부모 프로세스와 자식 프로세스의 카나리 값을 확인한 결과입니다.

    부모 프로세스
    ex)
        (gdb) set detach-on-fork off
        (gdb) set follow-fork-mode parent
        (gdb) x/60i main
            0x8048593 <main+125>:	lea    eax,[ebx-0x195f]
            0x8048599 <main+131>:	push   eax
        =>  0x804859a <main+132>:	call   0x80483c0 <puts@plt>
        
        (gdb) x/s $eax
        0x80486a1:	"Im parent!"
        
            0x80485bf <main+169>:	mov    edx,DWORD PTR [ebp-0xc]
        =>  0x80485c2 <main+172>:	xor    edx,DWORD PTR gs:0x14
        
        (gdb) p $edx
        $3 = 0x7812a500 ; 스택 카나리 값

    자식 프로세스
    ex)
        (gdb) info thread
            Id   Target Id         Frame
            2.1  process 13253 "test" 0xf7fd5079 in ?? ()
        (gdb) thread 2.1
        (gdb) x/60i main
            0x8048567 <main+81>:	lea    eax,[ebx-0x197a]
            0x804856d <main+87>:	push   eax
        =>  0x804856e <main+88>:	call   0x80483c0 <puts@plt>
        
        (gdb) x/s $eax
        0x8048686:	"Im child!"

            0x80485bf <main+169>:	mov    edx,DWORD PTR [ebp-0xc]
        =>  0x80485c2 <main+172>:	xor    edx,DWORD PTR gs:0x14
        
        (gdb) p $edx
        $14 = 0x7812a500 ; 스택 카나리 값

    부모 프로세스와 자식 프로세스의 스택 카나리 값이 동일하다는 것을 알 수 있습니다.



































