Stack Smashing Protector(SSP) :
    앞서 NX bit와 ASLR 보호기법을 우회하여 프로그램을 공격하는 방법에 대해 배워 보았습니다.

    NX bit와 ASLR 보호 기법은 메모리 커럽션 취약점의 공격을 어렵게 하기 위해 도입된 보호 기법입니다. 
    반면 Stack Smashing Protector(SSP)는 메모리 커럽션 취약점 중 스택 버퍼 오버플로우 취약점을 막기 위해 개발된 보호 기법입니다.
    SSP는 스택 버퍼와 스택 프레임 포인터 사이에 랜덤 값을 삽입하여 함수 종료 시점에서 랜덤 값 변조 여부를 검사함으로써 스택이 망가뜨려졌는지를 확인합니다.

    이번 장에서는 SSP에 대해 알아보고, SSP를 우회할 수 있는 방법에 대해 살펴보도록 하겠습니다.

    SSP 보호 기법이 적용되어 있다면 함수에서 스택을 사용할 때 카나리가 생성됩니다.
    마스터 카나리는 main 함수가 호출되기 전에 랜덤으로 생성된 카나리를 스레드 별 전역 변수로 사용되는 TLS(Thread Local Storage)에 저장합니다.
    TLS 영역은 _dl_allocate_tls_storage 함수에서 __libc_memalign 함수를 호출하여 할당됩니다.

    TLS는 tcbhead_t 구조체를 가지는데, 다음과 같은 멤버 변수들이 존재합니다.
    ex)
        typedef struct
        {
            void *tcb;		/* Pointer to the TCB.  Not necessarily the
                        thread descriptor used by libpthread.  */
            dtv_t *dtv;
            void *self;		/* Pointer to the thread descriptor.  */
            int multiple_threads;
            uintptr_t sysinfo;
            uintptr_t stack_guard;
            uintptr_t pointer_guard;
            int gscope_flag;
        #ifndef __ASSUME_PRIVATE_FUTEX
            int private_futex;
        #else
            int __glibc_reserved1;
        #endif
            /* Reservation of some values for the TM ABI.  */
            void *__private_tm[4];
            /* GCC split stack support.  */
            void *__private_ss;
        } tcbhead_t;

    security_init 함수는 _dl_setup_stack_chk_guard 함수에서 반환한 랜덤 카나리 값을 설정합니다. 
    ex)
        static void
        security_init (void)
        {
            /* Set up the stack checker's canary.  */
            uintptr_t stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);
        #ifdef THREAD_SET_STACK_GUARD
            THREAD_SET_STACK_GUARD (stack_chk_guard);
        #else
            __stack_chk_guard = stack_chk_guard;
        #endif
    
    ex)
        void *
        internal_function
        _dl_allocate_tls_storage (void)
        {
            void *result;
            size_t size = GL(dl_tls_static_size);
        #if TLS_DTV_AT_TP
            /* Memory layout is:
                [ TLS_PRE_TCB_SIZE ] [ TLS_TCB_SIZE ] [ TLS blocks ]
                        ^ This should be returned.  */
            size += (TLS_PRE_TCB_SIZE + GL(dl_tls_static_align) - 1)
                & ~(GL(dl_tls_static_align) - 1);
        #endif
            /* Allocate a correctly aligned chunk of memory.  */
            result = __libc_memalign (GL(dl_tls_static_align), size);

    THREAD_SET_STACK_GUARD 매크로는 TLS 영역의 header.stack_guard에 카나리의 값을 삽입하는 역할을 합니다.
    ex)
        #define THREAD_SET_STACK_GUARD(value) \
            THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)

    
































