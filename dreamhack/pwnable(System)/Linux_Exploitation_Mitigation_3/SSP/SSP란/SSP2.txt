SSP :
    master1.c는 256 바이트 배열 buf를 할당하고 read 함수를 통해서 입력받는 예제입니다. 
    ex)
        // gcc -o master1 master1.c
        #include <stdio.h>
        #include <unistd.h>
        int main()
        {
            char buf[256];
            read(0, buf, 256);
        }

    SSP 보호기법이 적용되어 있고 지역 변수를 사용하므로 main 함수에서 카나리를 삽입하고 검사하는 루틴이 존재합니다.
    ex)
        $ gdb -q ./master1
        Reading symbols from ./master1...(no debugging symbols found)...done.
        (gdb) disas main
        Dump of assembler code for function main:
            0x0804846b <+0>:	lea    ecx,[esp+0x4]
            0x0804846f <+4>:	and    esp,0xfffffff0
            0x08048472 <+7>:	push   DWORD PTR [ecx-0x4]
            0x08048475 <+10>:	push   ebp
            0x08048476 <+11>:	mov    ebp,esp
            0x08048478 <+13>:	push   ecx
            0x08048479 <+14>:	sub    esp,0x114
            0x0804847f <+20>:	mov    eax,gs:0x14
            0x08048485 <+26>:	mov    DWORD PTR [ebp-0xc],eax
            ...
        End of assembler dump.
        (gdb) b *0x08048485
        Breakpoint 1 at 0x8048485
        (gdb) r
        Starting program: /Linux_Exploitation_Mitigation/master1 
        
        Breakpoint 1, 0x08048485 in main ()
        (gdb) p/x $eax
        $1 = 0x4dc1e800
        (gdb) 

    0x8048485에서의 eax 레지스터를 보면 카나리의 값이 0x4dc1e800인 것을 확인할 수 있습니다. 
    find 명령어를 통해 마스터 카나리의 위치를 찾아보겠습니다.
    ex)
        (gdb) info proc map
        process 116985
        Mapped address spaces:
            Start Addr   End Addr       Size     Offset objfile
            0x8048000  0x8049000     0x1000        0x0 ~/master1
            0x8049000  0x804a000     0x1000        0x0 ~/master1
            0x804a000  0x804b000     0x1000     0x1000 ~/master1
            0xf7dff000 0xf7e00000     0x1000        0x0 
            0xf7e00000 0xf7fb0000   0x1b0000        0x0 /lib/i386-linux-gnu/libc-2.23.so
            0xf7fb0000 0xf7fb2000     0x2000   0x1af000 /lib/i386-linux-gnu/libc-2.23.so
            0xf7fb2000 0xf7fb3000     0x1000   0x1b1000 /lib/i386-linux-gnu/libc-2.23.so
            0xf7fb3000 0xf7fb6000     0x3000        0x0 
            0xf7fd3000 0xf7fd4000     0x1000        0x0 
            0xf7fd4000 0xf7fd7000     0x3000        0x0 [vvar]
            0xf7fd7000 0xf7fd9000     0x2000        0x0 [vdso]
            0xf7fd9000 0xf7ffc000    0x23000        0x0 /lib/i386-linux-gnu/ld-2.23.so
            0xf7ffc000 0xf7ffd000     0x1000    0x22000 /lib/i386-linux-gnu/ld-2.23.so
            0xf7ffd000 0xf7ffe000     0x1000    0x23000 /lib/i386-linux-gnu/ld-2.23.so
            0xfffdd000 0xffffe000    0x21000        0x0 [stack]
        (gdb) find 0xf7dff000, +4096, 0x4dc1e800
        0xf7dff714
        1 pattern found.
        (gdb) x/wx 0xf7dff714
        0xf7dff714:	0x4dc1e800
        (gdb) 

    master1 프로세스의 메모리 맵 중 TLS 영역인 0xf7dff000 - 0xf7e00000의 header.stack_guard에 카나리가 존재하는 것을 확인할 수 있습니다.
    이는 gs:0x14를 접근함으로써 참조할 수 있습니다.

    































