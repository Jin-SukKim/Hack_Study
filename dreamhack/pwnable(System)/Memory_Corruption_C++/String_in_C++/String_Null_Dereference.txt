String NULL Dereference :
    string과 관련된 또 다른 예제를 알아보도록 하겠습니다.

    string-null에서는 환경변수 TMP 를 가져와서 string으로 생성한 후, 생성된 string이 비어 있지 않을 경우 조건문을 통과합니다.
    그러나 환경변수 TMP 가 존재하지 않는다면 NULL을 바탕으로 string을 생성하게 됩니다.
    이 경우, string 내부적으로 NULL Dereference가 발생하게 됩니다.

    NULL Dereference의 경우 단일 버그로 사용될 수 없지만, 
        - 주소를 통해 그 값에 접근하는 것을 역참조(dereference)라고 합니다. 역참조 : 주소를 통해 값에 접근한다. 선언할 때 붙인 *과 선언한 후에 붙이는 *은 다른 연산을 수행합니다
        - null pointer : 어떠한 것도 가리키지 않는 포인터
        - 따라서 접근 시 보통 프로그램이 비정상적 종료 됩니다   
        ex)
            int *p = 0; // NULL
            *p = 1; // NULL Dereference
    그러나 현재 대부분의 운영 체제는 NULL 페이지를 맵핑하지 못하게 하였기 때문에 최신 운영 체제 환경에서는 공격이 힘들거나 단순하게 서비스 거부만 일으킬 수 있습니다.
    ex)
        // g++ -o string-null string-null.cpp
        #include <cstdlib>
        #include <string>
        #include <iostream>
        int main(void) {
            std::string tmp(std::getenv("TMP"));
            if(!tmp.empty()) {
                std::cout << tmp << std::endl;
            }
        }

    ex)
        //unset TMP variable
        $ ./string-null
        terminate called after throwing an instance of 'std::logic_error'
            what():  basic_string::_M_construct null not valid
        Aborted (core dumped)
        
        //set TMP variable
        $ export TMP="dreamhack"
        $ ./string-null
        dreamhack

    




















