Uninitialized memory :
    C뿐만 아니라 C++에서도 변수를 사용할 때 정확히 초기화하지 않으면
    초기화되지 않은 잔여 값으로 인해 의도치 않은 동작이 발생하거나 취약점으로 이어질 수 있습니다.
    먼저 초기화되지 않은 메모리 취약점에 대해 다시 한 번 돌아보겠습니다.
    ex)
        // g++ -o c-1 uninit-1.c
        #include <iostream>
        int main(void) {
            int i;
            
            std::cout << i;
        }

    uninit-1은 int형 변수 i를 선언하고 초기화하지 않은 채 std::cout 함수를 통해 출력하는 단순한 예제입니다.
    변수 i에 할당된 메모리는 프로그래머가 지정한 값으로 초기화되지 않았기 때문에,
    std::cout 함수를 통해 출력할 때 어떠한 값이 출력될 지 알 수 없습니다.
    ex)
        $ ./uninit-1
        4376440

    따라서 스택 메모리의 쓰레기 값이 출력되고, 이를 통해 공격자가 메모리를 릭해 공격에 사용할 수 있습니다.


Uninitialized Variable / Class :
    C++에서 초기화되지 않은 변수로 인한 문제가 가장 많이 발생하는 부분은 생성자입니다.

    클래스의 생성자가 객체의 초기화를 담당하기 때문에, 
    특정 조건에 의해서 초기화되지 않는 멤버 변수가 있다면 문제가 발생할 수 있습니다.
    ex)
        //g++ -o uninit-2 uninit-2.cpp
        #include <iostream>
        class S {   
            int c;
            public:
                int f(int i) const { return i + c; }
        };
        
        int f() {
            S s;
            return s.f(10);
        }
        
        int main(void) {
            int val = f();
            std::cout << val << std::endl;
        }

    uninit-2에서 클래스 S는 멤버 변수 c를 가지고, 함수 f에서 인자로 전달된 정수 값인 i와 c를 더한 후 그 값을 리턴합니다.
    명시적으로 선언된 생성자가 없기 때문에 디폴트 생성자가 생성되고 이는 멤버 변수를 별도로 초기화하지 않습니다.

    따라서 멤버 변수 c는 스택 메모리에 있는 잔여값이 저장되고, s.f(10)이 호출될 때 참조됩니다. 
    이로 인해 특정 스택 상황에서 메모리 릭이 가능하게 됩니다.
    ex)
        $ ./uninit-2
        32557
        $ ./uninit-2
        32569
        $ ./uninit-2
        32725

    ex)
        // g++ -o uninit-3 uninit-3.cpp
        #include <iostream>
        
        class S {
        public:
            S() : mem(0), mem_size(0) { }

            S(int mem_size) {
                this->mem_size = mem_size;
                if(mem_size > 0){
                    this->mem = new char[mem_size];
                }
            }

            char *mem;
            int mem_size;
        };
        
        int main(void){
            S s(-1);
            std::cout << s.mem << std::endl;
        }

    uninit-3에서 클래스 S는 char *형 변수 mem과 int형 변수 mem_size를 가지고 있습니다.

    S의 생성자는 mem_size가 인자로 전달된다면 그 값만큼 메모리를 할당하는 동작을 수행합니다.

    그러나 이는 mem_size 값이 0보다 클 때만 유효하며, 그렇지 않을 경우 mem_size만 초기화되고 mem은 초기화되지 않습니다.

    함수 f에서 s(-1)과 같이 mem_size 값에 음수를 전달하면, mem은 초기화되지 않기 때문에 스택에 있는 잔여 메모리가 쓰여집니다.

    이후 mem 포인터를 참조하는 연산이 있고 공격자가 스택 값을 조작할 수 있다면 이는 임의 주소 쓰기 취약점으로 이어질 수 있습니다.
    ex)
        $ ./uninit-3
        AWAVI��AUATL�%�

    

































