Container Overflow :
    C++에서 반복자(iterator)는 여러 종류의 컨테이너를 일반적으로 순회하고 접근할 수 있도록 하는 문법입니다.

    반복자를 사용할 때 자주 발생하는 취약점 중 하나는 크기 계산을 정확히 하지 않아 발생하는 오버플로우 취약점입니다.
    ex5)
        // g++ -o container-5 container-5.cpp -std=c++11
        #include <iostream>
        #include <vector>
        
        void f(const std::vector<int> &c) {
            for(auto i = c.begin(), e = i + 20; i != e; ++i) {
                std::cout << *i << std::endl;
            }
        }
        
        int main(void) {
            std::vector<int> v;
            
            v.push_back(1);
            v.push_back(2);
            v.push_back(3);
            v.push_back(4);
            v.push_back(5);
            
            f(v);
        }

    container-5에선 int형 벡터인 c를 20만큼 순회합니다.
    그러나 c의 크기가 20을 넘지 않을 경우, e의 위치는 c의 바깥을 가리키게 되어 Out-of-Bound Access가 발생합니다.
    container-5를 실행해보면 다음과 같이 벡터 배열 이후에 존재하고 있는 쓰레기값이 출력되는 것을 확인할 수 있습니다.
    ex5)
        $ ./container-5
        1
        2
        3
        4
        5
        ...
        1041
        0
        825494064
        909128761
        2609
        ...

    ex6)
        // g++ -o container-6 container-6.cpp -std=c++11
        #include <iostream>
        #include <vector>
        
        void f(const std::vector<int> &c) {
            for(auto i = c.begin(), e = i + c.size(); i != e; ++i) {
                std::cout << *i << std::endl;
            }
        }
        
        int main(void) {
            std::vector<int> v;
            v.push_back(1);
            v.push_back(2);
            v.push_back(3);
            v.push_back(4);
            v.push_back(5);
            f(v);
        }

    이 취약점은 container-6과 같이 반복자의 반복 횟수를 벡터의 크기로 지정해줌으로써 막을 수 있습니다.
        
    ex7)
        // g++ -o container-7 container-7.cpp
        #include <vector>
        #include <iostream>
        
        void insert_table(std::vector<int> &table, long long pos, int value) {
            if(pos >= (long long)table.size()){
                std::cout << "overflow!" << std::endl;
                return;
            }
            table[pos] = value;
        }
        
        int main(void){
                long long idx;
                std::vector<int> v(5);
                
                std::cin >> idx;
                
                insert_table(v, idx, 0x41414141);
        }

    container-7.cpp은 테이블에 값을 추가하기 위해 insert_table 함수에
    std::vector 형의 변수인 table이 전달되고, long long 형인 pos가 전달됩니다.

    이후 pos 값이 컨테이너의 상한 범위를 벗어나지 않도록 검사하는데, 
    테이블의 인덱스로 사용되는 pos 변수는 부호 있는 정수 자료형인 long long으로 선언되므로 음수 값을 가정할 수 있습니다.

    만약 pos가 음수가 될 경우, 존재하는 조건문을 만족할 수 있고 std::vector 객체의 범위를 벗어난 쓰기가 발생합니다.
    ex7)
        $ ./container-7
        100
        overflow!
        $ ./container-7
        -10000000
        Segmentation fault (core dumped)

    ex8)
        // g++ -o container-8 container-8.cpp
        #include <vector>
        #include <iostream>
        
        void insert_table(std::vector<int> &table, unsigned long long pos, int value) {
            if(pos >= (long long)table.size()){
                std::cout << "overflow!" << std::endl;
                return;
            }
            table[pos] = value;
        }
        
        int main(void){
                long long idx;
                std::vector<int> v(5);
                
                std::cin >> idx;
                
                insert_table(v, idx, 0x41414141);
        }

    때문에 배열의 인덱스로 사용되는 정수형 변수는 container-8.cpp과 같이 unsigned 자료형으로 선언해 사용해야 합니다.
    ex8)
        $ ./container-8
        100
        overflow!
        $ ./container-8
        -10000000
        overflow!

    


















