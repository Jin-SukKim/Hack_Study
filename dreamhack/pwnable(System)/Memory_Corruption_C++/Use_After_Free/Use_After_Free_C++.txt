Use-After-Free in C++ :
    C와 같이 C++ 또한 UAF 취약점이 발생할 수 있습니다.
    uaf-1는 UAF가 발생하는 기본적인 예제입니다.
    ex)
        // g++ -o uaf-1 uaf-1.cpp
        #include <iostream>
        
        struct S {
            void f();
        };
        
        int main(void) {
            S *s = new S;
            // ...
            delete s;
            // ...
            s->f();
        }

    uaf-1은 main 함수에서 객체 s를 할당하고, 이를 해제한 뒤 s를 다시 참조해 멤버 함수인 f를 호출하려고 시도합니다.
    이는 가장 기본적인 형태의 UAF 취약점으로, 만약 공격자가 해제된 객체 s의 메모리에 원하는 값을 쓰게 된다면 치명적일 수 있습니다.

    uaf-2는 UAF가 발생하는 또 다른 예제입니다.
    ex)
        // g++ -o uaf-2 uaf-2.cpp
        #include <string>
        #include <iostream>
        
        std::string str_func(){
                std::string a = "aaaa";
                return a;
        }
        
        void display_string(const char * buf){
                std::cout << buf << std::endl;
        }
        
        int main(void) {
            const char *str = str_func().c_str();
            display_string(str);
            std::string b = "bbbb"; //uaf
            display_string(str);  /* Undefined behavior */
        }

    str_func 함수에서 리턴받은 문자열을 변환해 str 변수에 저장하고, display_string 함수를 통해 이를 출력하는 코드로 가정합니다.

    line 15에서는 str_func의 리턴 값에 c_str 메서드를 불러 std::string 형의 값을 const char * 형으로 형 변환합니다. 
    str_func 함수에서 생성되는 string 객체 a는 해당 함수 내에서만 사용하는 임시 객체이기 때문에 line 7이 실행되면 해제됩니다.
    그러나 str 변수는 해당 객체의 문자열 포인터를 계속 참조하고 있어 line 15가 실행된 이후에는 해제된 메모리를 가리키게 됩니다.
    이후 새로 생성되는 특정 개체가 해당 메모리를 사용한다면 str 변수로 인해 UAF가 발생하게 됩니다.
    ex)
        $ ./uaf-2
        aaaa
        bbbb





























