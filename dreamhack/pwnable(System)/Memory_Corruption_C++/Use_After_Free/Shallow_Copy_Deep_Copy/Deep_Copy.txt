Deep Copy :
    deep_copy는 이전 예제와 다르게 Deep copy를 사용하여 객체를 복사하는 예제입니다.
    ex)
        // g++ -o deep_copy deep_copy.cpp
        #include <iostream>
        #include <string.h>
        using namespace std;
        
        class A
        {
        public:
            int age;
            char *name;
            
            A(int _age, char *_name) {
                age = _age;
                name = new char [strlen(_name)+1];
                strcpy(name,_name);
            }
            
            A(const A& s) 
            {
                age = s.age;
                name = new char[strlen(s.name)+1];
                strcpy(name,s.name);
            }
            
            ~A() {
                delete name; 
            }
            
            void print()
            {
                cout << "Name: " << name << endl;
                cout << "Age: " << age << endl;
            }
        };
        
        int main()
        {
            A a(20, (char *)"DreamHack");
            A b = a;
            
            strcpy(a.name, "C++ HACK!");
            
            a.print();
            b.print();
        }

    line 19 ~ line 24의 복사 생성자를 확인해보면 이전과 다르게 동적 할당을 한 후 name 멤버 변수를 복사하는 것을 알 수 있습니다.
    이로 인해 객체를 복사하더라도 두 객체의 name 멤버 변수가 다른 메모리를 사용하게 되고, 소멸자에서 할당된 name을 해제하더라도 Double Free가 발생하지 않습니다.

    다음은 deep_copy의 실행 결과입니다.
    ex)
        # ./deep_copy 
        Name: C++ HACK!
        Age: 20
        Name: DreamHack
        Age: 20

    이전과는 다르게 두 개의 객체가 독립적인 값을 갖고 있는 것을 확인할 수 있습니다.





























