Shallow Copy :
    shallow_copy는 얕은 복사를 사용하여 객체를 복사하는 예제입니다.
    ex)
        // g++ -o shallow_copy shallow_copy.cpp 
        #include <iostream>
        #include <string.h>
        using namespace std;
        
        class A
        {
        public:
            int age;
            char *name;
            
            A(int _age, char *_name) {
                age = _age;
                name = new char [strlen(_name)+1];
                strcpy(name,_name);
            }
            
            A(const A& s) 
            {
                age = s.age;
                name = s.name;
            }
            
            ~A() {
                // delete name; 
            }
            
            void print()
            {
                cout << "Name: " << name << endl;
                cout << "Age: " << age << endl;
            }
        };
        
        int main()
        {
            A a(20, (char *)"DreamHack");
            A b = a;
            
            strcpy(a.name, "C++ HACK!");
            
            a.print();
            b.print();
        }

    클래스 A에는 멤버 변수 age와 name이 존재하고, 멤버 함수로는 print 함수가 존재합니다.
    A 클래스를 선언하게 되면 생성자가 호출되어 인자로 전달된 age와 name을 각 멤버 변수에 저장합니다.
    이때 name의 경우 동적 할당 후 strcpy 함수로 전달된 값을 복사하게 됩니다.

    그러나 line 21~25에서 클래스 A의 복사 생성자를 보면 동적 할당 없이 이미 사용 중인 포인터 값을 그대로 대입합니다. 
    이로 인해 main 함수에서 A b = a; 코드로 인해 복사 생성자가 호출되면 얕은 복사가 이루어지게 되는데, 
    이때 이 두 개의 객체의 name 멤버 변수는 같은 메모리를 사용하게 됩니다.

    때문에 line 43과 같이 a 객체의 멤버 변수에 대한 수정이 이뤄지더라도 동일한 메모리를 사용하는 b 객체의 멤버 변수 또한 조작됩니다.
    shallow_copy의 실행 결과는 다음과 같습니다.
    ex)
        $ ./shallow_copy
        Name: C++ HACK!
        Age: 20
        Name: C++ HACK!
        Age: 20

    strcpy 함수를 통해 a.name에 "C++ HACK!" 문자열을 복사했지만 b.name 또한 동일한 값을 가지는 것을 확인할 수 있습니다.
    만약 line 27에서 동적 할당된 name 멤버 변수를 해제한다면 두 객체는 동일한 메모리를 가리키기 때문에 소멸자가 호출되는 즉시 Double Free 버그가 발생합니다.



























