Shallow copy and Deep Copy:
    C++은 객체를 복사 할 때 복사 생성자를 사용합니다.
    이때, 객체의 멤버 중 포인터를 복사하는 방법에는 얕은 복사(Shallow copy)와 깊은 복사(Deep copy) 두 가지가 존재합니다.

    얕은 복사를 하게 되면, 객체의 멤버를 복사할 때 새로운 메모리를 할당하여 복사하지 않고
    객체의 멤버가 사용하던 기존의 메모리를 사용하기 때문에 두 개의 서로 다른 객체의 멤버가 같은 영역을 사용하게 됩니다.
    때문에 두 개 중 하나의 객체에서만 수정이 이뤄지더라도 나머지 객체의 메모리도 수정이 됩니다.

    깊은 복사는 객체를 복사할 때 새로운 메모리를 할당하여
    각각의 별도 공간에서 작업이 이뤄지도록 하기 때문에 복사 객체라도 각각의 독립적인 메모리를 가질 수 있습니다.

    shallow_copy와 deep_copy는 얕은 복사와 깊은 복사의 차이점을 알 수 있는 예제입니다.
    
    Shallow_Copy :
        ex)
            // g++ shallow_copy shallow_copy.cpp
            #include <iostream>
            #include <cstring>
            
            class A{
            public:
                A(int _age, char *_name) {
                    age = _age;
                    name = new char [strlen(_name)+1];
                    strcpy(name,_name);
                }
                A(const A& s)
                {
                    age = s.age;
                    name = s.name;
                }
                int age;
                char *name;
            };
            
            int main(void){
                    A st1(20, "dreamhack");
                    A st2(st1);
                    std::cout << st1.name << std::endl;
                    std::cout << st2.name << std::endl;
                    strcpy(st1.name, "hackdream"); //modify st1 name
                    std::cout << st1.name << std::endl;
                    std::cout << st2.name << std::endl;
            }

        ex)
            $ ./shallow_copy
            dreamhack
            dreamhack
            hackdream
            hackdream

    Deep Copy :
        ex)
            // g++ deep_copy deep_copy.cpp
            #include <iostream>
            #include <cstring>
            
            class A{
            public:
                A(int _age, char *_name) {
                    age = _age;
                    name = new char[strlen(_name)+1];
                    strcpy(name,_name);
                }
                A(const A& s)
                {
                    age = s.age;
                    name = new char[strlen(s.name)+1];
                    strcpy(name,s.name);
                }
                int age;
                char *name;
            };
            
            int main(void){
                    A st1(20, "dreamhack");
                    A st2(st1);
                    std::cout << st1.name << std::endl;
                    std::cout << st2.name << std::endl;
                    strcpy(st1.name, "hackdream"); //modify st1 name
                    std::cout << st1.name << std::endl;
                    std::cout << st2.name << std::endl;
            }

        ex)
            $ ./deep_copy
            dreamhack
            dreamhack
            hackdream
            dreamhack



























