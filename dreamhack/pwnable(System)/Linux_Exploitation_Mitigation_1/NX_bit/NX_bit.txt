NX bit :
    앞에서는 프로그램의 취약점을 이용해 실행 흐름을 조작한 뒤 스택 영역에 저장된 셸코드를 실행하였습니다.

    하지만 일반적인 프로그램에서의 스택 메모리는 코드를 실행하는 용도로 사용되는 것이 아니라, 
    일시적으로 데이터를 읽고 쓰는 데 사용되기 때문에 실행 권한이 있을 필요가 없습니다.
    이러한 이유로 프로그램의 공격을 어렵게 하기 위해, 메모리에 쓰기 권한과 실행 권한을 동시에 부여하지 않는 No-eXecute bit(NX bit)가 등장하였습니다.

    example2.c는 셸코드를 데이터 영역에 저장한 후 main 함수에서 이를 실행하는 간단한 예제입니다. 
    ex)
        //gcc -o example2_x example2.c -fno-stack-protector -z execstack -mpreferred-stack-boundary=2 -m32
        // NX bit 가 적용되어 있는 example2_x 컴파일
        
        //gcc -o example2_nx example2.c -fno-stack-protector -mpreferred-stack-boundary=2 -m32
        // NX bit가 적용되어 있지 않은 example2_x 컴파일

        #include <stdio.h>
        
        unsigned char code[] = \
        "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x31\xd2\xb0\x0b\xcd\x80";
        
        int main(void){
            void (*shellcode)() = (void(*)())code;
            
            printf("Executing shellcode\n");
            
            shellcode();
        }

    서로 다른 컴파일 옵션을 통해 NX bit 보호 기법을 적용한 example2_nx 바이너리와 적용하지 않은 example_x 바이너리를 생성하였습니다.

    example2_nx 바이너리와 example2_x 바이너리를 gdb로 디버깅하여 메모리 권한을 확인해 보도록 하겠습니다.


1) NX bit가 적용되지 않은 example2_x의 메모리 맵 :
    ex)
        $ gdb -q ./example2_x
        Reading symbols from ./example2_x...(no debugging symbols found)...done.
        (gdb) b main
        Breakpoint 1 at 0x8048411
        (gdb) r
        Starting program: ~/example2_x 
        
        Breakpoint 1, 0x08048411 in main ()
        (gdb) shell cat /proc/`pidof example2_x`/maps
        08048000-08049000 r-xp 00000000 08:01 147398                             ~/example2_x
        08049000-0804a000 r-xp 00000000 08:01 147398                             ~/example2_x
        0804a000-0804b000 rwxp 00001000 08:01 147398                             ~/example2_x   ; 바이너리의 데이터 영역
        …
        
        fffdd000-ffffe000 rwxp 00000000 00:00 0                                  [stack]         ; 스택 영역   
        (gdb) 

    스택과 데이터 영역 모두 rwx, 즉 읽기, 쓰기, 실행 권한을 갖고 있습니다.

    example2_x 바이너리를 실행했을 때는 정상적으로 셸코드가 실행되어 셸이 실행됩니다.
    ex)
        $ ./example2_x
        Executing shellcode
        $ id
        uid=1001(theori) gid=1001(theori) groups=1001(theori)          


2) NX bit가 적용된 example2_nx의 메모리 맵 :
    ex)
        $ gdb -q ./example2_nx
        Reading symbols from ./example2_nx...(no debugging symbols found)...done.
        (gdb) b main
        Breakpoint 1 at 0x8048411
        (gdb) r
        Starting program: ~/example2_nx 
        
        Breakpoint 1, 0x08048411 in main ()
        (gdb) shell cat /proc/`pidof example2_nx`/maps
        08048000-08049000 r-xp 00000000 08:01 147400                             ~/example2_nx
        08049000-0804a000 r--p 00000000 08:01 147400                             ~/example2_nx
        0804a000-0804b000 rw-p 00001000 08:01 147400                             ~/example2_nx  ; 바이너리의 데이터 영역
        …
        fffdd000-ffffe000 rw-p 00000000 00:00 0                                  [stack]        ; 스택 영역
        (gdb) 

    스택과 데이터 영역 영역 메모리 모두 rw, 즉 읽기, 쓰기 권한만을 갖고 있습니다.

    example2_nx 바이너리를 실행했을 때는 데이터 영역에 실행 권한이 없기 때문에 Sementation Fault가 발생합니다.

    ex)
        $ ./example2_nx
        Executing shellcode
        [1]    104735 segmentation fault (core dumped)  ./example2_nx
        $





















