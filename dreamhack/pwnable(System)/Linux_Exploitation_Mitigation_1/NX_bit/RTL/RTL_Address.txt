RTL에 필요한 주소 찾기 :
    system("/bin/sh")를 호출하기 위해 알아야 하는 값은 system 함수의 주소와 /bin/sh 문자열의 주소입니다.

    gdb를 이용해 이들의 값을 알아보도록 하겠습니다.
    ex)
        $ gdb -q ./example1_nx
        Reading symbols from ./example1_nx...(no debugging symbols found)...done.
        (gdb) b main
        Breakpoint 1 at 0x8048479
        (gdb) r aaaabbbb
        Starting program: ~/example1_nx aaaabbbb
        
        Breakpoint 1, 0x080484fb in main ()
        (gdb) info proc map
        process 110780
        Mapped address spaces:
            
            Start Addr   End Addr       Size     Offset objfile
            0x8048000  0x8049000     0x1000        0x0 ~/example1_nx
            0x8049000  0x804a000     0x1000        0x0 ~/example1_nx
            0x804a000  0x804b000     0x1000     0x1000 ~/example1_nx
            0xf7e02000 0xf7e03000     0x1000        0x0 
            0xf7e03000 0xf7fb3000   0x1b0000        0x0 /lib/i386-linux-gnu/libc-2.23.so
            0xf7fb3000 0xf7fb5000     0x2000   0x1af000 /lib/i386-linux-gnu/libc-2.23.so
            0xf7fb5000 0xf7fb6000     0x1000   0x1b1000 /lib/i386-linux-gnu/libc-2.23.so
            0xf7fb6000 0xf7fb9000     0x3000        0x0 
            0xf7fd3000 0xf7fd4000     0x1000        0x0 
            0xf7fd4000 0xf7fd7000     0x3000        0x0 [vvar]
            0xf7fd7000 0xf7fd9000     0x2000        0x0 [vdso]
            0xf7fd9000 0xf7ffc000    0x23000        0x0 /lib/i386-linux-gnu/ld-2.23.so
            0xf7ffc000 0xf7ffd000     0x1000    0x22000 /lib/i386-linux-gnu/ld-2.23.so
            0xf7ffd000 0xf7ffe000     0x1000    0x23000 /lib/i386-linux-gnu/ld-2.23.so
            0xfffdd000 0xffffe000    0x21000        0x0 [stack]
        (gdb) p system
        $1 = {<text variable, no debug info>} 0xf7e3dda0 <system>
        (gdb) find 0xf7e03000, 0xf7fb3000, "/bin/sh"
        0xf7f5ea0b
        1 pattern found.
        (gdb) x/s 0xf7f5ea0b
        0xf7f5ea0b:	"/bin/sh"
        (gdb) 

    main 함수에 브레이크포인트를 설정한 후, gdb의 print 명령어를 통해 system 주소를 찾고,
    find 명령어를 통해 libc.so.6 라이브러리에 존재하는 /bin/sh 문자열의 주소를 찾았습니다.

    system이나 popen 등의 셸 명령어 실행 함수들이 내부적으로
    /bin/sh 문자열을 사용하기 때문에 라이브러리 메모리에서 /bin/sh 문자열을 찾을 수 있습니다.
    다음은 system 함수의 소스코드입니다.

    ex)
        #define        SHELL_PATH        "/bin/sh"        /* Path of the shell.  */
        #define        SHELL_NAME        "sh"                /* Name to give it.  */
        ...
        static int
        do_system (const char *line)
        {
        ...
        status = __posix_spawn (&pid, SHELL_PATH, 0, &spawn_attr,
                                (char *const[]){ (char*) SHELL_NAME,
                                                (char*) "-c",
                                                (char *) line, NULL },
                                __environ);
        __posix_spawnattr_destroy (&spawn_attr);
        ...
        }

        int
        __libc_system (const char *line)
        {
        if (line == NULL)
            /* Check that we have a command processor available.  It might
            not be available after a chroot(), for example.  */
            return do_system ("exit 0") == 0;
        return do_system (line);
        }
        weak_alias (__libc_system, system)

    



































