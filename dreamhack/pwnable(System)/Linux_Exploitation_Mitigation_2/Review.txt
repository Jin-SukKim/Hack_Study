Review :

    1) ASLR(Address Space Layout Randomization) :
        ASLR(Address Space Layout Randomization)은 메모리 커럽션 취약점에 대한 공격을 어렵게 하기 위해 프로세스 메모리의 주소 공간을 랜덤화하는 보호 기법입니다.
        
        서버에 ASLR이 설정되어 있으면 바이너리가 실행될 때마다 힙, 라이브러리, 스택 메모리 영역의 주소가 랜덤하게 바뀝니다.

    2) PLT, GOT :
        PLT, GOT 영역은 랜덤하게 변하는 라이브러리 함수의 주소를 찾기 위해 존재하는 영역입니다.
        
        바이너리에서 라이브러리 함수를 호출하면 해당 함수의 PLT 영역으로 점프를 합니다.
        이후 GOT 영역을 참조해 GOT에 함수의 주소가 없으면 호출된 함수 주소를 구해 GOT 영역에 저장합니다.

        ASLR이 설정되어 있는 환경에서도 PLT, GOT 영역의 주소는 변하지 않습니다.
        이러한 PLT, GOT 영역의 특징을 이용해 ASLR 보호기법을 우회하는 데 이를 응용할 수 있다는 것을 배웠습니다.

    3) ROP(Return Oriented Programming) :
        ROP(Return Oriented Programming)은 바이너리 코드 영역의 여러 코드 가젯들을 조합하여 체이닝해 ASLR 보호기법을 우회하는 공격 기법입니다.

        ROP에 필요한 코드 가젯들과 그 가젯들을 찾는 방법에 대해 배우고, ROP를 이용해 바이너리를 익스플로잇하는 실습을 하였습니다.

    4) FSB (Format String Bug) :
        포맷 스트링 버그는 사용자의 입력이 printf와 같은 함수의 인자로 그대로 전달되어 발생하는 취약점입니다.

        포맷 스트링 버그를 통해 임의 주소에 존재하는 값을 읽고, 덮어쓰는 방법에 대해서 배웠습니다.

        





















