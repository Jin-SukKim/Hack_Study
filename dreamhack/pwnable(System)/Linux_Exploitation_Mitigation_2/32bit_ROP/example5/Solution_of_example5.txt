Solution of example5 :
    ex) example5

        0x8048380:
            pop eax
            ret

        0x8048480:
            xchg ebp, ecx
            ret
        
        0x8048580:
            mov ecx, eax
            ret

    example5에 있는 코드 가젯들은 모두 ret 명령어로 끝납니다.

    이는 하나의 코드 가젯의 실행이 끝난 후 다음 코드 가젯으로 리턴하여 여러 가젯들을 체이닝하여 실행하는 것을 가능하게 해줍니다.

    리턴 주소를 시작으로 스택이 다음과 같이 구성되어 있다고 가정해 보겠습니다.
    사진 : example5_stack_1.png

    현재 esp 레지스터가 가리키고 있는 메모리는 진한 색으로 표시되었습니다.

    스택 오버플로우 취약점이 존재하는 함수가 리턴할 때, 리턴 주소가 0x8048380으로 바뀌어 있기 때문에 0x8048380으로 점프합니다.

    이 때의 스택과 esp 레지스터의 상태는 다음과 같습니다.
    사진 : example5_stack_2.png

    0x8048380에서 pop eax 를 실행하면 eax 레지스터에 현재 esp 레지스터가 가리키고 있는 0x41414141이 들어가게 되고,
    스택과 esp 레지스터는 다음과 같은 상태가 됩니다.
    사진 : example5_stack_3.png

    0x8048380에 위치한 코드 가젯인 pop eax 를 실행한 후에 ret을 실행하기 때문에
    실행 흐름은 현재 esp 레지스터가 가리키고 있는 0x8048580으로 분기합니다.

    0x8048580 코드 가젯은 mov ecx, eax 이기 때문에 ecx에 0x41414141이 들어가게 됩니다.


Solution of example5 - cond. :
    이렇듯, ret 명령으로 코드 가젯들을 사용하면 여러 가젯을 연결하여 하나의 가젯으로는 할 수 없는 행위를 할 수 있게 됩니다.

    이러한 기술은 마치 리턴을 이용해 여러 코드를 묶어 프로그래밍하는 것과 같아 Return Oriented Programming이라 불리게 되었습니다.

    그렇다면 ebp 레지스터의 값을 0xdeadbeef로 바꾸기 위해 구성된 스택을 살펴보도록 하겠습니다.
    사진 : example5_stack_4.png

    이와 같이 스택이 구성되면 아래와 같이 pop eax(0xdeadbeef) + mov ecx, eax + xchg ebp, ecx 명령들이 순차적으로 
    실행되어 최종적으로는 ebp 레지스터에 0xdeadbeef 값이 들어가게 됩니다.
    사진: process 폴더

     -  세그멘테이션 결함(Segmentation Fault)은 컴퓨터 소프트웨어의 실행 중에 일어날 수 있는 특수한 오류이다. 
        세그멘테이션 결함은 프로그램이 허용되지 않은 메모리 영역에 접근을 시도하거나, 허용되지 않은 방법으로 메모리 영역에 접근을 시도할 경우 발생한다.





































