Return Oriented Programming(ROP) :
    PLT에는 프로그램 내에서 호출하는 함수들만 존재합니다.
    하지만 익스플로잇 대상 바이너리인 example4에서는 system과 같은 셸을 획득하는 데
    필요한 함수를 사용하지 않기 때문에 ASLR 환경에서 직접적으로 이를 호출할 수 없습니다. 
    32비트 ELF 바이너리는 ASLR로 랜덤화되는 주소의 범위가 크지 않기 때문에 
    호출하고자 하는 라이브러리 함수의 주소를 무차별 대입을 통해 맞출 수도 있지만 (약 1/4096),
    100% 에 가까운 확률로 익스플로잇할 수 있는 공격 기법이 존재합니다.
    ex)
        //example4.c
        #include <stdio.h>
        int main(void){
            char buf[32] = {};
            
            puts("Hello World!");
            puts("Hello ASLR!");
            scanf("%s", buf);
            
            return 0;
        }

    Return Oriented Programming(ROP)는 코드 영역에 있는 다양한 코드 가젯들을 조합해 NX bit와 ASLR 보호 기법을 우회할 수 있는 공격 기법입니다.

    ROP 기술은 스택 오버플로우와 같은 취약점으로 콜 스택을 통제할 수 있기 때문에 주로 스택 기반 연산을 하는 코드 가젯들이 사용됩니다.

    바이너리 코드 영역에 example5와 같은 코드 가젯들이 존재하고 있습니다.
    
    ex)
        ; example5
        0x8048380:
            pop eax
            ret

        0x8048480:
            xchg ebp, ecx
            ret
        
        0x8048580:
            mov ecx, eax
            ret

    스택 오버플로우 취약점을 통해 리턴 주소 및 그 뒤의 메모리를 원하는 값으로 덮어쓸 수 있다고 가정하였을 때,
    example5 코드 가젯들로 ebp 레지스터의 값을 0xdeadbeef로 바꾸어 보겠습니다.

    































