Format String Bug (FSB) :
    포맷 스트링 버그는 대표적으로 printf와 sprintf와 같은 포맷 스트링을 사용하는 함수에서
    사용자가 포맷 스트링 문자열을 통제할 수 있을 때 발생하는 취약점입니다. 
    이 취약점이 프로그램에 존재하면, 프로그램의 임의 주소의 값을 읽을 수 있을 뿐만 아니라 값을 쓸 수 있기 때문에 매우 위험합니다.

    포맷 스트링에는 다양한 종류가 있고, 주어진 인자에 대해 각 포맷 별로 정해진 기능을 수행합니다. 
    만약 공격자가 이러한 포맷 스트링을 조작할 수 있다면, printf 함수의 인자가 저장되는 스택의 내용을 읽거나
    %n 혹은 %s 등 메모리 참조 포맷 스트링을 이용해 메모리 커럽션을 유발할 수 있습니다.

    표는 printf 포맷 스트링들에 대한 설명입니다. 

        Type Field      설명                                                    Example

            %       "%" 문자를 출력                                                %
            c       하나의 문자를 출력                                             a
            d, i    signed integer를 출력                                         31337
            s       NULL 바이트로 끝나는 문자열을 출력                              Hello World!
            x       unsigned integer를 16진수 형태로 출력                          d
            n       현재까지 출력된 문자의 개수를 변수에 저장. 출력 결과는 없음.

    표의 내용을 응용해 아래 퀴즈를 풀어보시기 바랍니다
    ex)
        int a,b,c,d = 0;
        char str[] = "string";
        char str2[] = "st\x00ring";
        
        printf("hello dreamhack!%n\n",&a);
        printf("str:%s%n\n",str, &b);
        printf("%100c%n", 'x', &c);
        printf("str: %s\n", str2);

    Q)
        a 값 :  16
        b 값 :  10
        c 값 :  100
        str2의 출력 값 : st


    fsb1
    ex) fsb1.c
        // gcc -o fsb1 fsb1.c -m32 -mpreferred-stack-boundary=2
        #include <stdio.h>
        #include <unistd.h>
        #include <stdlib.h>
        #include <string.h>
        
        char flag_buf[50];
        
        void initialize() {
            setvbuf(stdin, NULL, _IONBF, 0);
            setvbuf(stdout, NULL, _IONBF, 0);
        }
        
        int main()
        {
            FILE *fp;
            char buf[256];
            
            initialize();

            memset(buf, 0, sizeof(buf));

            fp = fopen("./flag", "r");
            fread(flag_buf, 1, sizeof(flag_buf), fp);
            
            printf("Input: ");
            read(0, buf, sizeof(buf)-1);
            
            printf(buf);
            return 0;
        }

    fsb1은 중요 파일인 "flag" 파일을 읽고 전역 변수 flag_buf에 저장합니다. 
    그리고 지역 버퍼인 buf에 입력을 받고 printf를 사용하여 출력하되
    사용자의 입력이 포맷 스트링으로 그대로 들어가기 때문에 포맷 스트링 버그가 발생합니다.

    해당 예제의 목표는 flag_buf에 저장되어 있는 "flag" 파일의 내용을 포맷 스트링 버그를 통해 읽는 것입니다.

    




























