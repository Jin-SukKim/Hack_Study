Format String Bug (FSB) :
    포맷 스트링 버그를 통해 임의의 주소에 저장되어 있는 값을 읽어내는 방법을 다뤘습니다.
    그렇다면 임의의 주소에 원하는 값을 쓰는 방법에 대해서 보다 자세히 알아보도록 하겠습니다.

    fsb2는 포맷 스트링 버그가 발생하고 exit 함수가 호출되어 프로그램이 종료되는 예제입니다.
    ex) fsb2.c
        // gcc -o fsb2 fsb2.c -m32 -mpreferred-stack-boundary=2
        #include <stdio.h>
        #include <unistd.h>
        #include <stdlib.h>
        #include <string.h>
        
        void initialize() {
            setvbuf(stdin, NULL, _IONBF, 0);
            setvbuf(stdout, NULL, _IONBF, 0);
        }
        
        void get_shell() {
            system("/bin/sh");
        }
        
        int main()
        {
            char buf[256];

            initialize();

            memset(buf, 0, sizeof(buf));

            printf("Input: ");
            read(0, buf, sizeof(buf)-1);

            printf(buf);

            exit(0);
        }

    exit 함수는 포맷 스트링 버그가 발생한 이후에 호출되기 때문에 exit@got를 조작할 수 있다면 
    주어진 get_shell 함수로 실행 흐름을 조작할 수 있습니다.

    이전 예제를 살펴보면 "n" 포맷 스트링을 사용하면 출력된 문자열의 길이만큼 특정 주소에 값을 쓴다는 것을 확인할 수 있었습니다.
    값을 쓰는 것 또한 이전 공격 방식과 비슷한 과정을 통해 수행할 수 있습니다.

    "n"은 출력된 문자의 길이 수를 전달된 매개 변수에 쓰는 포맷 스트링입니다.

    fsb_example2는 "n" 포맷 스트링의 이해를 돕기 위한 예제입니다. 
    ex) fsb_example2.c
        // gcc -o fsb_example2 fsb_example2.c
        #include <stdio.h>
        int main()
        {
            int ret = 0;
            printf("1234%1$n\n", &ret);
            
            printf("ret: %d\n", ret);
        }
    
    실행 결과는 다음과 같습니다.
    ex)
        # ./fsb_example2
        1234
        ret: 4

    printf의 첫 번째 인자로는 "1234%1$n", 두 번째 인자에 ret 지역 변수의 주소를 전달했습니다. 
    "1234" 문자열의 길이는 4이고, "%1$n" 포맷 스트링을 사용하여 ret에 출력된 문자열의 길이를 쓰기 때문에 ret은 4라는 값을 가지게 됩니다.

    그러나 실제로 공격을 할 때는 이와 같이 작은 값을 쓸 경우는 적습니다. 
    만약 0x41414141이란 값을 쓰기 위해서는 문자열의 길이가 1094795585(0x41414141의 10 진수)이 되어야하는데,
    입력할 수 있는 길이가 한정되어 있다면 fsb_example2에서 다룬 방법으로는 공격이 불가능 할 수 있습니다.

    fsb_example3는 이를 해결할 수 있는 예제입니다.
    ex) fsb_example3.c
        // gcc -o fsb_example3 fsb_example3.c
        #include <stdio.h>
        int main()
        {
            int ret = 0;
            printf("%1024c%1$n\n", &ret);
        
            printf("ret: %d\n", ret);
        }

    실행 결과
    ex)
        $ ./fsb_exmaple3














            ? // 대강 1024개의 공백
        ret: 1024 

    1024 바이트 길이의 데이터를 입력하지 않았는데 ret이 1024로 덮인 것을 확인할 수 있습니다.

    "%1024c"는 1024 길이의 공백을 포함한 문자를 "c" 포맷 스트링으로 출력하는 것이기 때문에
    이를 사용하여 원하는 길이만큼 화면에 문자를 출력할 수 있습니다.
    해당 방법을 사용하면 입력할 수 있는 버퍼가 한정적이더라도 원하는 문자열의 길이를 출력하여 임의 주소에 원하는 값을 쓸 수 있습니다.



































