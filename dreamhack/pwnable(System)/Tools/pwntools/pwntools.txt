pwntools :
    파이썬은 사용하기 쉬운 스크립트 언어라는 특징 때문에 익스플로잇을 할 때 자주 사용됩니다.

    pwntools는 Gallospled 팀이 개발한 파이썬 익스플로잇 프레임워크로, 익스플로잇을 할 때 유용한 여러 기능들을 제공해 줍니다.

    다음 명령어를 통해 pwntools를 설치할 수 있습니다.
    ex)
        # apt-get update
        # apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential
        # pip install --upgrade pip
        # pip install --upgrade pwntools

    파이썬 인터프리터에서 아래와 같이 pwn 모듈이 임포트되면 pwntools가 정상적으로 설치되었다는 것을 알 수 있습니다.
    ex)
        >>> from pwn import *
        >>> 

    Connection :
        pwntools를 사용하는 방법은 다음과 같습니다.
        ex)
            from pwn import *

        remote :
            remote는 원격 서비스에 접속하여 통신할 때 사용되는 클래스입니다.
            ex)
                p = remote("127.0.0.1", 5000)

            위 코드는 127.0.0.1 주소에 열려있는 5000번 포트에 TCP 연결을 맺습니다.
            연결이 성공적으로 맺어지면 remote 객체를 리턴합니다.
            ex)
                p = remote("127.0.0.1",5000, typ='udp')
            
            위와 같이 typ에 'udp' 옵션을 전달하면 UDP 연결을 맺을 수 있습니다.

        process :
            process는 로컬 프로세스를 실행하여 통신할 때 사용되는 클래스입니다.
            ex)
                p = process("/home/theori/binary")

            위 코드는 로컬 파일시스템에 존재하는 /home/theori/binary 바이너리를 실행합니다.
            process 클래스는 로컬에서 바이너리를 실행할 때 환경 변수를 직접 설정할 수 있고, 
            프로그램을 실행할 때 인자를 전달해야 할 경우 다음과 같이 전달할 수 있습니다.
            ex)
                p = process(["/home/theori/binary","AAAA"], env={"LD_PRELOAD":"./libc.so.6"})

            위 코드는 프로그램의 argv[1]에 "AAAA" 문자열을 전달하고 LD_PRELOAD 환경 변수를 ./libc.so.6으로 설정하여 실행합니다.

        ssh :
            ssh는 ssh 서버에 접속하여 통신할 때 사용되는 클래스입니다.
            ex)
                p = ssh("theori","127.0.0.1", port=22, password="theori")

            위 코드는 127.0.0.1 서버에 theori 계정으로 ssh 로그인을 하여 연결을 하는 코드입니다.


    send / recv :
        소켓에 연결하거나 프로그램을 실행할 때 데이터를 보내고 읽어들이는 작업을 해야 합니다. 
        이때 send 함수와 recv 메소드를 사용할 수 있습니다. 
        해당 메소드의 경우 연결이 맺어진 객체가 존재해야 사용할 수 있습니다.

        send :
            send는 연결이 맺어진 객체에 데이터를 보내는 메소드입니다.
            ex)
                p = remote("127.0.0.1", 22)
                p.send("AAAA")

            위 코드는 "127.0.0.1"의 22번 포트에 연결한 후 "AAAA"를 보냅니다.

            sendline은 연결이 맺어진 객체에 개행을 포함하는 데이터를 보내는 메소드입니다.
            ex)
                p = remote("127.0.0.1", 22)
                p.sendline("AAAA")

            sendline은 send 메소드와 달리 "AAAA\n"을 송신합니다.

        recv :
            recv는 연결이 맺어진 객체로부터 수신한 데이터를 리턴하는 메소드입니다.
            ex)
                p = remote("127.0.0.1", 22)
                print p.recv(1024)
                SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.8

            위 코드는 "127.0.0.1"의 22번 포트에 연결했을 때 출력되는 문자열을 1024바이트 만큼 수신하여 출력합니다.

            recvline은 연결이 맺어진 객체로부터 개행까지 수신하여 리턴하는 메소드입니다.
            ex)
                p = remote("127.0.0.1", 22)
                print p.recvline()
                SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.8

            읽을 바이트 수를 지정해주지 않고 개행까지 읽어들였습니다.
        
            recvuntil은 연결이 맺어진 객체에서 원하는 문자 혹은 문자열까지 읽는 메소드입니다.
            ex)
                p = remote("127.0.0.1", 22)
                print p.recvuntil("SSH")
                SSH

            "SSH" 문자열까지 읽어들이고 출력한 모습입니다.

            process 함수를 통해 연결이 맺어진 객체는 send 메소드로 데이터를 보내면 stdin으로 사용자가 입력한 것과 동일한 역할을 하고,
            recv 함수로 데이터를 읽으면 stdout으로 출력된 문자열을 가져올 수 있습니다.

        send/recv :
            send와 recv를 동시에 하는 메소드 또한 존재합니다.

            sendafter는 원하는 문자 혹은 문자열까지 읽은 뒤 데이터를 보내는 함수입니다.
            ex)
                p = remote("127.0.0.1", 22)
                print p.sendafter("\n","AAAA")
                SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.8

            위 코드는 "127.0.0.1"의 22번 포트에 연결한 후 개행까지 읽어들이고 "AAAA"를 보냅니다.

            sendlineafter는 원하는 문자 혹은 문자열까지 읽은 뒤 개행을 포함하는 데이터를 보냅니다.
            ex)
                p = remote("127.0.0.1", 22)
                print p.sendlineafter("\n","AAAA")
                SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.8

            























