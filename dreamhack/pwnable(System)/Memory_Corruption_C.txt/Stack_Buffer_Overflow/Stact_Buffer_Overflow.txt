스택 버퍼 오버플로우 :
    SFP는 Saved Frame Pointer라고도 불리며, 이전 함수의 EBP 주소를 저장하고 있는 공간이다. 일단 SFP가 무엇인지 알기 전에 스택 프레임에 대해 자세히 알 필요가 있다.

    지금까지 살펴본 바와 같이 버퍼 오버플로우는 프로그래머가 길이에 대한 검증을 정확히 수행하지 못해 발생합니다.
    만약 공격 벡터로부터 데이터를 입력받고 이를 버퍼에 저장하는 코드가 있다면 이를 유심히 살펴볼 필요가 있습니다.
    데이터를 버퍼에 입력받을 때는 입력받은 데이터가 버퍼의 범위를 초과하지 않는지 항상 정확히 검사해야 합니다.

    입력받을 때 길이 제한이 없는 함수를 사용한다면 이는 잠재적으로 취약하다고 볼 수 있습니다.
    입력받은 데이터가 버퍼에 저장되기까지의 흐름을 따라가 버퍼의 크기를 넘는 양을 저장할 수 있는지 가능성을 검토해야 합니다. 
    만약 길이를 명시하는 함수를 사용한다면, 명시된 길이가 버퍼의 크기를 넘을 수 있는지를 검토해야 합니다.

    버퍼 오버플로우는 스택에서만 발생하는 취약점이 아닙니다. 
    프로그래머가 동적으로 메모리를 관리할 수 있는 힙에서도 똑같이 발생할 수 있습니다. 
    이들은 단지 발생하는 메모리 영역의 차이만 있을 뿐이고 취약점이 발생하는 원인이 본질적으로 다르진 않습니다.

    힙 영역은 스택 영역과 사용 목적이 다르기 때문에, 스택 버퍼 오버플로우와는 다른 방법으로 익스플로잇해야 합니다. 
    힙 오버플로우를 익스플로잇하는 방법은 Linux Exploitation & Mitigation 강의에서 다룹니다.
    

ex)
    // stack-1.c
    #include <stdio.h>
    #include <stdlib.h>
    int main(void) {
        char buf[16];
        gets(buf);
        
        printf("%s", buf);
    }

    stack-1.c는 16 바이트 버퍼 buf를 스택에 할당한 후, gets 함수를 통해 사용자로부터 데이터를 입력받아 이를 그대로 출력하는 코드입니다. 
    gets함수는 사용자가 개행을 입력하기 전까지 입력했던 모든 내용을 첫 번째 인자로 전달된 버퍼에 저장하는 함수입니다.
    그러나 gets 함수에는 별도의 길이 제한이 없기 때문에 16 바이트가 넘는 데이터를 입력한다면 스택 버퍼 오버플로우가 발생합니다.

    이처럼 버퍼 오버플로우 취약점은 프로그래머가 버퍼의 길이에 대한 가정을 올바르지 않게 하여 발생합니다. 
    이는 보통 길이 제한이 없는 API 함수들을 사용하거나 버퍼의 크기보다 입력받는 데이터의 길이가 더 크게 될 때 자주 일어나는 실수입니다.

    그렇다면 이번엔 오른쪽 모듈을 사용해 실습해 보겠습니다. 버퍼를 오버플로우시켜 ret 영역을 0x41414141로 만들면 성공입니다.
    (Buffer_Overflow_EX 폴더)

ex2)
    // stack-2.c
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    int check_auth(char *password) {
        int auth = 0;
        char temp[16];
        
        strncpy(temp, password, strlen(password)); // password 의 길이만큼 temp 에 복사합니다.
        
        if(!strcmp(temp, "SECRET_PASSWORD")) // temp 와 SECRET_PASSWORD 를 비교합니다.
            auth = 1;
        
        return auth;
    }
    int main(int argc, char *argv[]) {
        if (argc != 2) {
            printf("Usage: ./stack-1 ADMIN_PASSWORD\n");
            exit(-1);
        }
        
        if (check_auth(argv[1]))
            printf("Hello Admin!\n");
        else
            printf("Access Denied!\n");
    }

    stack-2.c의 main 함수는 argv[1]을 check 함수의 인자로 전달한 후 그 리턴 값을 받아옵니다. 
    리턴 값이 0이 아니라면 "Hello Admin!"을, 0이라면 "Access Denied!"라는 문자열을 출력합니다.

    핵심이 되는 check 함수에서는 16 바이트 크기의 temp 버퍼에 입력받은 패스워드를 복사한 후 "SECRET_PASSWORD" 문자열과 비교합니다. 
    문자열이 같다면auth 변수를 1로 설정하고 auth를 리턴합니다.

    그러나 line 10에서 strncpy 함수를 통해 temp 버퍼를 복사할 때, temp의 크기인 16 바이트가 아닌 인자로 전달된 password 문자열의 길이만큼을 복사합니다.
    따라서 argv[1]에 16 바이트가 넘는 문자열을 전달한다면 길이 제한 없이 문자열이 복사되어 스택 버퍼 오버플로우가 발생하게 됩니다.

    temp 버퍼 뒤에 auth 값이 존재하므로, 오버플로우가 발생해 공격자의 데이터가 auth 값을 바꾼다면 auth가 0이 아닌 다른 값이 될 수 있습니다. 
    이 경우 실제 인증 여부와는 상관없이 line 24의 if(check_auth(argv[1])) 문은 항상 참을 반환하게 됩니다.

    (Buffer_Overflow_EX/EX2 폴더)

ex3)
    // stack-3.c
    #include <stdio.h>
    #include <unistd.h>
    int main(void) {
        char win[4];
        int size;
        char buf[24];
        
        scanf("%d", &size);
        read(0, buf, size);
        
        if (!strncmp(win, "ABCD", 4)){
            printf("Theori{-----------redacted---------}");
        }
    }

    stack-3.c의 main함수는 24 바이트 크기의 버퍼 buf를 할당합니다.
    scanf 함수를 통해 size 변수에 값을 입력받고, size만큼 buf에 데이터를 입력받습니다.

    stack-1.c에서는 길이 검증이 없는 함수를 사용해 스택 버퍼 오버플로우가 발생했고,
    이번에는 고정된 크기의 버퍼보다 더 긴 데이터를 입력받아 스택 버퍼 오버플로우가 발생했습니다.

ex4) 
    // stack-4.c
    #include <stdio.h>
    int main(void) {
        char buf[32] = {0, };
        read(0, buf, 31);
        sprintf(buf, "Your Input is: %s\n", buf);
        puts(buf);
    }

    stack-4.c는 32바이트 크기 buf를 초기화한 후 데이터를 31바이트 입력받고, sprintf 함수를 통해 출력할 문자열을 저장한 뒤 출력하는 코드입니다.

    read 함수에서 받는 입력이 32바이트를 넘진 않지만, sprintf 함수를 통해 버퍼에 값을 쓸 때 "Your Input is: "문자열을 추가한다는 사실을 생각해야 합니다.
    만약 buf에 31바이트를 꽉 채운다면 "Your Input is: " 문자열이 앞에 붙어 총 길이가 32바이트를 넘게 됩니다.


    










