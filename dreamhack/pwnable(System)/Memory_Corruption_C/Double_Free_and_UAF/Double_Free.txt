Double Free :
    C언어는 프로그래머가 수동으로 동적 메모리를 관리해야 하는 언어입니다.
    메모리를 정확히 관리하지 못 해 해제된 메모리에 접근하거나,
    메모리를 할당하고 해제하지 않아 메모리 릭이 발생할 경우 이는 큰 문제로 이어질 수 있습니다. 
    이번 장에서는 올바르지 않은 동적 메모리 관리로 인해 발생하는 취약점을 알아보도록 하겠습니다.

    동적 메모리 관리에서 가장 자주 발생하는 문제는 해제된 메모리를 정확히 관리하지 않아 발생하는 문제입니다. 
    특히 Double Free 취약점은 이미 해제된 메모리를 다시 한 번 해제하는 취약점입니다. 
    ex)
        // df-1.c
        #include <stdio.h>
        #include <malloc.h>
        int main(void) {
            char* a = (char *)malloc(100);
            char *b = (char *)malloc(100);
            memset(a, 0, 100);
            strcpy(a, "Hello World!");
            
            memset(b, 0, 100);
            strcpy(b, "Hello Pwnable!");
            
            printf("%s\n", a);
            printf("%s\n", b);
            
            free(a);
            free(b);
            
            free(a);
        }

    df-1.c 는 메모리를 할당하고 할당된 메모리에 Hello World! 문자열을 복사한 뒤 이를 출력하는 코드입니다. 
    그러나 line 21에서 해제하는 메모리 a는 line 18에서 이미 해제된 메모리 포인터입니다.

    그러나 이 프로그램을 Ubuntu 18.04 환경에서 실행해보면 정상적으로 종료된다는 것을 알 수 있습니다.
    따라서 line 18에서 이미 free된 메모리 a에 대해 다시 free를 호출하는 일이 어떤 일을 발생시키는지는 정확히 모르지만, 
    해제된 메모리를 다시 해제하는 것이 불가능하지 않다는 사실을 알 수 있습니다.

    line 6에서 메모리를 할당했을 때 a가 저장하고 있는 값은 특정 힙 메모리의 주소입니다. 
    그러므로 a를 free했을 때 시스템에 해당하는 힙 메모리 할당자의 구현에 따라 메모리가 해제됩니다.
    그러나 이 때 같은 포인터를 두 번 해제하는 것과 같은 비정상적인 일이 발생하면 공격자가 프로그램을 예상치 못한 실행 흐름으로 만들 수 있습니다.

    Double Free 취약점을 공격하는 방법에 대해서는 Heap Allocator Exploitation 코스에서 자세히 다룹니다.


























