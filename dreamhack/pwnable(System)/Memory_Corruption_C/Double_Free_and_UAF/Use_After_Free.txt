Use-After-Free :
    Use-After-Free(UAF) 취약점은 해제된 메모리에 접근해서 값을 쓸 수 있는 취약점입니다.
    ex)
        // uaf1.c
        #include <stdio.h>
        #include <string.h>
        #include <malloc.h>
        int main(void) {
            char *a = (char *)malloc(100);
            memset(a, 0, 100);
            
            strcpy(a, "Hello World!");
            printf("%s\n", a);
            free(a);
            
            char *b = (char *)malloc(100); 
            strcpy(b, "Hello Pwnable!");
            printf("%s\n", b);
            
            strcpy(a, "Hello World!");
            printf("%s\n", b);
        }

    uaf1.c는 100 바이트 크기의 메모리 a 를 할당한 후 "Hello World!" 문자열을 복사합니다. 
    현재 힙 메모리 상태는 사진 1과 같습니다.

    그 다음 메모리 a를 해제하고 새로운 100 바이트 크기의 메모리 b 를 할당합니다.
    새로 할당된 메모리에는 strcpy 함수를 통해 메모리 b 에 "Hello Pwnable!" 문자열을 복사합니다.
    현재의 힙 메모리 상태는 사진 2와 같습니다.

    여기서 주의할 점은, 포인터 a에 저장된 메모리 주소 값은 바뀌지 않았다는 것과 메모리 a와 메모리 b가 같은 주소를 가리키고 있다는 점입니다.
    이는 이미 해제되었던 메모리 a가 메모리 할당자로 들어가고,
    새로운 메모리 영역을 할당할 때 메모리를 효율적으로 관리하기 위해 기존에 해제되었던 메모리가 그대로 반환되어 일어나는 일입니다.

    그러므로 이미 해제된 메모리 a에 접근하면 메모리 b가 같이 영향을 받기 때문에 프로그래머가 의도하지 않은 일이 발생할 수 있습니다. 
    line 18에서 "Hello World!" 문자열을 복사하는 포인터는 b 가 아닌, 해제된 메모리 포인터인 a 입니다.
    현재의 힙 메모리 상태는 사진 3과 같습니다.

    이미 해제된 포인터 a와 새로이 할당한 포인터 b가 같은 메모리 영역을 가리키고 있기 때문에,
    포인터 a에 "Hello World!" 문자열을 복사하고 포인터 b의 내용을 출력하면 "Hello World!" 문자열이 출력됩니다.
    ex)
        # gcc -o uaf1 uaf1.c
        # ./mem
        Hello World!
        Hello Pwnable!
        Hello World!
        # 

    메모리 할당자는 환경에 따라 다르지만, 일반적으로는 효율성을 위해 이미 해제된 메모리를 재사용하게 됩니다.
    이 때 해제된 메모리 포인터에 데이터를 쓴다면, 이미 다른 곳에서 사용되고 있는 메모리에 데이터가 작성될 수 있습니다.
    이와 같이 이미 해제된 메모리를 다시 사용해 의도하지 않은 동작을 발생시키는 취약점을 Use-After-Free(UAF) 취약점이라고 합니다.

    프로그램의 규모가 커지거나 구조가 복잡해질수록 UAF 취약점은 생각지도 못한 곳에서 발생하곤 합니다. 
    특히 여러 컴포넌트들이 결합된 형태의 프로그램에서는 그런 부분이 더욱 두드러집니다.

    가령 두 컴포넌트가 서로 상호작용하며 프로그램이 동작하는 경우,
    한 컴포넌트에서 객체나 메모리의 사용이 끝났다고 판단해 해제했지만 다른 컴포넌트에서는 이 내용이 동기화되지 않아 그 포인터를 그대로 사용할 수 있습니다.

    또, 이런 취약점은 취약점의 영향력을 판단하기 어렵습니다.
    힙 메모리 할당자는 각자 동작이 다르기 때문입니다.
    그렇기 때문에 공격이 불가능하다고 알려진 버그가 실제로는 공격 가능했던 취약점인 경우도 있었습니다.
    따라서 힙에서 발생하는 여러 취약점들을 공격하기 위해서는 각 메모리 할당자의 구현을 정확히 알아야 합니다.

    이에 대해서는 Heap Allocator Exploit 강의에서 자세히 알아볼 것입니다.
    






















