버퍼 오버플로우란? :
    이번 강의에서는 C언어에서 발생할 수 있는 메모리 커럽션 취약점 중 버퍼 오버플로우, Out-Of-Boundary, Off-by-one에 대해 자세히 알아보도록 하겠습니다.

    가장 먼저 살펴볼 취약점은 버퍼 오버플로우 취약점입니다.
    C언어에서 버퍼란 지정된 크기의 메모리 공간이라는 뜻입니다.
    버퍼 오버플로우 취약점은 그 이름에서 나타나듯이 버퍼가 허용할 수 있는 양의 데이터보다 더 많은 값이 저장되어 버퍼가 넘치는 취약점입니다.

    일반적으로 버퍼 오버플로우는 발생하는 위치에 따라 스택 버퍼 오버플로우, 힙 오버플로우와 같이 나눠서 부릅니다.
    버퍼 오버플로우는 인접한 메모리를 오염시키는 취약점이기 때문에 어떤 메모리를 오염시킬 수 있는지에 따라 공격 방법이 달라지기 때문입니다. 
    그중 스택 버퍼 오버플로우는 가장 초기에 연구되었던 형태의 버퍼 오버플로우로, 지역 변수가 할당되는 스택 메모리에서 오버플로우가 발생하는 경우입니다.

    먼저 8 바이트의 버퍼 A와 8 바이트 데이터 버퍼 B가 메모리에 선형적으로 할당되었다고 생각해 보겠습니다.
    여기서 버퍼 A에 16 바이트의 데이터를 복사한다면 이 데이터의 뒷부분은 버퍼 A를 넘어 뒤에 있는 데이터 영역인 B에 쓰여지게 됩니다.

    이때 우리는 버퍼 오버플로우가 발생했다고 하고, 이는 프로그램의 Undefined Behavior을 이끌어냅니다. 
        Undefined Behavior : "정의되어 있지 않은 동작"이라는 뜻으로, 런타임 중에 어떤 현상이 발생할 지 예측할 수 없다는 뜻입니다.

    만약 데이터 영역 B에 나중에 호출될 함수 포인터를 저장하고 있다면 이 값을 "AAAAAAAA"와 같은 데이터로 덮었을 때 Segmentation Fault를 발생시킬 것입니다.
        Segmentation Fault : 접근 권한이 없는 메모리 영역을 읽거나 쓰려고 할 때 발생하는 예외입니다.

    만약 공격자가 이를 악용한다면 어딘가에 기계어 코드를 삽입한 후 함수 포인터를 공격자의 코드의 주소로 덮어 코드를 실행할 수도 있습니다.

    예제 코드를 통해 어떤 상황에서 취약점이 발생할 수 있는지 보다 자세히 알아보도록 하겠습니다.
