Memory Corruption :

1) 스택 버퍼 오버플로우 :
    스택 버퍼 오버플로우는 가장 초기에 등장한 버퍼 오버플로우 형태 중 하나로, 
    지역 변수가 할당되는 스택 메모리에서 발생하는 취약점입니다.
    이는 데이터를 입력받거나 복사하는 부분에 대한 길이 검증이 존재하지 않거나 미흡할 경우에 발생합니다.

2) 힙 오버플로우 :
    힙 버퍼 오버플로우는 동적으로 할당된 힙 메모리 영역에서 발생하는 취약점입니다.
    이는 데이터를 입력받거나 복사하는 부분에 대한 길이 검증이 존재하지 않거나 미흡할 경우에 발생합니다.

3) Out-Of-Boundary :
    Out-Of-Boundary는 버퍼의 길이 범위를 벗어나는 인덱스에 접근할 때 발생하는 취약점입니다. 
    이는 올바르지 않은 값이 버퍼의 인덱스로 사용될 경우 발생합니다.

4) Off-by-one :
    Off-by-one은 버퍼의 경계 계산 혹은 잘못된 반복문의 연산자를 사용하는 등의 인덱스를 고려하지 않을 때 발생하는 취약점입니다.
    
5) 포맷 스트링 버그 :
    포맷 스트링 버그는 printf 나 sprintf 함수와 같이 포맷 스트링을 사용하는 함수들을 안전하게 쓰지 않을 때 발생하는 취약점입니다. 
    이는 사용자의 입력이 포맷 스트링으로 전달될 수 있을 때 발생합니다.

6) Double Free :
    Double Free는 동적으로 할당된 하나의 힙 메모리를 두 번 해제할 때 발생하는 취약점입니다.
    이는 free와 같이 동적으로 할당된 메모리를 두 번 해제할 때 발생합니다.

7) Use After Free :
    Use After Free는 동적 할당 시 힙 메모리를 효율적으로 관리하기 위해 기존에 해제되었던 메모리가 반환되어 발생하는 취약점입니다.
    이는 이미 해제된 메모리를 다시 사용할 수 있을 때 발생합니다.

8) 초기화되지 않은 메모리(Uninitialized Memory) :
    변수를 선언하거나 인스턴스를 생성할 때 초기화를 하지 않을 경우에 발생하는 취약점입니다.
    이는 할당된 변수가 기존에 있던 쓰레기 값을 가지게 되면서 발생합니다

9) Integer issues :
    Interger issues는 정수의 형 변환을 제대로 처리하지 못해 발생하는 문제입니다.
    이는 각각의 자료형에 대한 범위를 고려하지 않을 때 발생하고, 독립적인 취약점으로 사용되기보다는 다른 취약점에 연계되어 사용됩니다.



















