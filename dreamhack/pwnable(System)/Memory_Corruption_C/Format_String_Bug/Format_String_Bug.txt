Format String Bug :
    포맷 스트링 버그는 printf나 sprintf와 같이 포맷 스트링을 사용하는 함수에서 발생하는 취약점으로, 
    "%x"나 "%s"와 같이 프로그래머가 지정한 문자열이 아닌 사용자의 입력이 포맷 스트링으로 전달될 때 발생하는 취약점입니다.

    printf(buf);와 같이 사용자의 입력이 printf 함수의 인자로 그대로 전달될 때를 생각해 보겠습니다.
    "asdf"와 같은 일반적인 문자열이 전달된다면 입력한 문자열이 그대로 출력될 것입니다.
    그러나 "%x"와 "%s"와 같은 포맷 스트링이 들어간다면 이는 인자를 전달하지 않고 포맷 스트링을 전달한 것과 같은 효과가 됩니다.
    포맷 스트링 버그는 이처럼 검증되지 않은 사용자의 입력이 포맷 스트링으로 취급되어 프로그래머가 의도하지 않은 동작을 수행하는 버그입니다.

    fsb-1.c는 char형 배열 buf에 100 바이트를 입력받고 printf 함수를 통해 입력받은 버퍼를 출력하는 간단한 예제입니다.
    ex)
        // fsb-1.c
        #include <stdio.h>
        int main(void) {
            char buf[100] = {0, };
            
            read(0, buf, 100);
            printf(buf);
        }

    만약 "asdf"나 "10"과 같은 일반적인 문자열을 입력한다면 printf 문은 printf("asdf"); 혹은 printf("10"); 과 같이 됩니다. 
    이 경우에는 정상적으로 문자열이 출력됩니다.

    그러나 "%x %d"와 같은 포맷 스트링을 문자열로 입력한다면, printf(buf)는 printf("%x %d")가 됩니다.
    printf("%x %d")에는 두 번째 인자와 세 번째 인자가 전달되지 않기 때문에 쓰레기 값을 인자로 취급해 출력합니다.
    ex)
        $ ./fsb-1
        
        %x %d
        
        bf3977c0 100
        
        $

    fsb-2.c는 fprintf 함수에서 포맷 스트링 버그가 발생하는 코드입니다. fprintf 함수의 두 번째 인자는 포맷 스트링이어야 합니다.
    그러나 fsb-2.c 의 line 12에서는 포맷 스트링이 위치할 곳에 사용자의 버퍼가 위치하므로 포맷 스트링 버그가 발생하게 됩니다.

    이번에도 fsb-1.c 와 마찬가지로 "%x"나 "%d"와 같은 포맷 스트링을 입력하면 의도치 않은 값이 파일에 저장됩니다.
    ex)
        // fsb-2.c
        #include <stdio.h>
        #include <stdlib.h>

        int main(void) {
            FILE *fp = fopen("log.txt", "w");
            char buf[100] = {0, };
            
            read(0, buf, 100-1);
            
            fprintf(fp, "BUFFER-LOG: ");
            fprintf(fp, buf);
            
            fclose(fp);
            return 0;
        }

    포맷 스트링 버그는 포맷 스트링을 사용하는 함수의 인자만 잘 검토하면 되기 때문에 다른 취약점들에 비해 막기 쉽습니다.
    특히 최신 컴파일러에서는 포맷 스트링으로 전달되는 인자가 문자열 리터럴이 아닐 경우 경고 메시지를 출력하기 때문에 요즘에는 잘 발생하지 않는 취약점입니다.
        
        - 리터럴(Literal) : 소스 코드의 고정된 값을 대표하는 용어로, 변수에 대입하는 변하지 않는 데이터를 말합니다.

    그러나 포맷 스트링 버그는 프로그램에 큰 영향을 줄 수 있는 취약점이기 때문에 항상 염두해 두어야 합니다. 
    표준 C 라이브러리에서 포맷 스트링을 사용하는 대표적인 함수들은 아래와 같습니다.

        1) printf
        2) sprintf / snprintf
        3) fprintf
        4) vprintf / vfprintf
        5) vsprintf / vsnprintf

    위와 같이 포맷 스트링을 인자로 받는 함수들을 사용할 때에는 혹시 검증되지 않은 입력이 포맷 스트링으로 전달되지는 않을지 주의해야 합니다.
    포맷 스트링 버그를 활용해 Exploit하는 방법은 Linux Exploitation & Mitigation Part 2 - 5강 에서 다룹니다

    























