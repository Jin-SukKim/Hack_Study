Integer Issues - 정수의 범위 :
    C나 C++ 언어를 사용할 때 자주 발생하는 취약점들 중 하나는 정수의 형 변환을 제대로 고려하지 못해 발생하는 취약점입니다.
    특히 정수의 범위에 대한 정확한 이해 없이 작성된 코드는 자주 문제를 일으키는데, 이는 때로 치명적인 취약점을 발생시킬 수 있습니다.
    따라서 먼저 C언어의 정수 자료형이 표현할 수 있는 범위를 정확히 알아야 합니다.

    사진은 대표적인 정수 자료형들의 표현 범위를 정리한 표입니다.

    size_t와 long 자료형은 아키텍쳐에 따라 표현할 수 있는 수의 범위가 달라집니다.
    long 자료형은 32비트인 경우 int와 동일하고, 64비트인 경우 long long과 동일합니다.
    size_t 자료형은 32비트일 때 unsigned int와 동일하며, 64비트일 때는 unsigned long과 같습니다.

    묵시적 형 변환(Type Casting) :
        연산 시 연산의 피연산자로 오는 데이터들의 자료형이 서로 다를 경우, 다양한 종류의 형 변환이 일어나게 됩니다.
        이 때 프로그래머가 자료형을 직접 명시해주지 않는다면 묵시적으로 형 변환이 발생합니다. 
        프로그래머가 이런 형 변환에 대해 정확히 숙지하지 않는다면 이는 취약점으로 이어질 수 있습니다. 
        먼저 묵시적 형 변환에 대한 규칙들을 알아보도록 하겠습니다.

        1) 대입 연산 의 경우 대입 연산자의 좌변과 우변의 자료형이 다를 경우 묵시적 형 변환이 일어나게 됩니다.
            작은 정수 자료형에 큰 정수를 저장하는 경우, 작은 정수의 크기에 맞춰서 상위 바이트가 소멸됩니다.

        2) 정수 승격 은 char이나 short같은 자료형이 연산될 때 일어납니다. 
            이는 컴퓨터가 int형을 기반으로 연산하기 때문에 일어납니다.

        3) 피연산자가 불일치할 경우 형 변환 이 일어납니다.
            이 경우 int< long< long long < float<double< long double 순으로 변환되며, 작은 바이트에서 큰 바이트로, 정수에서 실수로 형 변환이 일어나게 됩니다. 
            예를 들어, int와 double을 더하면 int가 double 형으로 변환된 후 연산이 진행됩니다.

    ex) 
        // int-1.c
        #include <stdio.h>
        #include <stdlib.h>
        int main(void) {
            char *buf;
            int len;
            
            printf("Length: ");
            scanf("%d", &len);
            
            buf = (char *)malloc(len + 1);
            
            if(!buf) {
                printf("Error!");
                return -1;
            }
            
            read(0, buf, len);
        }

    앞서 설명한 규칙을 염두해 두면서 오른쪽의 int-1.c 코드를 살펴보겠습니다.
    코드에서는 len 값을 사용자에게 입력받은 후 이후 len + 1 만큼 메모리를 할당받고 그 포인터를 buf에 저장합니다. 
    그리고 read 함수를 통해 buf에 데이터를 len만큼 입력받습니다.

    그렇다면 공격자가 len 값으로 -1을 넣었을 때 프로그램의 흐름을 생각해 보겠습니다.

    len = -1이므로 line 12에서는 buf = malloc(0)이 호출되고, 리눅스에서는 malloc의 인자가 0이라면 정상적인 힙 메모리가 반환됩니다.
    이후 line 19에서 read(0, buf, -1)이 호출됩니다. 
    인자로 전달된 값은 int형 값 -1이고, read 함수의 세 번째 인자는 size_t 형이므로 묵시적 형 변환이 일어납니다.
    따라서 read 함수를 호출할 때, 32비트 아키텍처라고 가정하면 read(0, buf, pow(2, 32) - 1)이 호출됩니다.

    pow(2, 32) - 1 가 되는 이유는 size_t는 32bit에서 unsigned int 와 size가 같기 때문에 len = -1이 묵시적 형 변화이 일어난다.
    이떄 len의 size는 unsigned int의 크기인 0 ~ 2^32-1 와 같게 되고 음수가 존재하지 않기 때문에 오버플로우가 발생해서 가장 큰수로 바뀌게 된다.

    그러므로 지정된 크기의 버퍼를 넘는 데이터를 넣을 수 있어 힙 오버플로우가 발생합니다.

    ex)
        // int-2.c
        char *create_tbl(unsigned int width, unsigned int height, char *row) {
            unsigned int n;
            int i;
            char *buf;
            n = width * height;
            buf = (char *)malloc(n);
            
            if(!buf)
                return NULL;
            for(i = 0; i < height; i++)
                memcpy(&buf[i * width], row, width);
            return buf;
        }

    int-2.c의 create_tbl 함수는 width, height 값과 초기화 데이터인 row 포인터를 인자로 받고 테이블을 초기화합니다.
    line 8에서 width * height 크기의 테이블을 할당한 후 각 행에 init_row 데이터를 복사하게 됩니다.

    그러나 width, height, n이 전부 unsigned int형의 변수이기 때문에 width * height가 pow(2, 32)를 넘어가면 의도하지 않은 값이 들어가게 됩니다.
    width가 65536이고 height가 65537이라고 가정하겠습니다.
    이 경우 width * height의 값은 65536 * 65537 = pow(2, 32) + 65536이므로 실제로 저장되는 값은 65536 * 65537이 아닌 65536이 됩니다.

    그러나 memcpy 함수에서는 반복문을 순회하면서 메모리를 복사하기 때문에 버퍼 오버플로우가 발생하게 됩니다.

    
















