초기화되지 않은 메모리 (Uninitialized Memory) :
    C와 C++에서는 수많은 구조체들과 클래스들을 선언하고 이들의 인스턴스를 만들어냅니다. 
        - Instance : 실제로 컴퓨터의 저장 공간에 클래스의 구조로 할당된 실체를 의미합니다.

    변수를 선언하거나 인스턴스를 생성할 때는, 프로그래머가 의도한 경우를 제외하고는 반드시 초기화해야 합니다. 
    메모리를 초기화하지 않는다면 쓰레기 값이 들어가게 되고, 이는 프로그램의 흐름을 망가트릴 수 있습니다.

    공격자가 메모리를 정교하게 조작해 초기화되지 않은 영역에 공격자의 입력이 들어간다고 생각해 봅시다.
    만약 초기화되지 않은 메모리를 초기화되었다고 가정하는 코드가 있다면 이는 보안 취약점으로 이어질 수 있습니다.
    ex)
        // uninit1.c
        typedef struct person {
            char *name;
            int age;
        } Person;

        int main(void) {
            Person p;
            unsigned int name_len;
            
            printf("Name length: ");
            scanf("%d", &name_len);
            
            if(name_len < 100)
                p.name = (char *)malloc(name_len);
            read(0, p.name, name_len);
            
            printf("Age: ");
            scanf("%d", &p.age);
            
            printf("Name: %s\n", p.name);
            printf("Age: %d\n", p.age);
        }

    uninit1.c의 구조체 Person은 char *형 변수 name과 int형 변수 age를 멤버변수로 갖습니다.
    
    main함수에서는 Person의 인스턴스를 선언한 후 name의 길이를 name_len 변수에 입력받습니다.
    만약 길이가 100보다 작으면 malloc 함수를 통해 메모리를 할당한 후 name_len만큼 입력받습니다.
    그러나 이 코드에서는 초기화되지 않은 값의 사용으로 인해 두 가지 문제가 발생합니다.
    
    첫 번째는, name에 할당된 메모리를 초기화하지 않는다는 것입니다.
    read 함수는 입력받을 때 널 바이트와 같은 별도의 구분자를 붙이지 않습니다.
    따라서 이후 name 을 출력하는 부분에서 초기화되지 않은 다른 메모리가 출력될 수 있습니다.

    두 번째는, name_len 변수의 값이 100보다 크거나 같은 경우에 대한 예외 처리가 없다는 것입니다. 
    이 경우 p.name 은 malloc 으로 할당된 값이 아니라 쓰레기 값이 됩니다. 
    만약 공격자가 이 값을 조작할 수 있다면, line 16에서 read함수를 통해 데이터를 입력받을 때 원하는 메모리 주소에 원하는 값을 쓸 수 있게 됩니다.
































