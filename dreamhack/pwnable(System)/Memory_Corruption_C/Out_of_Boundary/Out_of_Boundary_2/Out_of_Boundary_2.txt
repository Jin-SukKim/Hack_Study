Out Of Boundary - 2 :
    ex)
        // oob-2.c
        #include <stdio.h>
        int main(void) {
            int idx;
            int buf[10];
            int win;
            
            printf("Which index? ");
            scanf("%d", &idx);
            
            idx = idx % 10;
            
            printf("Value: ");
            scanf("%d", &buf[idx]);
            
            printf("idx: %d, value: %d\n", idx, buf[idx]);
            
            if(win == 31337){
                printf("Theori{-----------redacted---------}");
            }
        }

    oob-2.c는 oob-1.c와는 달리 line 12에 idx = idx % 10이라는 코드가 추가되었습니다. 
    이 코드로 OOB 취약점을 막을 수 있을까요?

    OOB의 발생 여부를 판단할 때는 버퍼의 인덱스로 사용할 수 있는 올바른 값의 범위와 버퍼의 인덱스가 될 수 있는 모든 값의 범위를 비교하면 됩니다.
    인덱스가 될 수 있는 값의 범위가 사용할 수 있는 올바른 값의 범위의 부분집합이라면 안전하다고 할 수 있을 것입니다. 
    그렇다면 oob2.c에 이를 적용해 보겠습니다.

    - buf의 인덱스로 써야 하는 값의 범위: 0~9
    - buf의 인덱스로 쓸 수 있는 값의 범위: int 형의 범위 % 10

    양의 정수를 10으로 나눈 나머지로 가능한 값은 0에서 9까지기 때문에 이는 얼핏 보면 안전해 보입니다. 
    그러나 C언어에서는 피연산자가 음수라면 나머지 연산의 결과도 음수가 될 수 있습니다.
    따라서 이 경우, buf의 인덱스로 쓸 수 있는 값의 범위는 -9 ~ 9이므로 나머지가 음수가 되게 한다면 OOB를 발생시킬 수 있습니다.

ex2)
    bash-3.2$ ./oob-2
    Which index? -1
    Value : 31337
    idx: -1, value: 31337
    Theori{0cf12a1e0ac0b202b8293054adda7288}

    맨 처음 버퍼의 자리 뒤에 win의 index가 시작된다. 
    버퍼의 맨 처음 index의 값이 0이므로 win의 index의 값이 -1부터 시작된다.

    스택 영역은 메모리의 높은 주소에서 낮은 주소 순으로 할당됩니다.
    그렇기 때문에 index -1인 win이 제일 낮은 주소로 저장된다.































