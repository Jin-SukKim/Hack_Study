Out Of Boundary :
    ex)
        // oob-1.c
        #include <stdio.h>
        
        int main(void) {
            int win;
            int idx;
            int buf[10];
            
            printf("Which index? ");
            scanf("%d", &idx);
            
            printf("Value: ");
            scanf("%d", &buf[idx]);
            
            printf("idx: %d, value: %d\n", idx, buf[idx]);
            
            if(win == 31337){
                printf("Theori{-----------redacted---------}");
            }
        }

    OOB(Out Of Boundary)는 버퍼의 길이 범위를 벗어나는 인덱스에 접근할 때 발생하는 취약점입니다.

    oob1.c에서는 int형 배열 buf를 선언하고 idx 값을 입력받습니다. 
    그다음 buf[idx]에 정수를 입력받고 idx와 buf[idx] 값을 출력합니다.

    여기서 주의해야 할 점은 buf의 길이는 10이므로 buf의 인덱스로 사용될 수 있는 올바른 값은 0 이상 10 미만의 정수라는 사실입니다. 
    그러나 코드에서는 line 10에서 입력받은 idx 값을 인덱스로 사용할 때 해당 값이 올바른 범위에 속해 있는지 검사하지 않습니다.
    C언어는 인덱스를 이용해 버퍼에 접근할 때 인덱스의 범위에 대한 별도의 경계 검사가 존재하지 않기 때문에
    올바르지 않은 값을 사용한다면 buf의 영역 밖에 있는 값에 접근할 수 있습니다.

    그렇다면 idx와 buf[idx]에 적당한 값을 줘서 win 변수를 31337로 만들어봅시다.

ex1) 
    int 의 bit size는 4byte이므로 index 1당 버퍼의 4번쨰에 저장된다.
    처음 버퍼의 길이를 정할떄 int 10을 넣었으므로 0~27 byte가 길이로 저장된다.
    28의 경우 index가 10일때 이므로 28이후론 Out of Boundary이다.

    즉 win 변수를 31337로 만들기 위해 index를 11로 설정해 win 첫번쨰 자리에 31337변수가 들어가게 하면된다.

    bash-3.2$ ./oob-1
    Which index? 11
    Value : 31337
    idx: 11, value: 31337
    Theori{710fbd54c4617707aacef35b88c5b6da}

    숫자가 들어갈 자리 뒤에 3 자리가 더 있는 이유는 int의 최대 값이 2,147,483,647이기 때문이다.
    이 경우 각 자리의 hex가 0xff가 되어 꽉찬다. 최대 값에 1을 더하면 자료형이 담을 수 있느 크기를 초과 하게 된다.
    결국 오버플로우가 일어나서 int의 최소값인 -2,147,483,648이 된다. 이렇게 되면 다시 +(양수)로 바꿀수 없다.
    그 이유는 오버플로우가 일어나서 바뀐 경우라 양수로 바꾸려고 무엇을 하든 다시 오버플로우를 일으키기 때문이다.































