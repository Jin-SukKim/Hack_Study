Logical Bug :
    로지컬 버그는 프로그램의 메모리 관리 실수로 인해 발생하는 메모리 커럽션 취약점과 달리 프로그램의 논리적 오류로 인해 발생합니다.
    논리적 오류는 프로그램이 부정확하게 동작하지만 크래시가 발생하지 않는 경우입니다.
    이와 같은 이유로 로지컬 버그는 발견하기 어려우며 오랜 시간 동안 발견되지 않은 채로 프로그램 내에 존재할 수도 있습니다.

    이로 인해 프로그램이 기존의 의도대로 동작하지 않아 접근이 불가능한 자원에 접근하여 정보를 탈취하거나 조작할 수 있습니다. 
    이와 같은 문제는 C 혹은 C++과 같은 컴파일 언어 뿐만이 아닌 인터프리터 언어에서도 발생합니다.

    logical.c는 잔고에서 원하는 금액을 출금하는 C 코드 예제입니다.
    ex)
        // gcc -o logical logical.c 
        #include <stdio.h>
        int withdraw(int balance, int money) {
            return balance - money;
        }
        
        int main() {
            int balance = 10000;
            int amount = 0;
            int result = 0;
           
            printf("Your balance: %d\n\n", balance);
            printf("Please enter the amount to withdraw: ");
            scanf("%d", &amount);
            
            result = withdraw(balance, amount);
            
            printf("Check your balance: %d", result);
            
            return 0;
        }

    withdraw 함수에서는 잔고에서 출금 금액을 뺀 값이 반환되는데, 음수에 대한 예외처리가 없기 때문에 이는 잘못된 결과를 낼 수 있습니다.
    ex)
        $ ./logical
        Your balance: 10000
        
        Please enter the amount to withdraw: -100000
        Check your balance: 110000

    해당 장에서는 이와 같이 논리적 오류로 인해 생길 수 있는 문제점들에 대해서 알아보도록 하겠습니다.
    

1) 커맨드 인젝션
    커맨드 인젝션은 프로그램이 적절한 검증 없이 사용자의 입력을 셸 명령어로 실행할 때 발생하는 취약점입니다.
    여러 명령어를 한 줄로 실행할 수 있게 하는 메타 문자를 사용해서 임의의 명령어를 추가로 삽입해 임의 코드 실행까지 이어질 수 있습니다.

2) 레이스 컨디션
    레이스 컨디션은 프로세스 혹은 스레드 간 자원 관리 실수로 발생하는 상태입니다. 
    뮤텍스가 걸려있지 않은 하나의 자원에 대해 두 개 이상의 프로세스 및 스레드가 접근할 수 있다면 프로그램의 가정을 파괴할 수 있습니다.

3) Path Traversal
    Path Traversal은 프로그래머가 의도하지 않은 외부의 파일에 접근할 수 있는 취약점입니다.
    .과 /와 같이 특정 디렉토리를 벗어날 수 있는 문자에 대해 검증이 존재하지 않을 경우에 발생할 수 있습니다. 
    이를 이용하여 프로세스의 자원과 서버 설정 파일 등의 민감한 정보를 유출할 수 있습니다.

4) 환경 변수 공격
    환경 변수는 프로세스가 동작하는 방식에 영향을 미칠 수 있는 동적인 값들의 모임입니다.

    PATH 환경 변수에 경로를 넣어두면 해당 경로에 있는 파일은 현재 디렉토리에 있는 파일과 같이 실행할 수 있습니다.
    프로그램 내에서 상대 경로를 사용하여 명령어를 실행할 경우에 PATH 환경 변수를 조작하여 공격자가 원하는 명령어를 실행할 수 있습니다.

    LD_PRELOAD 환경 변수는 로더가 프로세스에 로드 할 라이브러리 파일을 지정할 수 있습니다. 
    프로그램에서 함수가 호출되면 제일 먼저 LD_PRELOAD 환경 변수에 등록된 라이브러리 파일을 참조하여 호출합니다.
    라이브러리를 새로 생성하여 프로그램에서 호출하는 함수의 이름과 동일한 함수를 만들고 LD_PRELOAD 환경 변수에 해당 라이브러리 파일을 전달하면 원하는 코드를 실행할 수 있습니다.
    



































