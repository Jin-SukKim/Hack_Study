Return Address Overwrite - RET Overwrite :
    x86 아키텍처의 ret 명령어는 esp 레지스터가 가리키고 있는 주소에 저장된 값으로 점프하는 명령어입니다.

    vuln 함수가 리턴할 때의 esp 레지스터가 가리키고 있는 주소에는 0x6a6a6a6a가 저장되어 있습니다.
    이후 ret 명령어가 실행되면 eip 레지스터는 0x6a6a6a6a가 됩니다.

    ex)
        (gdb) x/i 0x8048475
            0x8048475 <vuln+58>:	ret    
        (gdb) b*0x8048475
        Breakpoint 3 at 0x8048475
        (gdb) c
        Continuing.
        
        Breakpoint 3, 0x08048475 in vuln ()
        (gdb) x/wx $esp
        0xffffd520:	0x6a6a6a6a
        (gdb) 

    ex)
        (gdb) x/i $eip
        => 0x8048475 <vuln+58>:	ret    
        (gdb) si
        0x6a6a6a6a in ?? ()
        (gdb) print $eip
        $1 = (void (*)()) 0x6a6a6a6a
        (gdb) 

    스택 버퍼 오버플로우 취약점을 통해 프로그램 실행 흐름이 조작되었습니다.
    eip 레지스터를 임의의 값으로 바꿀 수 있기 때문에 원하는 주소의 코드를 실행할 수 있습니다.

    Linux Exploitation은 로컬 환경의 타겟을 대상으로 하기 때문에 익스플로잇 최종 목표는
    프로그램의 실행 흐름을 조작하여 /bin/sh 혹은 셸 바이너리를 실행하는 것입니다.

    셸은 커맨드 라인의 명령어, 혹은 스크립트를 받아 서버에서 그에 맞는 기능을 실행시켜주는 프로그램입니다. 
    이렇듯 프로그램의 흐름을 조작해 셸을 실행하는 이유는, 권한 상승이나 본래의 프로그램이 의도치 않은 행위를 하기 위해서 입니다.
    취약점이 존재하는 바이너리를 익스플로잇하여 셸 프로그램을 실행하면 해당 바이너리 권한의 셸을 획득하여 서버에 임의의 명령어를 실행할 수 있게 됩니다.






























