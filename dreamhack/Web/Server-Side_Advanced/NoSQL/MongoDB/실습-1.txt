MongoDB - NodeJS :
    오른쪽 탭은 NodeJS에서 MongoDB를 사용하는 코드입니다.

    Line 11~14 : 쿼리의 내용이 {'uid': input, 'upw': input} 으로 구성됩니다. req.body에 해당하는 부분은 문자열 형식이 아닌 array, object 등의 타입도 넣을 수 있습니다.

    문자열 형식이 아닌 object 형태로 삽입이 가능하면 Query Operator를 사용할 수 있고 의도한 흐름과 다르게 작동시킬 수 있습니다.

    not equal($ne)연산자를 사용해서 uid 또는 upw를 모르는 상황에서도 원하는 데이터 조회를 할 수 있습니다.
    
    {"uid": {"$ne": ""} => uid가 ''와 같지않은 데이터 조회
    {"upw": {"$ne": ""} => upw가 ''와 같지않은 데이터 조회
    
    아래의 인터랙티브 모듈을 통해 실습해보며, Epilogue-Review Quiz의 정답인 "admin"의 비밀번호를 획득해 보시기 바랍니다.

Source Code :
    const express = require('express');
    const app = express();
    app.use(express.json());
    app.use(express.urlencoded( {extended : false } ));
    
    const mongoose = require('mongoose');
    const db = mongoose.connection;
    mongoose.connect('mongodb://localhost:27017/', { useNewUrlParser: true, useUnifiedTopology: true });
    
    app.post('/query', function(req,res) {
        db.collection('user').find({
            'uid': req.body.uid,
            'upw': req.body.upw
        }).toArray(function(err, result) {
            if (err) throw err;
            res.send(result);
    });
    });
    
    const server = app.listen(80, function(){
        console.log('app.listen');
    });

Input :
    Post Data (Content-Type: application/json)
    
    input : {"uid": "guest", "upw": "guest"}
    
    Query: db.user.find({"uid":"guest","upw":"guest"})
    Result: [{"uid":"guest","upw":"guest","_id":"GunEbh2emOQNWIMX"}]

답 :
    Post Data (Content-Type: application/json)
    
    input : {"uid": "admin", "upw": {"$ne": ""}}
    
    Query: db.user.find({"uid":"admin","upw":{"$ne":""}})
    Result: [{"uid":"admin","upw":"mango","_id":"ajoS3QYjspZBVUvr"}]

upw에 not equal($ne)연산자를 이용하여 upw값에 상관없이 uid가 "admin"인 데이터를 조회할 수 있습니다.
{"uid": "admin", "upw": {"$ne":""}}

    Syntax: {field: {$ne: value} }

    $ne selects the documents where the value of the field is not equal to the specified value. 


























