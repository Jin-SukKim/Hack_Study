SQL Injection - Exploit Technique :
    SQL Injection 공격은 대표적으로 두가지 목적이 있습니다.
        1) 정보 탈취 (기밀성 침해)
        2) 정보 수정/삭제 (무결성 침해)

    일반적으로 위 두가지 사항 모두 SQL Injection을 통해 기존에 권한이 없는 정보에 접근하는 것이 공통점 입니다.

    SQL Injection 취약점은 일반적으로 임의의 SQL 구문을 실행할 수 있도록 하지만,
    입력 형식과 필터링 및 데이터베이스 엔진의 종류에 따라 가능한 구문과 공격의 영향이 제한될 수 있습니다.

    이를 위해 웹 서비스에 적용되어 있는 방어 기법을 이해하고 우회할 수 있는 방법을 알아보는 것이 좋습니다.

    밑에서는 Blackbox 점검 중 SQL Injection 취약점을 발견하고 공격의 목적을 달성하기까지의 과정에 대해 작성한 내용입니다.

1) SQL Injection 취약점 발견 :
    SQL Injection이 발생 여부를 판단하는 방법은 여러가지 방법이 있습니다.
    대표적으로 확인하는 방법들은 아래와 같습니다.

    - HTTP Response Status Code를 통해 오류가 발생하는지 확인
    - DBMS의 오류 메시지를 통해 취약점 가능성 확인
    - 웹 어플리케이션에서 변조된 SQL구문이 실행된 데이터가 반환되는지 확인

2) 구문 예측 / DBMS 정보 획득 :
    - 사용자의 입력 데이터를 처리하는 구문을 예측합니다.
        ex)
            예를 들어 일반적으로 로그인 로직이 처리되는 곳에서는 데이터베이스에서
            회원의 정보를 가져오기 위해 SELECT구문의 WHERE절에서 사용자의 입력데이터를 처리합니다.
            또한 회원 가입 로직이라면 새로운 데이터를 추가하기 위해 INSERT구문의 VALUES절에서 사용자의 입력데이터를 처리할 것입니다.

    - DBMS의 정보를 획득하여 Exploit 작성을 위한 정보를 획득합니다.

3) Exploit 작성 :
    - 사용할 공격 기법을 선정합니다.
      또는 subquery구문을 통해 직접적으로 정보를 노출할 수 있는 구문을 사용하거나,
      정보가 노출되지 않는다면 Blind SQL Injection을 사용합니다.

    - WAF과 같이 SQL Injection을 방어하는 로직 등이 존재할 경우 우회 가능성을 판단합니다.

4) 정보 탈취 및 수정/삭제 :
    - 시스템 테이블 등을 이용하여 데이터베이스의 정보 등을 획득하며,
      저장된 데이터를 탈취하거나 수정/삭제 하여 공격의 목적을 달성할 수 있습니다.


    







































