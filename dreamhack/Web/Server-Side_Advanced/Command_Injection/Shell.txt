Shell :
    Shell은 운영 체제(OS)에서 커널과 사용자의 입/출력을 담당하는 시스템 프로그램입니다. 
    사용자가 입력하는 데이터를 해석한 후 커널(Kernel)에 요청하고, 요청에 대한 결과를 사용자에게 반환합니다.

    Windows나 Linux에서 사용자가 콘솔을 통해 입력한 명령어를 처리하는 것이 가장 대표적인 예시입니다.

    Command Injection 심화 과정에 대해 배우기 전에 Shell을 배워야하는 이유는 OS 명령어는 쉘 위에서 동작하므로 쉘의 영향을 받기 때문입니다.
    
    OS 명령어 실행 시 자식 프로세스를 생성한 후 execve("/bin/sh", ["sh", "-c", "id"], [/* environments */]])를 
    호출하여 어플리케이션이 요청한 명령어를 실행하는 것을 확인할 수 있습니다.
    ex)
        # -c 인자를 읽어들여 명령어를 실행
        sh -c "command"

    즉, 어플리케이션을 통해 호출한 OS명령어 또한 쉘을 통해 실행한다는 것을 알 수 있습니다.

    밑의 내용은 어플리케이션에서 OS 명령어를 호출하는 코드를 실행한 상황을 디버깅 툴을 통해 확인한 내용입니다.

    Tip : strace는 어플리케이션이 사용하는 시스템 콜, Unix 시그널 발생 등을 확인할 수 있는 디버깅 툴입니다.
          -f옵션은 자식 프로세스 생성 시, 자식 프로세스까지 추적하도록 합니다.

    ex) PHP
        # php -r <code> 
        $ strace -f php -r "system('id');"
        execve("/usr/bin/php", ["php", "-r", "system('id');"], [/* 28 vars */]) = 0
        ...
        lseek(2, 0, SEEK_CUR) = -1 ESPIPE (Illegal seek)
        pipe2([4, 5], O_CLOEXEC) = 0
        clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f9b32033a10) = 10980
        close(5)             = 0
        fcntl(4, F_SETFD, 0) = 0
        read(4, strace: Process 10980 attached
        <unfinished ...>
        [pid 10980] set_robust_list(0x7f9b32033a20, 24) = 0
        [pid 10980] dup2(5, 1) = 1
        [pid 10980] execve("/bin/sh", ["sh", "-c", "id"], [/* 28 vars */]) = 0

    ex) Python(os.system)
        # python -c cmd
        $ strace -f python -c "import os;os.system('id')"
        execve("/usr/bin/python", ["python", "-c", "import os;os.system('id')"], [/* 28 vars */]) = 0
        ...
        clone(child_stack=0, flags=CLONE_PARENT_SETTID|SIGCHLD, parent_tidptr=0x7ffc2d43dd3c) = 11542
        wait4(11542, strace: Process 11542 attached
        <unfinished ...>
        [pid 11542] rt_sigaction(SIGINT, {0x535940, [], SA_RESTORER, 0x7f9cb22ea4b0}, NULL, 8) = 0
        [pid 11542] rt_sigaction(SIGQUIT, {SIG_DFL, [], SA_RESTORER, 0x7f9cb22ea4b0}, NULL, 8) = 0
        [pid 11542] rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
        [pid 11542] execve("/bin/sh", ["sh", "-c", "id"], [/* 28 vars */]) = 0

    Linux(Unix) 운영체제에서 많이 사용되는 명령어에는 디렉토리의 목록을 출력하는 ls 명령어와 현재 디렉토리를 변경하는 cd 명령어가 있습니다.

    which와 whereis 명령어는 인자로 입력된 명령어의 실제 위치를 찾아줍니다.
    ex)
        $ which ls
        /bin/ls
        
        $ whereis ls
        ls: /bin/ls /usr/share/man/man1/ls.1.gz

    위 결과를 통해 ls 명령어의 실제 위치는 /bin/ls임을 알 수 있습니다.
    하지만 사용자는 쉘에서 ls 명령어를 사용할 때 전체 경로를 사용하지 않고 ls만 입력하더라도 ls 명령어를 실행할 수 있습니다.

    위와 같이 명령어를 사용할 수 있는 이유로는 쉘의 환경 변수가 있습니다.
    
    쉘의 환경 변수는 env 또는 export명령어 등을 통해 확인할 수 있습니다.
    ex)
        $ env
        ...
        SHELL=/bin/bash
        USER=dreamhack
        PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
        PWD=/tmp
        LANG=en_US.UTF-8
        HOME=/home/dreamhack
        OLDPWD=/
        _=/usr/bin/env
        ...

    환경 변수에는 PATH 변수가 설정되어 있습니다. 
    사용자가 ls 명령어를 입력하면 해당 PATH 변수에 설정되어 있는 경로 중 ls 명령어의 위치를 찾아 실행합니다. 
    환경 변수에는 PATH 변수 외에도 현재 쉘에 대한 정보(SHELL), 현재 경로(PWD), 이전 경로(OLDPWD) 등 다양한 정보가 포함되어 있습니다.

    ls와 함께 많이 사용되는 명령어 중에는 현재 디렉토리를 변경하는 cd 명령어가 있습니다.
    ex)
        $ which cd
        $ whereis cd
        cd:

    cd 명령어는 위와 같이 실제 위치가 존재하지 않는 명령어이지만,
    쉘의 내장 명령어(shell builtin)로서 쉘을 통해 명령어를 실행할 경우 사용할 수 있는 명령어입니다.

    Shell builtin은 cd 외에도 다양한 명령어들이 해당되며 해당 내장 명령어들은 man 명령어를 통해 쉘 매뉴열에서 확인할 수 있습니다.
    ex)
        $ man bash
        ...
            cd [-L|[-P [-e]] [-@]] [dir]
                    Change the current directory to dir. ...
        ...

Command Injection 취약점 공격 시 유용하게 사용 가능한 메타 문자들 :

메타 문자   설명                        Example

    .       Location                    $ pwd
                                        /tmp
                                        $ cd .. ; pwd
                                        / 

    .       sequence expression         $ echo {1..10}
                                        1 2 3 4 5 6 7 8 9 10 

    >       output redirection          $ id > /tmp/res.txt
            (write mode)                $ cat /tmp/res.txt
                                        uid=1000(dreamhack) gid=1000(dreamhack) groups=1000(dreamhack)

    >>      output redirection          $ echo 'hello world !' >> /tmp/res.txt
            (append mode)               $ id >> /tmp/res.txt
                                        $ cat /tmp/res.txt
                                        hello world !
                                        uid=1000(dreamhack) gid=1000(dreamhack) groups=1000(dreamhack)

    &>      standard output and         $ cat /etc/pass* &> /tmp/res.txt
            error redirection (비표준)  $ cat /tmp/res.txt 
                                        root:x:0:0:root:/root:/bin/bash
                                        daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
                                        ...
                                        cat: /etc/passwd-: Permission denied

    >&      file descriptor redirection $ cat /etc/pass* > /tmp/res.txt 2>&1
                                        $ cat /tmp/res.txt 
                                        root:x:0:0:root:/root:/bin/bash
                                        daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
                                        ...
                                        cat: /etc/passwd-: Permission denied

    <       input redirection           $ cat</etc/passwd
            (read mode)                 root:x:0:0:root:/root:/bin/bash
                                        daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
                                        bin:x:2:2:bin:/bin:/usr/sbin/nologin
                                        sys:x:3:3:sys:/dev:/usr/sbin/nologin
                                        ...

    { }     Brace Expansion             # stdout group example
            (Group Command)             $ { id; ls; } > /tmp/res.txt
                                        $ cat /tmp/res.txt
                                        uid=1000(dreamhack) gid=1000(dreamhack) groups=1000(dreamhack)
                                        bin
                                        boot
                                        dev
                                        etc
                                        home
                                        ...

    ?       wildcards                   $ ls /bin/c??
            (question mark)             /bin/cat
    
    *       wildcards                   $ ls /bin/c*
            (asterisk)                  /bin/cat  /bin/chacl  /bin/chgrp  /bin/chmod  /bin/chown  /bin/chvt  /bin/cp  /bin/cpio

    ~       Home Directory              $ cd ~
                                        $ pwd
                                        /home/dreamhack


















