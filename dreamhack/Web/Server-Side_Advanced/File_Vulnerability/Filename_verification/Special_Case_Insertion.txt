1) 파일명 NULL 문자 삽입 :
    C 언어에서는 문자열의 끝은 널(NULL) 문자로 나타내는 관례가 있으나, 문자열과 문자열 길이를 따로 관리해 문자열에 NULL 문자가 등장하도록 할 수 있습니다.

    대부분의 웹 프로그래밍 언어는 문자열에 NULL 문자를 허용하며, 쿼리 파라미터 등에서 %00 으로 지정할 수 있습니다.

    그러나 운영 체제에서는 일반적으로 C 언어 관례를 따라 파일명에 NULL 문자가 허용되지 않으며, 
    만약 파일명을 나타내는 문자열에 NULL 문자가 삽입되면 이는 파일명의 끝으로 인식되게 됩니다.

        URL 인코딩 입력         C 문자열 표기           실제 인식된 파일명

        foo/bar.jpg            "foo/bar.jpg"            foo/bar.jpg

        hello%00world          "hello\0world"           hello

        baz/qux.cfg%00.jpg     "baz/qux.cfg\0.jpg"      baz/qux.cfg

    만약 웹 응용에서 NULL 문자를 불허하지 않으면서 파일명의 끝으로 확장자 등을 검사한다면, 
    공격자는 위와 같이 실제 확장자 뒤에 NULL 문자를 삽입함으로써 검사를 우회할 수 있습니다.

    이를 방어하기 위해 Apache 등의 웹 서버는 NULL 문자를 400 Bad Request 응답과 함께 거부하며, 
    Python 및 PHP 등 언어의 내장 라이브러리 함수들은 파일명에 NULL 문자가 있는지 검사합니다. 
    그러나 웹 서버나 내장 함수 이외에 사용하는 다른 라이브러리에 이러한 취약점이 존재하거나
    파일명을 설정 파일 등 다른 위치에 저장할 경우 문제가 발생할 수 있습니다.

    이를 방어하기 위해서는 파일명에 NULL 문자 및 허용되지 않는 특수문자가 있는지 검사하는 것이 좋습니다.

2) Path Traversal :
    윈도나 Unix 계열 등의 운영 체제에서는 다음과 같이 특수한 의미를 지니는 디렉터리명이 존재합니다. 
    (윈도에서는 / 대신 \ 사용)

        디렉터리 명칭       의미                예시

            .           현재 디렉터리        foo/. = foo
                                            foo/bar/././baz = foo/bar/baz

            ..          상위 디렉터리        bar/baz/.. = bar
                                            alpha/../beta = beta
                                            foo/.. = . (현재 디렉터리로 복귀)
                                            foo/bar/baz/qux/../../quux = foo/bar/quux
                                            /home/../../../../../ (반복) = /

    만약 웹 응용에서 위와 같은 디렉터리 명칭을 지닌 경로를 탐지하지 못한다면,
    공격자는 foo/../../../../etc/passwd 와 같이 상위 경로에 파일 생성할 수 있게 됩니다.

    추가적으로, 윈도에서는 foo\bar\..\baz 와 같은 구문에서 bar 가 실제 존재하지 않거나 디렉터리가 아니어도 foo\baz 로 해석되게 됩니다.
    이는 디렉터리가 무조건 존재해야 하는 리눅스와 대비대는 점으로 운영체제 간 응용을 포팅하는 도중 이러한 취약점이 발생할 수 있습니다.

        파일시스템                          리눅스                                  윈도우

    foo [디렉터리]                      foo/bar/../qux → foo/qux                foo\bar\..\qux → foo\qux
        ㄴ bar [디렉터리]               foo/qux/../bar                          foo\qux\..\bar → foo\bar
            ㄴbaz [파일]                (-ENOTDIR: qux 는 디렉터리가 아님)       foo\corge\..\qux → foo\qux
            ㄴxyzzy [심볼릭 링크]       foo/corge/../qux                    
            → ../../quux/quuz          (-ENOENT: corge 는 존재하지 않음)
        ㄴqux [파일]                    quux/quuz/.. -> quux
                                        foo/bar/xyzzy/.. → quux
    quux [디렉터리]
        ㄴ quuz [디렉터리]





































