파일명 문자열 치환 우회 (File name substitution bypass):
    기본 설정에서 대부분의 웹 서버는 확장자명으로 파일 종류를 판별합니다.
    특히, .php 확장자를 가진 파일은 PHP 스크립트로 실행됩니다.
    따라서 상당수 웹 서비스는 이러한 확장자를 가진 파일을 업로드하는 것을 거부합니다.

    만약 이러한 파일명 여과가 특정 부분문자열(substring)만 치환하거나 제거하는 방식으로 이루어진다면, 
    공격자는 여과되는 문자열 사이에 또다른 치환되는 문자열을 넣는 방식으로 우회할 수 있습니다.

    .php 를 제거한다고 가정하였을때 여과 예시는 다음과 같습니다.

        원본                치환 과정                   결과

    file.jpg            file.jpg (그대로 유지)       file.jpg

    webshell.php        webshell.'php'              webshell

    webshell.ph.phpp    webshell.ph.'php'p          webshell.php

    ex)
        >>> import os
        >>> import os.path
        >>> 
        >>> def filter_ext(pathname, ext):
        ...     return pathname.replace(ext, '')
        ... 
        >>> 
        >>> filter_ext('file.jpg', '.php')
        'file.php'
        >>> 
        >>> filter_ext('file.php', '.php')
        'file'
        >>> 
        >>> filter_ext('file.ph' + '.php' + 'p', '.php')
        'file.php'
        >>> 
        >>> filter_ext('file.ph.phpp', '.php')
        'file.php'
        
        >>> def filter_ext(pathname, ext):
        ...     if os.path.splitext(pathname) == ext:
        ...         raise ValueError('invalid path!')
        ...     return pathname
        ... 
        >>> 
        >>> filter_ext('file.jpg', '.php')
        'file.jpg'
        >>> 
        >>> filter_ext('file.php', '.php')
        Traceback (most recent call last):
            File "<stdin>", line 1, in <module>
            File "<stdin>", line 3, in filter_ext
        ValueError: invalid path!
        >>> 
        >>> filter_ext('file.ph.phpp', '.php')
        Traceback (most recent call last):
            File "<stdin>", line 1, in <module>
            File "<stdin>", line 3, in filter_ext
        ValueError: invalid path!





























