IDOR (Insecure Direct Object Reference) :
    변조된 파라미터 값이 다른 사용자의 오브젝트 값을 참조할 때 발생하는 취약점입니다.

    안전하지 않은 객체 참조 : 사용하는 객체 참조 키가 사용자에 의해 조작됐을 때 조작된 객체 참조 키를 통해 객체를 참조,
                            해당 객체 정보를 기반으로 로직이 수행

    주된 원인 :
        - 사용자 입력 데이터에 의해 참조하는 객체가 변하는 기능에서 사용자가 참조하고자 하는 객체에 대한 권한 검증이 올바르지 않아 발생

        ex) 아래 테이블과 같이 사용자의 금액을 저장하는 DB존재, 
            자신의 금액을 조회를 하는 기능에서 Account Number가 조작 가능, 
            서버에서 검증을 하지 않을 경우 자신의 Account Number가 아닌 다른 사용자의 Account Number로 변경하여 다른 사용자의 금액도 조회 가능

            Account Number  userID  amount

            1000            admin   1000
            1001            guest   500
            1002            guest2  100
            1003            dream   0

    IDOR 취약점은 비즈니스 로직에 따라 조회/삭제/수정/추가 등의 다양한 형태를 다른 사용자의 객체로 수행

실습 :
    잔액 조회 코드

    @app.route('/amount')
    def amount():
        accountNumber = request.form['accountNumber']
        accountInfo = get_account_info_by_number(accountNumber)
        return accountInfo

    송금 기능 코드

    @app.route('/send')
    def send():
        sendNumber = request.form['sendNumber']
        recvNumber = request.form['recvNumber']
        amount = request.form['amount']
        if amountCheck(sendNumber, amount):
            sendResult = sendAmount(sendNumber, recvNumber, amount)
            return sendResult
        ...

    검증하지 않기 때문에
    잔액 조회 에서 Account Number 1000, ~ 등 조회후
    공금 기능에서 조회한 돈을 dream에게 보낸다

입력:
    잔액 조회 코드
    계좌 번호 : 1005

출력:
    Account Number : 1005
    userId : hacker
    Amount : 31337

입력:
    송금 계좌 : 1005
    받는 계좌 : 1003
    금액 : 31337

출력:
    송금이 완료되었습니다

방어:
    객체 참조 시 사용자의 권한을 검증하는게 가장 중요
        - 사용자 권한을 벗어난 행동 불가능하게 권한등을 분리해 관리 필요

    로그인 등의 기능을 통해 사용자 인증을 거친 후 사용하는 서비스에서
    사용자 식별을 위한 정보를 사용자의 입력 데이터로 구분하기 보다는 사용자가 요청 시 전달하는 세션을 통해 서버 내에서 처리하는 것이 안전

    객체 참조 키 = 무작위 문자 생성 등 추측하기 어렵게 만듬

Account Number      userID  amount

E9C76903A69BD ...   admin   1000
F5760E03C12D6 ...   guest   500
AAE0B3CFDE6A ...    guest2  100
B420D886656AB ...   dream   0



