Business Logic Vulnerability(비즈니스 로직 취약점) : 
    인젝션, 파일 관련 취약점들과 다르게 정상적인 흐름을 악용하는 것을 의미

    Business logic : 규칙에 따라 데이터를 생성, 표기, 저장, 변경하는 로직, 알고리즘 등
        ex) 게시판 서비스 = 회원가입 + 로그인 + 게시물 작성 + 수정 + 삭제 등 로직 합쳐

    서비스 기능에서 적용되어야 할 로직이 없거나 잘못 걸계된 경우 발생

    게이물 수정 비즈니스 로직 예시 :
        - 게시물 수정 비즈니스 로직
        1. 사용자가 게시물 수정을 요청한다.
        2. 로그인된 사용자인지 확인한다.
        3. 수정을 요청한 사용자가 해당 게시물을 수정 할 수 있는 권한인지 확인한다.
        4. 2,3번 과정이 확인되면 데이터베이스에 사용자가 입력한 정보로 수정한다.

    3번 과정이 설계 과정의 실수로 인해 누락될 경우 악의적인 공격자는 다른 사용자의 게시물도 수정할 수 있는 비즈니스 로직 취약점 발생

Business Logic Vulnerability :
    정상적인 흐름에서 검증 과정의 부재 및 미흡으로 인해 정상적인 흐름이 악용되는 취약점입니다.

    어플리케이션의 검증 부재 또는 미흡의 이유로 발생
    
    ex)
        후기 작성 코드 :
        @app.route('/reviewWrite')
        def review_write():
            userName = session['username']
            contents = request.form['contents']
            
            if review_Check(userName):
                return "Already write."
            result = review_Insert(userName, contents)
            pointResult = userPoint(userName, 100)
            if result and pointResult:
                return "write success."
            else:
                return "write fail."

        후기 삭제 코드 :
        @app.route('/reviewDelete')
        def review_delete():
            userName = session['username']
            idx = request.args.get('idx')
            
            if review_owner_check(userName):
                return "owner check fail."
            result = review_Delete(idx)
            
            if result :
                return "delete success."
            else:
                return "delete fail."

        // 후기 작성 시 마다 100포인트 지급하는데 후기 작성하고 삭제하는 행위 반복해도 포인트 차감 없어 무제한 적립 가능 취약점.


방어 :
후기 삭제 코드 10번쨰 줄에 userPoint(userName, -100) 추가

비즈니스 로직을 확실하게 이해하고, 설계 및 개발 단계에서 어떤 위협이 발생할 수 있는지 의협을 파악하고 방어하는 것이 중요




