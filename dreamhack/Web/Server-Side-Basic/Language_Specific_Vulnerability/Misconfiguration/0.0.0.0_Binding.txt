0.0.0.0 바인딩 : (0.0.0.0 = 모든 IPv4 주소)
    내부 서비스 네트워크 또는 특정 네트워크에서만 접근할 수 있도록 
    접근 제어가 이루어져야 할 서버들이 개발 또는 운용상의 편의를 위해 
    0.0.0.0으로 바인딩 되어있다가 서비스 환경으로 변경되었음에도 
    바인딩 주소를 그대로 사용할 때 발생합니다.

    이를 통해 악의적인 공격자는 인증이 없거나 취약한 내부 서비스에 접근할 수 있게됩니다. 

    다음은 웹 환경 개발시 자주 쓰이는 내부 서비스 입니다.
    
    서비스 목록     
    
    이름                    용도   
    redis               cache 서버 
    mysql               RDBMS 서버
    k8s master node     클러스터 관리

    공격자는 기본적으로 인증을 사용하지 않거나 취약한 기본 계정을 자주 사용하는 서비스를 대상을 공격합니다.
    아래는 취약한 redis server의 설정입니다.

    # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES
    # JUST COMMENT THE FOLLOWING LINE.
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # bind 127.0.0.1 ::1
    bind 0.0.0.0

    bind 주소를 0.0.0.0으로 설정해 모든 IP Address로 부터 오는 요청을 허용하였습니다. 
    그 결과 공격자는 외부 인터넷 환경에서 해당 redis 서버에 접근할 수 있고 
    redis 기본 설정 상 인증 절차가 없기 때문에 접근만으로 임의 redis 명령을 수행할 수 있게 됩니다.

    // redis 는 기본적으로 port 6379를 사용
    $ nc [redis-server-ip] 6379 -v
    Connection to redis.dreamhack.io 6379 port [tcp/*] succeeded!
    SET dreamhack data
    +OK
    get dreamhack
    $4
    data

조치방안 :
    1)  해당 방법을 이용해 허용할 포트를 제외한 설정은 모두 삭제하는 것입니다.
            - 클라우드 환경은 방화벽 기능을 제공합니다.
            - 간단하게 해ㅕㄹ 가능하지만 인스턴스 이미지를 복사해 방화벽이 허용된 곳에서 사용한다면 취약

    2)  근본적인 원인을 해결하는 방법입니다. 설정 파일에서 취약한 부분을 찾아 패치하는 것입니다.
            - Ubuntu 환경에서 apt로 redis 패키지를 설치하였다면 /etc/redis/redis.conf경로에 설정파일이 있습니다.
            - 0.0.0.0으로 바인딩 되어있는 라인을 찾아 삭제하고 bind 127.0.0.1 ::1 로 설정해 로컬 머신에서만 접근할 수 있도록 해야 합니다.
            - 혹은 내부 서비스 네트워크에서만 접속하게 하려면 접속하는 대상의 아이피를 명시해 추가해야 합니다.











