Debug :
    디버그 모드 설정 또는 디버그 목적으로 코드 상에서 특정 정보를 사용자에게 제공할 경우 해당 정보를 기반으로 서버의 환경 및 정보가 노출될 수 있습니다.

        - 서버 환경설정 또는 프레임워크 등의 어플리케이션 구동 시 환경 설정의 Debug 옵션을 설정해 운용할 경우,
            사용자의 입력 데이터에 의해 에러가 발생하게 되면 해당 에러에 대한 정보가 노출될 수 있습니다.
            악의적인 공격자는 이런 에러 정보를 통해 서버를 공격하기 위한 기반 정보들을 획득합니다.

        Debug 모드가 설정된 코드

            #!/usr/bin/env python3
            from flask import Flask, request
            app = Flask(name)
            @app.route('/')
            def index():
                return 'hi'
            @app.route('/download')
            def download():
                file = request.args.get("file")
                return open(file).read()
            app.run(host='0.0.0.0', port=8000, debug=True)
            
        Error 발생 화면

            File "/app/src/app.py", line 13, in download
                return 'hi'

              @app.route('/download')
              def download():
                    file = request.args.get("file")
                    return open(file).read()

              app.run(host='0.0.0.0', port=8000, debug=True)
            
            TypeError: expected str, bytes or os.PathLike object, not NoneType

            debug 모드가 설정된 상태에서 에러가 발생하게 되면 위 그림과 같이 에러의 정보와 에러가 발생하는 서버 코드가 함께 노출되는 위협이 발생하기도 한다.

Error Message Disclosure :
    코드 상에서 사용하는 변수 또는 정보가 디버그 목적 등으로 사용자들에게 노출되는 경우도 있습니다.

    #!/usr/bin/env python3
    from flask import Flask, request
    app = Flask(__name__)
    @app.route('/')
    def index():
        return 'hi'
    @app.route('/download')
    def download():
        try:
            file = request.args.get("file")
            return open(file).read()
        except Exception as e:
            return str(e.args)
    app.run(host='0.0.0.0', port=8000)

    위와 같이 에러에 대한 상세한 내용을 출력하여 디버그를 하는 경우가 있습니다. 
    디버그 목적으로 사용 후 삭제하지 않거나 그대로 사용할 경우 악의적인 공격자에게 정보가 노출될 수 있습니다.


























