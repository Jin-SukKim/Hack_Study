Javascript Prototype Pollution :
    자바스크립트는 프로토타입을 사용하는 언어입니다.

    객체를 생성할 때 초기화 할 프로토타입을 지정해주지 않으면 Object.prototype의 속성과 정의된 함수(method)를 상속 받습니다.
    객체는 __proto__ 를 이용해 자신이 가르키고 있는 프로토타입에 접근할 수 있습니다. 
    또한 같은 프로토타입을 상속받은 모든 객체는 메모리 상 같은 주소를 가리키고 있습니다.

        var a = {0: 1}
        var b = {1: 2}
        console.log(a.__proto__ == b.__proto__) // true
        console.log(b.__proto__ == Object.prototype) // true

    초기화 할 프로토타입을 지정해주지 않은 a와 b 객체의 __proto__는 동일한 것을 확인할 수 있습니다. 또한 Object.prototype 과 일치합니다.

    Prototype Chain Lookup

        var x = {a: 0}
        x.__proto__.a = 1337
        x.__proto__.b = 1
        Object.prototype.c = 2
        var y = Object.create(x); // x를 프로토타입으로 가지는 오브젝트 생성.
        console.log(y.__proto__ == x); // true
        var z = {}
        console.log(z.__proto__ == y.__proto__); // false
        console.log(z.__proto__ == x.__proto__); // true
        console.log(z.__proto__ == y.__proto__.__proto__); // true 
        console.log(y.a); // 0
        console.log(y.b); // 1
        console.log(y.c); // 2
        console.log(x.a); // 0
        console.log(x.b); // 1
        console.log(x.c); // 2
        console.log(z.a); // 1337
        console.log(z.b); // 1
        console.log(z.c); // 2

        첫번째 라인에서 Object.prototype을 상속받는 기본 객체를 할당합니다. 
        x.__proto__ 에 a, b를 각 할당한 후 Object.prototype에 c를 할당합니다. 
        그 후 x를 프로토타입으로 하는 객체 y를 생성합니다. 
        y의 프로토타입은 Object.prototype과 다르다는 것을 알 수 있습니다.

        y.c를 출력했을 때 undefined가 아닌 2가 나오는 것을 통해 
        프로토타입에 원하는 속성이 없으면 계속해서 상위 프로토타입에서 찾는다는 것을 볼 수 있습니다.

        즉, y 에 c가 없다면, y.__proto__ 에 c가 없다면, y.__proto__.__proto__의 c를 검색합니다.

    Bracket notation
        객체에 접근할 때 사용하는 방법은 .을 이용하거나 [xyz]를 사용하는 방법이 있습니다. 
        전자는 dot notation, 후자는 bracket notation이라고 부릅니다.

        Bracket notation은 속성의 키를 문자열로 사용하기 때문에 변수를 넣거나 
        dot notation에서 사용할 수 없는 문자 (=, ', ")를 속성 키로 지정할 수 있습니다.

        var a = {a: 0};
        a["="] = "Equal Sign";
        a["="]; // Equal Sign
        a.=; // Uncaught SyntaxError: Unexpected token '='

실습 :
    왼쪽 실습 모듈에서는 bracket notation을 통해 임의 key, value를 설정할 수 있으며, __proto__에 접근하여 실습 모듈의 과제를 해결해 봅시다.
    실습 모듈처럼 객체의 프로토타입을 오염시켜 의도치 않은 결과를 발생시키는 것을 Prototype Pollution이라고 합니다.

모듈 :
    var x = {a: {foo: "bar"}, b: {1:2}, c: {hello: "world"}}
    var y = {}

    x[A][B] = C; // Input
    if (y.keyA == 'secret')
        console.log('Success!');

    y.keyA: undefined

    keyA의 값을 secret으로 만들어주세요.

입력 :
    A: 
    B: 
    C: 

    assign 버튼

출력 :
    error:
    {
        x: {
            a: {
                foo: "bar"
            },
            b: {
                1: 2
            },
            c: {
                hello: "world"
            }
        },
        __proto__: {
        }
    }

입력 :
    A: __proto__
    B: keyA
    C: secret

    assign 버튼

출력 :
    error:
    {
        x: {
            a: {
                foo: "bar"
            },
            b: {
                1: 2
            },
            c: {
                hello: "world"
            }
        },
        __proto__: {
            keyA: "secret"
        }
    }

A: __proto__
B: keyA
C: secret
위와 같이 데이터를 입력하면 아래와 같은 형태가 됩니다.
x["__proto__"]["keyA"] = "secret";
오브젝트의 프로토타입을 오염시켜 다른 오브젝트에도 영향을 미치게 됩니다.
y.keyA; // secret













