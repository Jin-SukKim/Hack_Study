PHP :
    Comparison :
        서로 다른 타입이 비교 연산자에서 사용될 경우 type-juggling에 의해 의도치 않은 결과가 발생할 수도 있습니다.

        비교 연산자(Equal, ==) 사용시 두 변수의 타입이 다르면 type-juggling에 의해 타입이 변환 된 후 비교.
        정확한 비교를 하기 위해 동일한 타입인지도 비교하는 비교연산자(Identical, ===)를 사용해야합니다.

        $a == $b    Equal       type juggling 후 $a와 $b의 값이 같으면 True.
        $a === $b   Identical   $a와 $b의 타입과 값이 모두 같으면 True.
        $a != $b    Not equal        type juggling 후 $a와 $b의 값이 다르면 True.
        $a <> $b    Not equal       type juggling 후 $a와 $b의 값이 다르면 True.
        $a !== $b   Not identical   $a와 $b의 타입 또는 값이 다르면 True.

        <?php
            var_dump(0 == "a"); // 0 == 0 -> true
            var_dump("1" == "01"); // 1 == 1 -> true
            var_dump("10" == "1e1"); // 10 == 10 -> true
            var_dump(100 == "1e2"); // 100 == 100 -> true
            var_dump(True == 1); // Boolean == Interger -> true
            var_dump(0 === "a"); // false
            var_dump("1" === "01"); // false
            var_dump("10" === "1e1"); // false
            var_dump(100 === "1e2"); // false
            var_dump(True === 1); // false
        ?>

        문자열 비교 : strcmp 함수
            strcmp ( string $str1 , string $str2 ) : int

        인자 비교시 같으면 0, $str1이 작으면 음수, $str2가 작으면 양수 반환
        string이 아닌 array일시 NULL

        NULL == 0 비교시 단순 Equal 연산이기 떄문에 Type Juggling 발생 0 == 0으로 비교되 문제 발생 가능

        <?php
            var_dump(strcmp("a", array())); // NULL
            var_dump(strcmp("a", array()) == 0); // NULL == 0 -> true
            var_dump(strcmp("a", array()) === 0); // NULL === 0 -> false

        strcmp 함수로 비교시 Eqaul이 아닌 Identical 사용
