PHP :
    Upload Logic :
        파일 업로드 기능 코드
            <?php
            $uploadDIR = './uploads/';
            $error = $_FILES['file']['error'];
            $name = $_FILES['file']['name'];
            if( $error != UPLOAD_ERR_OK ) {
            // error occurs
            }
            if( move_uploaded_file( $_FILES['file']['tmp_name'], "$uploadDIR/$name") ){
            // upload success
            }else{
            // upload fail
            }
        
        사용자가 업로드한 파일을 서버 파일 시스템에 옮기는 move_uploaded_file 함수 주목

        파일 업로드시 서버에서 지정된 파일 시스템 경로로 바로 업로드 되는 것이 아니라 임시 디렉토리(Linux에서는 기본적으로 /tmp)에
        저장된 후 move_uploaded_file 함수에 의해 서버 코드가 설정된 경로로 파일을 옮김

        => 파일 업로드 내부 로직
            1. 임시 디렉토리에 임시 파일 생성
            2. php 로직 중 업로드 파일 처리 로직 존재 시 임시파일 참조($_FILES['file']['tmp_name'])
            3. php 로직 처리 후 임시 파일 삭제

        php 코드에서 로직 처리등의 이유로 지연 발생시 임시 파일은 지연이 발생하는 시간동안 존재
            <?php
            sleep(5); // 임의적으로 5초 시간 지연

        시간 지연 발생시 페이지에 파일 업로드 후 해당 서버 임시 디렉토리 확인시 임시 파일 생성 확인 가능
            $ ls -al
            drwxrwxrwt 15 root     root      4096 Mar  9 10:45 .
            drwxr-xr-x 26 root     root      4096 Jan 28 06:50 ..
            -rw-------  1 www-data www-data 63253 Mar  9 10:45 phpIdg0HN

        임시 파일의 파일명 규칙 : php[a-zA-Z0-9]{6}

        문제 발생 가능 부분
            1) php 코드상에서 업로드 기능을 구현하지 않아도 사용자가 서버의 임시 디렉토리에 업로드 가능
                    php의 기본 설정에서 사용자의 요청 중 파일이 존재한다면 코드상에서 처리하는 로직이 존재하지 않더라도 임시 파일을 생성합니다. 
                    원하는 파일 경로나 파일 명으로 서버 파일 시스템에 존재하는 것은 아니지만, 원하는 파일 데이터가 서버의 예측 가능한 디렉토리(임시 디렉토리)에 작성될 수 있습니다.
                    또한 php 엔진의 문제를 발생시키는 Unhandled exception(php 웹 어플리케이션 코드 실행 중 php엔진의 문제가 발생하는 경우, segmentation fault)이 발생하게 되면 php 로직이 정상적으로 종료되지 않으며, 
                    php 파일 업로드 내부 로직의 마지막 과정인 임시 파일 삭제가 실행되지 않습니다. 
                    삭제되지 않은 임시 파일은 특별한 행위가 발생하기 전까지 임시 디렉토리에 남아 있게 됩니다.

            2) 예측 가능한 임시 파일 생성 규칙
                    임시 파일의 파일 명 생성 규칙은 php[a-zA-Z0-9]{6}입니다. 
                    일반적으로 해당 파일 명을 한번에 찾기는 어렵지만, Unhandled exception를 이용하여 임시 디렉토리 내에 임시 파일이 삭제되지 않도록하고, 같은 파일 데이터를 가진 파일을 무한히 업로드하면 무작위 대입공격을 통해 충분히 예측 가능한 범위까지 줄일 수 있습니다.
                    파일 업로드 내부 로직에서 발생할 수 있는 문제점이 include 또는 파일 시스템에서 발생하는 취약점과 연계되면 서버의 명령어를 실행시키는 등의 공격으로 연계될 수도 있습니다.









