PHP :
    Wrapper :
        include(), fopen(), copy(), file_exists(), filesize()와 같은 파일 시스템 함수에서 URL style 프로토콜을 위한 wrapper들이 존재

        파일 시스템 관련 함수로 filename이 사용자의 입력이 될 경우 php에 존재하는 wrapper를 사용해 개발자의 의도와 다른 행위를 발생 가능

            file:// — Accessing local filesystem
            http:// — Accessing HTTP(s) URLs
            ftp:// — Accessing FTP(s) URLs
            php:// — Accessing various I/O streams
            zlib:// — Compression Streams
            data:// — Data (RFC 2397)
            glob:// — Find pathnames matching pattern
            phar:// — PHP Archive
            등등...

        file : 파일 시스템에 접근
            <?php
            include "file:///etc/passwd";
            /*
            root:x:0:0:root:/root:/bin/bash
            daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
            bin:x:2:2:bin:/bin:/usr/sbin/nologin
            ...
            */

        URLs : http(s), ftp URL에 접근 (allow_url_include 옵션 설정되어 있어야 사용 가능)
            allow_url_include = On
                <?php
                    // php.ini => allow_url_include=On
                    include "http://example.com"; 
                /*
                <!doctype html>
                <html>
                ...
                */
                ?>
            allow_url_include = Off
                <?php
                // php.ini => allow_url_include=Off
                include "http://example.com"; 
                /*
                Warning: include(): http:// wrapper is disabled in the server configuration by allow_url_include=0
                */
                echo file_get_contents("http://example.com"); 
                // allow_url_include 영향 받지 않음.
                /*
                <!doctype html>
                <html>
                */
                ?>

        Data : RFC 2397 형식을 처리(https://tools.ietf.org/html/rfc2397)
            <?php
            echo file_get_contents('data://text/plain;base64,SSBsb3ZlIFBIUAo=');
            // I love PHP=

            data: wrapper는 allow_url_include 의 영향을 받습니다.

        PHP : 다양한 I/O stream과 filter를 사용
            php://stdin, php://stdout and php://stderr
                stdin, stdout, stderr로 연결합니다.
            php://fd/<fd number>
                file descriptor에 연결합니다.
            php://memory and php://temp
                메모리에 연결합니다.

                <?php
                // Set the limit to 5 MB.
                $fiveMBs = 5 * 1024 * 1024;
                $fp = fopen("php://temp/maxmemory:$fiveMBs", 'r+');
                fputs($fp, "hello\n");

            php://input
                HTTP의 body 즉, POST 데이터를 입력받습니다.

                <?php
                // HTTP Body Data
                $rawData = file_get_contents("php://input");

            php://filter
                I/O 스트림에 특정 필터를 설정

                <?php
                // 데이터 리드 시 대문자로 처리.
                include 'php://filter/read=string.toupper/resource=/etc/passwd';
                /*
                ROOT:X:0:0:ROOT:/ROOT:/USR/BIN/ZSH
                DAEMON:X:1:1:DAEMON:/USR/SBIN:/USR/SBIN/NOLOGIN
                ...
                */
                // 데이터 출력 시 대문자로 처리.
                file_put_contents("php://filter/write=string.toupper/resource=example.txt","Hello World");
                /*
                $ cat example.txt
                HELLO WORLD
                */
                ?>

                read=<filter> : read 시 사용할 필터
                write=<filter> : write 시 사용할 필터
                resource=<stream name> : 필터링을 설정할 stream 정보

            include시 php 태그가 존재하면 php 실행되고 해당 코드는 출력되지 않습니다.
            하지만 base64등의 인코딩을 통해 php tag를 인코딩 시켜서 코드가 실행되지 않고 출력되도록 하여 소스 코드를 노출시키는 방법을 많이 사용

                test.php
                    <?php echo 'test !'; ?>

                index.php
                    <?php
                    include 'test.php';
                    /*
                    test !
                    */
                    include 'php://filter/read=convert.base64-encode/resource=test.php';
                    /*
                    PD9waHAgZWNobyAndGVzdCAhJzsgPz4=
                    base64_decode("PD9waHAgZWNobyAndGVzdCAhJzsgPz4="); ==> <?php echo 'test !'; ?>
                    */