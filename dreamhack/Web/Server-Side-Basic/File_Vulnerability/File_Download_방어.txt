1) .., / 와 \\ 필터링 필요

2) DB에 다운로드 될 파일의 경로와 그에 해당하는 랜덤 키를 생성해 1대 1로 매칭해 저장
    -> 해당 랜덤 값이 인자로 넘어왔을 때 DB에 존재하는 파일인지를 먼저 식별하고 다운로드 하는 것이 안전.

    ex)
    @app.route("/download")
    def download():
        file_id = request.args.get("file_id", "")     # file_id는 쉽게 유추하지 못하는 랜덤한 값이어야 합니다.
        file_path = find_path_from_database(file_id)  # find_path_from_database 함수는 데이터베이스에서 file_id와 매핑된 파일 경로를 반환하는 개발자가 작성한 함수입니다.
        if file_path is None:
            return "올바르지 않은 파일 아이디입니다."
        return open(file_path, "rb").read()

단 : 단순히 ../만 필터링 할 경우 ..././file 같은 형식으로 ../가 삭제되 ../ 만드는 방식 사용 가능
웹 서버 동작 OS가 윈도우 OS 일시 ../외에 ..\\로도 상위경로로 접근 가능
