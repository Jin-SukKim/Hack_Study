JSONP :
    JSON with Padding의 준말이며, CORS 기술이 도입되기 전 SOP를 우회하기 위해 흔히 쓰였던 방식입니다.

    API 제공자의 코드를 그대로 사용자의 웹 문서에서 실행하기 때문에 API 서버가 침해되면
    API를 사용하는 문서 역시 자동으로 XSS 공격에 취약해진다는 단점이 있어 신뢰할 수 있는 API 서버가 아닌 이상 최근에는 그 사용이 줄어들고 있는 추세입니다.

    JSONP API는 JSON API과 유사하나, 응답 데이터를 특정 콜백 함수를 호출하는 코드로 감싸고 요청 시 XHR이 아니라
    <script src="https://api.test/request.jsonp?id=123&callback=onAPIResponse"> 와 같이 스크립트로 포함시켜 동작한다는 점이 다릅니다. 

    응답은 onAPIResponse({...}); 식으로 생성되어 최종적으로 본래 문서의 함수를 호출하게 됩니다.

취약점 :
    1) Origin 검사 부재로 인한 CSRF
        - SONP에 한정된 취약점은 아니지만, 전적으로 HTTP GET 메소드에 의존하는 JSONP 특성상 CSRF 공격에 더 취약한 특성이 있습니다.
        - 공적으로 사용 가능한 API면 상관이 없으나, 민감한 정보를 반환하거나 권한이 필요한 작업을 수행하는 경우 JSONP 요청을 처리할 때마다 요청자의 Origin을 검사하여야 합니다.
        - CSRF Token을 사용하는 방법이 있으나 리다이렉트가 존재하는 경우 토큰이 Referer 헤더를 통해 제3자에게 노출되는 일이 발생하지 않도록 주의하여야 합니다.

    2) 콜백 함수명 검증 부재로 인한 제공자 XSS
        - JSONP API 다수는 사용자가 콜백 함수명을 직접 지정할 수 있도록 하고 있습니다.
        - 만일 콜백명에 HTML 코드 등을 삽입한다면 브라우저는 이를 HTML로 인식할 수 있고, 이 경우 XSS 취약점이 발생하게 됩니다.

        - 콜백 HTML 삽입을 막기 위해서는 콜백명에 필터를 적용하는 것이 좋습니다.
        - 추가적으로 JSONP 요청을 처리할 때 HTTP Accept 헤더에 text/javascript MIME 타입이 포함되어 있는지 검사하고, 
          Content-Type: text/javascript 설정 및 X-Content-Type-Options: nosniff 헤더로 응답이 자바스크립트가 아닌 다른 콘텐츠로 인식되는 경우를 방지하여야 합니다. 
    
    3) JSONP API 침해 사고 발생 시 사용자 XSS
        - 만약 JSONP API가 침해 사고를 당해 악의적인 응답이 돌아온다면 이를 사용하는 모든 사이트는 XSS 공격을 받게 됩니다. 
        - 이는 JSONP의 가장 큰 단점으로 CSP를 사용하고 JSONP를 제공하는 웹 서비스를 신뢰하는 것 외에는 별다른 방법이 없습니다.
        - JSONP 사용을 피하고 CORS 정책 헤더를 대신 사용하여야 하는 이유입니다.






















