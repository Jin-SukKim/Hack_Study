CSP(Content Sevurity Policy, 컨텐츠 보안 정책) :
    XSS 공격이 발생하였을 때 그 피해를 줄이고 웹 관리자가 공격 시도를 보고받을 수 있도록 하는 기술입니다.

    웹 페이지에 사용될 수 있는 자원에서 위치 등에 제약을 걸어
    공격자가 웹 사이트에 본래 있지 않던 스크립트를 삽입하거나 
    공격자에게 권한이 있는 서버 등에 요청을 보내지 못하도록 막을 수 있습니다.

    CSP는 XSS 등 공격의 피해를 완전히 무력화하기 위한 수단은 아니기 때문에 XSS에 대한 자체적인 방어가 병행되어야 합니다.

    CSP 헤더는 1개 이상의 정책 디렉티브가 세미콜론(;)으로 분리된 형태로 이루어져 있습니다. 
    정책 디렉티브는 지시어 종류(예. default-src, script-src)와 1개 이상의 출처가 스페이스로 분리된 형태로 지정하여야 합니다.
        (예. 'self', https:, *.dreamhack.io)

    다음은 페이지 내부의 자원들이 같은 Origin 또는 https://example.dreamhack.io에서만 로드되어야 함을 나타내는 CSP 헤더입니다.
        
        Content-Security-Policy: default-src 'self' https://example.dreamhack.io

    다음은 <script nonce="1AfdcQ8/gY+d1Yarc7=="> 와 같이 특정 nonce 속성이 입력된 태그만을 허용하며,
    추가로 <base> 태그가 현재 페이지가 참조하는 상대 경로들이 해석되는 기준점을 바꾸지 못하도록 합니다.
    nonce 값은 공격자가 예측할 수 없도록 페이지를 접근할 때마다 재생성하여야 합니다.

        Content-Security-Policy: default-src 'nonce-1AfdcQ8/gY+d1Yarc7=='; base-uri 'none'

    다음은 SHA384 해쉬가 38b060a751ac9638...4898b95b 인 스크립트를 허용하는 CSP 헤더입니다.

        Content-Security-Policy: script-src 'sha384-OLBgp1GsljhM2TJ+sbHjaiH9txEUvgdDTAzHv2P24donTt6/529l+9Ua0vFImLlb3g=='

    만약 페이지가 PHP나 Python, CGI 등 동적 기능을 사용하지 않는 정적인 웹 페이지라면 CSP 정책을 HTML <meta> 태그로도 지정할 수 있습니다.
    이는 바뀌지 않는 자원들을 별도의 HTTP 서버 설정 없이 HTML 페이지 내에서 지정할 수 있도록 합니다.

    정적인 웹 페이지에서도 자바스크립트 코드에서 DOM 기반 XSS가 발생할 수 있기 때문에 이를 정도 방어가 가능합니다.
    동적 웹 페이지에서도 사용 가능하나 사용자가 동적 콘텐츠를 이용해 CSP를 무력화하지 못하도록 주의해야 합니다.

        <meta http-equiv="Content-Security-Policy" content="default-src 'self'; base-uri 'none'">

    CSP 규칙은 가능한 한 세밀하게 설정하는 것이 좋습니다.
    CSP 정책이 관용적으로 설정될 경우 (예. 특정 CDN의 모든 자원 허용) 공격자는 CSP 내에서 허용된 서버를 공격하거나
    웹 사이트의 API 엔드포인트 등을 역이용하여 XSS 공격을 감행할 수 있어 효과가 떨어지게 됩니다.
    































