CSP(Content Sevurity Policy, 컨텐츠 보안 정책) :
    XSS 공격이 발생하였을 때 그 피해를 줄이고 웹 관리자가 공격 시도를 보고받을 수 있도록 하는 기술입니다.

CSP 우회 - 신뢰하는 도메인에 업로드 :
    
    1)  CSP를 이용하면 브라우저가 특정 웹 사이트에서만 자원을 불러오게끔 제한할 수 있습니다.
        만약 해당 웹 사이트가 파일 업로드 및 다운로드 기능을 제공한다면, 
        공격자는 해당 사이트에 스크립트 등을 업로드한 뒤 다운로드 주소로 대상 웹 페이지에 해당 자원을 포함시킬 수 있게 됩니다.

            <meta http-equiv="Content-Security-Policy" content="script-src 'self'">
            ...
            <h1>검색 결과: <script src="/download_file.php?id=177742"></script></h1>

    2) JSONP API가 신뢰하는 도메인에 존재한다면 다음과 같이 공격이 가능합니다.

        <script src="/v1/shares/1?type=jsonp&callback=alert(document.cookie);//"></script>
        <!--
        Response -> alert(document.cookie);//("status":200,"result":{"id":1,"shared_type":"post","title":"다람쥐 헌 쳇바퀴에 타고파"},"message":"요청에 성공하였습니다.");
        주석처리에 의해 실제 실행되는 코드 -> alert(document.cookie); 
        -->

    이에 대한 해결책으로는 도메인 Origin 대신 해쉬나 nonce 등을 이용하는 방법이 있습니다.
    부득이하게 웹 사이트 단위 자원 출처 지정이 필요한 경우 HTTP 요청의 Accept 헤더를 바탕으로 현재 요청이 <script src="..."> 등에서 기원한 것인지 확인하여 요청을 거부할 수는 있습니다.

    한편, JSONP API를 제공하는 서비스는 콜백 이름에 식별자를 제외한 문자를 거부함으로써 이를 추가적으로 방어할 수 있습니다.
    그러나 가능한 경우 JSONP보다는 CORS를 지원하는 API를 사용하는 것이 좋습니다.

    CSP에서 기본적으로 사용할 수 있는 Origin 명세는 다음과 같습니다.

            종류                        설명                                                                            예시

        <host-source>           호스트와 포트로 판별합니다.                                                     https://*.dreamhack.io
                                                                                                            dreamhack.io:443
                                                                                                            http://insecure.dreamhack.io

        <scheme-source>         URL 스키마로 판별합니다.                                                        http:, https:, data:, blob:, ...

        'self'                  같은 Origin의 자원만 허용합니다.                                                'self'

        'unsafe-eval'           eval() 등 안전하지 않은 함수를 허용합니다.                                       'unsafe-eval

        'unsafe-inline'         유효한 nonce나 해쉬가 지정되지 않은 <script>, javascript: URL 등을 허용합니다.    'unsafe-inline'

        'none'                  어떤 Origin도 허용하지 않습니다.                                                'none'

        nonce-<base64>          Base64로 지정된 nonce를 지정합니다.                                             'nonce-CAxn148fFUvd9u3201Gy='

        <hashalg>-<base64>      Base64로 지정된 해쉬 값을 사용하여 추후 로드되는 자원의 해쉬와 비교합니다.          sha384-OLBgp1GsljhM2TJ+sbHjaiH9txEUvgdDTAzHv2P24donTt6/529l+9Ua0vFImLlb3g==

CSP 우회 - nonce 예측 가능 :
    CSP의 nonce를 이용하면 따로 도메인이나 해쉬 등을 지정하지 않아도 공격자가 예측할 수 없는
    특정 nonce 값이 태그 속성에 존재할 것을 요구함으로써 XSS 공격을 방어할 수 있습니다. 

    이 방어를 효과적으로 사용하기 위해서는 nonce 가 공격자가 취득하거나 예측할 수 없는 값이어야 합니다. 

    이는 보통 매 요청마다 nonce를 새로 생성함으로써 이루어지는데, 
    만일 이를 생성하는 알고리즘이 취약하여 결과 예측이 가능하면 공격자는 이를 유추해 자신의 스크립트를 웹 사이트에 삽입할 수 있습니다.

    nonce를 사용할 때에는 nonce 값을 담고 있는 HTTP 헤더 또는 <meta> 태그가 캐시되지 않는지 주의하여야 합니다.
    PHP나 CGI 계열 스크립팅을 사용할 때에는 특히 주의해야 하는데,
    이는 스크립트들이 마치 디렉토리처럼 /index.php/style.css 와 같이 뒤에 추가적인 경로를 붙여 접근될 수 있기 때문입니다.

    만약 캐시 서버가 확장자를 기반으로 캐시 여부를 판단한다면 .css 는 일반적으로 정적 파일이므로 동적 콘텐츠로 간주하지 않아 캐시에 저장할 수 있고, 
    이 경우 캐시가 만료될 때까지 요청시마다 같은 nonce가 돌아오기 때문에 공격자는 이를 바탕으로 nonce를 획득할 수 있습니다.
    콘텐츠가 캐시되어 서버측 XSS가 일어나지는 않으나, DOM XSS 등 클라이언트측에서 일어날 수 있는 공격에 취약해지게 됩니다.

    추가적으로, nonce 값은 공격자가 예측할 수 없는 난수 값이어야기 때문에 보안상 안전한 의사 난수 생성기(CSPRNG)를 사용하는 것이 좋습니다.
    만일 현재 시각(srand() / rand()) 등 공격자가 알 수 있는 정보를 바탕으로 nonce를 생성하면 방어의 효과를 잃게 됩니다.
    이는 CSP 이외에도 난수를 사용하는 응용에서 일반적으로 적용되는 사항입니다.

    Nginx와 PHP FastCGI SAPI(php-fpm)를 사용하였을 때의 예시입니다.
        ex)
            location ~ \.php {
                include snippets/fastcgi-php.conf;
                fastcgi_pass unix:/run/php/php7.2-fpm.sock;
            }
        
    아래는 snippets/fastcgi-php.conf 의 내용입니다.
        ex)
            # regex to split $uri to $fastcgi_script_name and $fastcgi_path
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            
            # Check that the PHP script exists before passing it
            try_files $fastcgi_script_name =404;
            
            # Bypass the fact that try_files resets $fastcgi_path_info
            # see: http://trac.nginx.org/nginx/ticket/321
            set $path_info $fastcgi_path_info;
            fastcgi_param PATH_INFO $path_info;
           
            fastcgi_index index.php;
            include fastcgi.conf;

    위와 같은 Nginx 설정을 갖고 있을 때 /dom_xss_vulnerable.php/style.css 의 주소로 접근하면
    dom_xss_vulnerable.php 파일이 실행되어 nonce가 <meta http-equiv="Content-Security-Policy" content="... nonce ..."> 태그로 출력됩니다.

    CDN은 보통 CSS 또는 스크립트 등 정적 파일을 캐싱하기 때문에 meta 태그로 출력된 nonce 또한 같이 캐싱됩니다
    (https://docs.microsoft.com/ko-kr/azure/cdn/cdn-how-caching-works)

    따라서 DOM XSS에 취약한 해당 페이지의 nonce값이 고정되어 공격자는 <script nonce="{고정된 nonce 값}">alert(1);</script> 와 같은 마크업을 이용할 수 있습니다.

    PATH_INFO 기능을 사용하지 않는 경우 해당 설정은 location ~ \.php$ 처럼 URL의 끝 부분이 .php일때만 FastCGI로 넘어가게 수정되어야 합니다. 
    또한 URL에 a/b.php/c/d.php와 같이 .php가 중복 사용될 때를 대비하여 fastcgi-php.conf 스니펫을 사용하지 않고 다음과 같이 변경되어야 합니다.

        ex) 
            location ~ \.php$ {
            try_files $uri =404;
            fastcgi_index index.php;
            include fastcgi.conf;
            fastcgi_pass unix:/run/php/php7.2-fpm.sock;
        }

CSP 우회 - base-uri 미지정 :
    HTML에서 하이퍼링크에서 상대 경로를 지정하면 브라우저는 마치 파일 경로처럼 기본적으로 현재 문서를 기준으로 주소를 해석하게 됩니다. 

    HTML <base> 요소는 상대 경로가 해석되는 기준점을 변경할 수 있도록 하며, <a>, <form> 등의 target 속성의 기본값을 지정하도록 합니다.

    만일 공격자가 <base href="https://malice.test/xss-proxy/">와 같은 마크업을 삽입하게 된다면,
    추후 상대 경로를 사용하는 URL들은 본래 의도한 위치가 아닌 공격자의 서버에 자원을 가리키게 되어 공격자는 이를 통해 임의의 스크립트 등을 삽입할 수 있게 됩니다.

    본래 <base> 태그의 href 속성을 사용하지 않는 페이지라면 이를 방어하기 위해 다음과 같은 정책을 설정할 수 있습니다.
        ex)
            Content-Security-Policy: base-uri 'none'

    임의 HTML 마크업을 삽입해 글을 올릴 수 있는 서비스가 있다고 가정합니다.

    해당 서비스는 업로드 과정에서 필터링를 통해 <a> 태그 내에 있는 href 속성이 외부 링크면 내부 페이지(아래 link.php)로 이동해 경고를 하는 기능을 제공합니다.
        ex)
            <?php
            // link.php
            $url = $_GET['url'];
            echo "이 링크는 외부 링크입니다. " . htmlspecialchars($url, ENT_QUOTES);
            echo "<br>" . "이동하시려면 아래 버튼을 눌러주세요.<br>";
            echo "<a href=\"" . htmlspecialchars($url, ENT_QUOTES) . "\">이동하기</a>";
        
            <a href="http://bob.alice/malicious.php">click me</a>
            --> <a href="http://dreamhack.php/link.php?url=http://bob.alice/malicious.php">click me</a>

        외부 링크는 내부 link.php를 거쳐가게 됩니다.
            <base href="http://bob.alice/">
            <a href="/malicious.php">click me</a>

    CSP의 base-uri 지시어를 지정해주지 않으면 위 방법으로 우회할 수 있습니다. 이를 막기 위해 CSP base-uri 'none' 정책을 사용해야 합니다.


csp에서 base-uri 미지정 페이지에 link.php 예시에서 base-uri ‘none’ 정책이 없을 때 우회방법은 link.php를 거치지 않고 바로 입력한 url 로 접근할 수 있어서 취약

서버의 로직이 외부 URL (링크)를 삽입할 경우 link.php로 한번 더 감싸 외부 URL로의 탈출의 위험성을 경고해줍니다.
base 태그를 통해 base href를 변경할 경우 내부 URL이 외부로 이동되게 할 수 있습니다.

외부 URL : https://www.naver.com/ => /link.php?url=https://www.naver.com/
내부 URL : base href =“https://malicious.com/” /malicious.php => https://malicious.com/malicious.php



