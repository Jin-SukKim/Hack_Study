DES 과정 - Step2. 라운드 함수 :
    라운드 함수 F에는 오른쪽 블록만 입력되므로, 입력의 길이는 32비트입니다.
    라운드 함수는 확장 순열(Expansion P-Box), 라운드 키 결합(XOR), 치환 테이블(S-Box) 그리고 고정 순열(Straight P-Box)로 이루어져 있습니다.

    각 요소들을 자세히 알아보겠습니다.

1. 확장 순열과 라운드 키 결합
    확장 순열(Expansion P-Box)은 입력을 비트 단위로 전치하는 동시에, 전체 길이를 48비트로 확장합니다.
    이 과정에서 32비트의 입력값을 4비트씩 8개의 부분으로 나누고, 테이블을 참조하여 각각을 6비트로 확장합니다.

    이 과정은 테이블만 다를 뿐, 초기 순열, 최종 순열과 같은 방식으로 이뤄집니다.
    라운드 키 결합은 확장 순열로 나온 출력을 라운드 키KK와 xor 하는 것입니다.

    아래 코드는 키 생성 함수를 정의하지 않았으므로 아직 실행할 수 없습니다.
    ex)
        #!/usr/bin/env python3
        # Name: DES
        
        # Expansion P-Box Table
        EPT = [32, 1, 2, 3, 4, 5,
            4, 5, 6, 7, 8, 9,
            8, 9, 10, 11, 12, 13,
            12, 13, 14, 15, 16, 17,
            16, 17, 18, 19, 20, 21,
            20, 21, 22, 23, 24, 25,
            24, 25, 26, 27, 28, 29,
            28, 29, 30, 31, 32, 1]
        
        #Initial permutation
        ...
        
        # Feistel
        left_half = initial_permutated[:32]
        right_half = initial_permutated[32:]
        
        # Iterates 16 rounds
        for round in range(16):
            # Expansion
            expansioned = permutation(right_half, EPT, 48)
            
            # XOR with round key
            for bit_idx in range(48):
                expansioned[bit_idx] ^= round_keys[round][bit_idx]
        
        ...
        # Final permutation
        ...

2. S-Box와 고정 순열 
    S-Box(Substitution-Box)는 라운드 키 결합에서 출력된 48비트 결과 값을 32비트로 축소합니다.

    S-Box는 4개의 행과 16개의 열로 이루어진 표를 사용하는데, 표의 각 값은 4비트로 표현되는 수입니다.
    S-Box가 적용되는 과정은 다음과 같습니다.

    먼저, 입력을 여섯 비트씩 8개의 부분으로 나눕니다.
    여섯 비트 중 첫 번째와 마지막 비트로 행을 결정하고, 나머지 네 개의 비트로 열을 결정합니다.
    그 뒤, S-Box의 표에서 행과 열을 참조하여 값을 반환합니다.
    DES에서는 여섯 비트로 자른 부분마다 다른 S-Box를 사용합니다.

    아래 코드에는 S-Box를 일부 생략했습니다.
    다른 S-Box는 코스의 끝에 첨부된 전체 코드에서 확인할 수 있습니다.
    ex)
        #!/usr/bin/env python3
        # Name: des.py
        
        # S-Boxes
        S = [
            # S1
            [
                [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
                [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
                [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
                [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
            ],
            ...
            # S8
            [
                [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
                [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
                [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
                [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],
            ]
        ]
        
        # Straight P-Box Table
        SPT = [16, 7, 20, 21, 29, 12, 28, 17,
            1, 15, 23, 26, 5, 18, 31, 10,
            2, 8, 24, 14, 32, 27, 3, 9,
            19, 13, 30, 6, 22, 11, 4, 25]
        
        def substitution(block, table):
            row = (block[0] << 1) + block[5]
            column = (block[1] << 3) + (block[2] << 2) + (block[3] << 1) + block[4]
            val = table[row][column]
            binary = bin(val)[2:].zfill(4)
            return bytearray([int(b) for b in binary])
        
        #Initial Permutation
        ...
        
        # Feistel
        ...
        
        # Iterate 16 rounds
        for i in range(16):
        
        # Expansion
        expansioned = permutation(right_half, EPT, 48)
        
        # XOR with round key
        for j in range(48):
                expansioned[j] ^= round_keys[i][j]
        
        # Substitution
        substituted = bytearray(32)
        for block_idx in range(8):
            substituted[4*block_idx:4*block_idx+4] = substitution(expansioned[6*block_idx:6*block_idx+6], S[block_idx])
            
            # Straight
            straighted = permutation(substituted, SPT, 32)
        ...
        # Final Permutation
        ...

    S-Box로 길이를 축소하고 나면, 고정 순열(Straight P-Box)로 다시 비트 단위 전치가 이뤄집니다.
    이 과정은 다른 순열 과정들과 같으므로, 설명을 생략하겠습니다.
    






















