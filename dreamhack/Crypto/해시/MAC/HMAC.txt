HMAC :
    MAC을 만드는 방법은 크게 암호학적 해시 함수를 이용하는 방법과 블록 암호를 이용하는 방법으로 나눌 수 있습니다.
    그중에서 HMAC은 해시 함수를 기반으로 하는 MAC입니다.

    실제 표준으로 정의된 HMAC은 키의 길이, 블록의 길이를 인자로 하는 복잡한 함수입니다.
    여기서는 이를 다소 간소화하여 다음과 같은 HMACHMAC함수가 있다고 하겠습니다.

        HMAC(K, M) = H(K ∣∣ M)

    ∣∣는 비트 배열을 연결하는 연산자입니다.
    예를 들어 01 ∣∣ 110=01110입니다.
    즉 이 함수는 키와 메시지를 붙인 것의 해시 값으로 HMAC을 생성합니다.

    HMAC을 사용하면, 메세지를 도청당해도 역상 저항성으로 인해 공격자가 HMAC에 사용된 키를 알아낼 수 없으며,
    메세지를 위조하면 위조한 메세지에 대한 올바른 HMAC을 생성할 수 없습니다.

    ex)
        #!/usr/bin/env python3
        # Name: hmac.py
        
        import hashlib, hmac
        
        # key : b'secret', msg : b'hello world'
        
        h = hmac.new(b'secret', b'hello world', hashlib.sha256).hexdigest() 
        print(h) # 734cc62f32841568f45715aeb9f4d7891324e6d948e4c6c60c0621cdac48623a



Q2. 알려진 암호학적 해시 함수 H를 사용하여 함수 HMAC을 다음과 같이 정의할 때, HMAC에 존재하는 취약성을 고르시오. 
    답 : A

    A. HMAC(K,M)을 알 때, 공격자가 임의 메세지에 대한 HMAC(K,M)을 생성할 수 있다.

    B. HMAC(K,M)을 알 때, 공격자가 K를 알 수 있다.

    C. HMAC(K,M)을 알 때, 공격자가 M을 알 수 있다.

    D. HMAC(K,M)을 알 때, 공격자가 $H(K||M)$을 알 수 있다.

    K를 몰라도 HMAC 값으로부터 H(K) 값을 알아내어 공격자가 임의 데이터에 대한 올바른 HMAC을 구할 수 있다.






















