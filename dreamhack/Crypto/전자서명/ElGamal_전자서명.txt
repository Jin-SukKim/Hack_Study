ElGamal 전자 서명 :
    1984년 Taher Elgamal에 의해서 발표된 ElGamal 전자 서명은 이산 대수 문제의 어려움에 기반하여 설계되었습니다.
    ElGamal 전자 서명을 모태로 하여 DSA(Digital Signature Algorithm) 전자 서명 등 다양한 전자 서명이 설계되었습니다.

    RSA 전자 서명의 취약점들이 해시를 사용해서 보완한 것처럼 ElGamal 전자 서명 과정에서도 해시를 사용합니다. 
    아래의 설명에서는 편의상 해시값을 m으로 표기하였습니다.

    1) ElGamal 키 생성 :
        큰 소수 p와 키를 만드는 생성원 g를 선택합니다.
        그 뒤, p-1보다 작고 1보다 큰 정수 x를 임의로 선택합니다.
        y = g^x (mod p)을 계산하여 (y,g,p)를 검증키로, x를 서명키로 사용합니다.

    2) 서명 생성 :
        메시지 m과 서명키 x에 대한 서명 값 s를 아래의 과정에 따라 생성합니다.

        먼저 p-1보다 작고, 이와 서로소인 정수 k를 임의로 선택합니다.
        그 뒤, 다음 계산으로 서명 값을 생성합니다.

            γ ≡ g^k (mod p)
            δ ≡ (m − xγ)k^−1 (mod p−1)
            s = (γ,δ)

    3) 서명 검증 :
        서명 s = (γ,δ), 메시지 m, 검증키 (y,g,p)가 있을 때, 
        서명 s에 대한 검증은 g^m (mod p)와 y^γ * γ^δ (mod p)의 비교로 이뤄집니다.
        이 둘이 같은 값이라면 s는 유효한 서명입니다.

        증명은 다음과 같습니다.

        먼저 δ ≡ (m − xγ)k^−1 (mod p−1) 이므로 어떤 n에 대하여, 다음 식이 성립합니다.

        δ ≡ (m − xγ)k^−1 + n(p-1)

        이를 이용하여 y^γ * γ^δ를 정리하면 다음과 같습니다.

        y^γ * γ^δ ≡ g^(xγ) * g^(kδ) ≡ g^(xγ+kδ)
        ≡ g^(xγ + k((m − xγ)k^−1 + n(p−1)))
        ≡ g^(xγ + (m−xγ)) ( ∵ g^(p−1) ≡ 1(mod p))
        ≡ g^m (mod p)

        따라서 g^m (mod p)와 y^γ * γ^δ가 같다면, 서명 값 s는 올바른 값입니다.


    3) ElGamal 전자 서명 공격 : 
        ElGamal 전자 서명은 서명 생성 과정에서 매번 서명을 할 때마다
        새로운 난수 k를 선택하여 사용하기 때문에 동일한 메시지에 대해서도 서명 값이 항상 변합니다.
        이러한 특성을 비결정적(Nondeterministic) 성질이라고 하며,
        이로 인해 RSA 서명 기법에 존재하던 문제점이 ElGamal에서는 대부분 해결됩니다.

        그대신 ElGamal은 난수 k를 매번 같은 값으로 고정하면 서명키 x가 노출될 수 있다고 알려져 있습니다.
        공격 방법은 다음과 같습니다.

        먼저 공격자는 두 개의 메시지 m1, m2에 대해서 같은 k를 사용한 서명 s1 = (γ1,δ1), s2 = (γ2,δ2)를 가지고 있다고 가정합니다.
        서명 생성 과정에 의해 아래의 네 개의 식이 성립합니다.

            y1 ≡ g^k (mod p)
            δ1 ≡ (m1 − xy1)k^−1 (mod p−1)
            y2 ≡ g^k (mod p)
            δ2 ≡ (m2 − xy2)k^−1 (mod p−1)

        위 식들을 통해 아래의 식을 얻어낼 수 있습니다.

            δ1 - δ2 ≡ (m1 − xy1)k^−1 - (m2 - xy2)k^-1
            ≡ (m1 − xy1 - m2 - xy2)k^-1
            ≡ (m1 − xy1)k^-1 (mod p-1) (y1 =y2)

        이 때  δ1 - δ2값이 0이 아니라면 공격자는 k를 계산할 수 있습니다.

            k ≡ (m1 − m2) (δ1 - δ2)^-1 (mod p-1)
        
        난수 k가 노출되면 공격자는 서명 값과 k를 통해 서명키 x를 구할 수 있습니다.

            x ≡ (m1 − δ1k)y1^-1 (mod p-1)

        서명키 x를 알면 원하는 메시지의 서명값 또한 구할 수 있기 때문에 매우 위험한 취약점임을 알 수 있습니다.
        따라서 k 값은 고정된 값이 아닌 적절한 난수값으로 정해야 합니다.





